{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoreGeth: An Ethereum Protocol Provider \u00b6 An ethereum/go-ethereum downstream effort to make the Ethereum Protocol accessible and extensible for a diverse ecosystem. Priority is given to reducing opinions around chain configuration, IP-based feature implementations, and API predictability. Upstream development from ethereum/go-ethereum is merged to this repository regularly, usually at every upstream tagged release. Every effort is made to maintain seamless compatibility with upstream source, including compatible RPC, JS, and CLI APIs, data storage locations and schemas, and, of course, interoperable node protocols. Applicable bug reports, bug fixes, features, and proposals should be made upstream whenever possible. Network/provider comparison \u00b6 Networks supported by the respective core-geth packaged geth program. Ticker Consensus Network core-geth ethereum/go-ethereum ETC Ethereum Classic ETH Ethereum (Foundation) - Private chains Mordor (Geth+Parity ETH PoW Testnet) Morden (Geth+Parity ETH PoW Testnet) Ropsten (Geth+Parity ETH PoW Testnet) Rinkeby (Geth-only ETH PoA Testnet) Kovan (Parity-only ETH PoA Testnet) Tobalaba (EWF Testnet) Ephemeral development PoA network = Proof of Work = Proof of Authority 1 : This is originally an Ellaism Project . However, A recent hard fork makes Ellaism not feasible to support with go-ethereum any more. Existing Ellaism users are asked to switch to Parity . 2 : Network not supported by default, but network configuration is possible. Make a PR!","title":"CoreGeth"},{"location":"#coregeth-an-ethereum-protocol-provider","text":"An ethereum/go-ethereum downstream effort to make the Ethereum Protocol accessible and extensible for a diverse ecosystem. Priority is given to reducing opinions around chain configuration, IP-based feature implementations, and API predictability. Upstream development from ethereum/go-ethereum is merged to this repository regularly, usually at every upstream tagged release. Every effort is made to maintain seamless compatibility with upstream source, including compatible RPC, JS, and CLI APIs, data storage locations and schemas, and, of course, interoperable node protocols. Applicable bug reports, bug fixes, features, and proposals should be made upstream whenever possible.","title":"CoreGeth: An Ethereum Protocol Provider"},{"location":"#networkprovider-comparison","text":"Networks supported by the respective core-geth packaged geth program. Ticker Consensus Network core-geth ethereum/go-ethereum ETC Ethereum Classic ETH Ethereum (Foundation) - Private chains Mordor (Geth+Parity ETH PoW Testnet) Morden (Geth+Parity ETH PoW Testnet) Ropsten (Geth+Parity ETH PoW Testnet) Rinkeby (Geth-only ETH PoA Testnet) Kovan (Parity-only ETH PoA Testnet) Tobalaba (EWF Testnet) Ephemeral development PoA network = Proof of Work = Proof of Authority 1 : This is originally an Ellaism Project . However, A recent hard fork makes Ellaism not feasible to support with go-ethereum any more. Existing Ellaism users are asked to switch to Parity . 2 : Network not supported by default, but network configuration is possible. Make a PR!","title":"Network/provider comparison"},{"location":"JSON-RPC-API/","text":"Using JSON-RPC APIs \u00b6 Programmatically interfacing geth nodes \u00b6 As a developer, sooner rather than later you\u2019ll want to start interacting with geth and the Ethereum Classic network via your own programs and not manually through the console. To aid this, geth has built-in support for a JSON-RPC based APIs ( standard APIs and geth specific APIs ). These can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based platforms, and named pipes on Windows). The IPC interface is enabled by default and exposes all the APIs supported by geth , whereas the HTTP and WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons. These can be turned on/off and configured as you\u2019d expect. HTTP based JSON-RPC API options: --http Enable the HTTP-RPC server --http.addr HTTP-RPC server listening interface (default: localhost ) --http.port HTTP-RPC server listening port (default: 8545 ) --http.api API\u2019s offered over the HTTP-RPC interface (default: eth,net,web3 ) --http.corsdomain Comma separated list of domains from which to accept cross origin requests (browser enforced) --ws Enable the WS-RPC server --ws.addr WS-RPC server listening interface (default: localhost ) --ws.port WS-RPC server listening port (default: 8546 ) --ws.api API\u2019s offered over the WS-RPC interface (default: eth,net,web3 ) --ws.origins Origins from which to accept websockets requests --graphql Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well. --graphql.corsdomain Comma separated list of domains from which to accept cross origin requests (browser enforced) --graphql.vhosts Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts \u2018*\u2019 wildcard. (default: \u201clocalhost\u201d) --ipcdisable Disable the IPC-RPC server --ipcapi API\u2019s offered over the IPC-RPC interface (default: admin,debug,eth,miner,net,personal,shh,txpool,web3 ) --ipcpath Filename for IPC socket/pipe within the datadir (explicit paths escape it) You\u2019ll need to use your own programming environments\u2019 capabilities (libraries, tools, etc) to connect via HTTP, WS or IPC to a geth node configured with the above flags and you\u2019ll need to speak JSON-RPC on all transports. You can reuse the same connection for multiple requests! Here you can check the available JSON-RPC calls . Attention Please understand the security implications of opening up an HTTP/WS based transport before doing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs! Further, all browser tabs can access locally running web servers, so malicious web pages could try to subvert locally available APIs!","title":"Using JSON-RPC APIs"},{"location":"JSON-RPC-API/#using-json-rpc-apis","text":"","title":"Using JSON-RPC APIs"},{"location":"JSON-RPC-API/#programmatically-interfacing-geth-nodes","text":"As a developer, sooner rather than later you\u2019ll want to start interacting with geth and the Ethereum Classic network via your own programs and not manually through the console. To aid this, geth has built-in support for a JSON-RPC based APIs ( standard APIs and geth specific APIs ). These can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based platforms, and named pipes on Windows). The IPC interface is enabled by default and exposes all the APIs supported by geth , whereas the HTTP and WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons. These can be turned on/off and configured as you\u2019d expect. HTTP based JSON-RPC API options: --http Enable the HTTP-RPC server --http.addr HTTP-RPC server listening interface (default: localhost ) --http.port HTTP-RPC server listening port (default: 8545 ) --http.api API\u2019s offered over the HTTP-RPC interface (default: eth,net,web3 ) --http.corsdomain Comma separated list of domains from which to accept cross origin requests (browser enforced) --ws Enable the WS-RPC server --ws.addr WS-RPC server listening interface (default: localhost ) --ws.port WS-RPC server listening port (default: 8546 ) --ws.api API\u2019s offered over the WS-RPC interface (default: eth,net,web3 ) --ws.origins Origins from which to accept websockets requests --graphql Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well. --graphql.corsdomain Comma separated list of domains from which to accept cross origin requests (browser enforced) --graphql.vhosts Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts \u2018*\u2019 wildcard. (default: \u201clocalhost\u201d) --ipcdisable Disable the IPC-RPC server --ipcapi API\u2019s offered over the IPC-RPC interface (default: admin,debug,eth,miner,net,personal,shh,txpool,web3 ) --ipcpath Filename for IPC socket/pipe within the datadir (explicit paths escape it) You\u2019ll need to use your own programming environments\u2019 capabilities (libraries, tools, etc) to connect via HTTP, WS or IPC to a geth node configured with the above flags and you\u2019ll need to speak JSON-RPC on all transports. You can reuse the same connection for multiple requests! Here you can check the available JSON-RPC calls . Attention Please understand the security implications of opening up an HTTP/WS based transport before doing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs! Further, all browser tabs can access locally running web servers, so malicious web pages could try to subvert locally available APIs!","title":"Programmatically interfacing geth nodes"},{"location":"JSON-RPC-API/openrpc/","text":"OpenRPC \u00b6 TLDR The rpc.discover method returns an API service description structured per the OpenRPC specification . Discovery \u00b6 CoreGeth supports OpenRPC\u2019s Service Discovery method , enabling efficient and well-spec\u2019d JSON RPC interfacing and tooling. This method follows the established JSON RPC patterns, and is accessible via HTTP, WebSocket, IPC, and console servers. To use this method: Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 $ curl -X POST -H 'Content-Type: application/json' --data '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_discover\",\"params\":[],\"id\":1}' { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : { \"openrpc\" : \"1.0.10\" , \"info\" : { \"description\" : \"This API lets you interact with an EVM-based client via JSON-RPC\" , \"license\" : { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" } , \"title\" : \"Ethereum JSON-RPC\" , \"version\" : \"1.0.0\" } , \"servers\" : [] , \"methods\" : [ { \"description\" : \"Returns the version of the current client\" , \"name\" : \"web3_clientVersion\" , \"params\" : [] , \"result\" : { \"description\" : \"client version\" , \"name\" : \"clientVersion\" , \"schema\" : { \"type\" : \"string\" } } , \"summary\" : \"current client version\" } , [ ... ] Better representation of the discovery result at the OpenRPC playground You can see an example use case of the discovery service in the respective OpenRPC Playground .","title":"OpenRPC Discovery"},{"location":"JSON-RPC-API/openrpc/#openrpc","text":"TLDR The rpc.discover method returns an API service description structured per the OpenRPC specification .","title":"OpenRPC"},{"location":"JSON-RPC-API/openrpc/#discovery","text":"CoreGeth supports OpenRPC\u2019s Service Discovery method , enabling efficient and well-spec\u2019d JSON RPC interfacing and tooling. This method follows the established JSON RPC patterns, and is accessible via HTTP, WebSocket, IPC, and console servers. To use this method: Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 $ curl -X POST -H 'Content-Type: application/json' --data '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_discover\",\"params\":[],\"id\":1}' { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : { \"openrpc\" : \"1.0.10\" , \"info\" : { \"description\" : \"This API lets you interact with an EVM-based client via JSON-RPC\" , \"license\" : { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" } , \"title\" : \"Ethereum JSON-RPC\" , \"version\" : \"1.0.0\" } , \"servers\" : [] , \"methods\" : [ { \"description\" : \"Returns the version of the current client\" , \"name\" : \"web3_clientVersion\" , \"params\" : [] , \"result\" : { \"description\" : \"client version\" , \"name\" : \"clientVersion\" , \"schema\" : { \"type\" : \"string\" } } , \"summary\" : \"current client version\" } , [ ... ] Better representation of the discovery result at the OpenRPC playground You can see an example use case of the discovery service in the respective OpenRPC Playground .","title":"Discovery"},{"location":"JSON-RPC-API/trace-module-overview/","text":"\u201ctrace\u201d Module Overview \u00b6 The trace module is for getting a deeper insight into transaction processing. It includes two sets of calls; the transaction trace filtering API and the ad-hoc tracing API. You can find the documentation for the supported methods here . It\u2019s good to mention that trace_* methods are nothing more than aliases to some existing debug_* methods. The reason for creating those aliases, was to reach compatibility with OpenEthereum\u2019s (aka Parity) trace module, which has been requested by the community in order they can fully use core-geth. For achieving this, the trace_* methods set the default tracer to callTracerParity if none is set. Full sync In order to use the Transaction-Trace Filtering API, core-geth must be fully synced using --syncmode=full --gcmode=archive . Otherwise, you can set the number of blocks to reexec back for rebuilding the state, though taking longer for a trace call to finish. JSON-RPC methods \u00b6 Ad-hoc Tracing \u00b6 The ad-hoc tracing API allows you to perform a number of different diagnostics on calls or transactions, either historical ones from the chain or hypothetical ones not yet mined. trace_call (alias to debug_traceCall) trace_callMany trace_rawTransaction trace_replayBlockTransactions trace_replayTransaction Transaction-Trace Filtering \u00b6 These APIs allow you to get a full externality trace on any transaction executed throughout the blockchain. trace_block (alias to debug_traceBlock) trace_transaction (alias to debug_traceTransaction) trace_filter (doesn\u2019t support address filtering yet) trace_get Available tracers \u00b6 callTracerParity Transaction trace returning a response equivalent to OpenEthereum\u2019s (aka Parity) response schema. For documentation on this response value see here . vmTrace Virtual Machine execution trace. Provides a full trace of the VM\u2019s state throughout the execution of the transaction, including for any subcalls. (Not implemented yet) stateDiffTracer State difference. Provides information detailing all altered portions of the Ethereum state made due to the execution of the transaction. For documentation on this response value see here . Example trace_* API method config (last method argument) 1 2 3 4 5 6 { \"tracer\" : \"stateDiffTracer\" , \"timeout: \" 10 s \", \" reexec : \"10000\" , // number of block to reexec back for calculating state \"nestedTraceOutput\" : true // in Ad-hoc Tracing methods the response is nested similar to OpenEthereum's output } Tracers\u2019 output documentation \u00b6 callTracerParity \u00b6 The output result is an array including the outer transaction (first object in the array), as well the internal transactions (next objects in the array) that were being triggered. Each object that represents an internal transaction consists of: the action object with all the call args, the resutls object with the outcome as well the gas used, the subtraces field, representing the number of internal transactions that were being triggered by the current transaction, the traceAddress field, representing the exact nesting location in the call trace [index in root, index in first CALL, index in second CALL, \u2026] . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 [ { \"action\" : { \"callType\" : \"call\" , \"from\" : \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" , \"gas\" : \"0x1e30e8\" , \"input\" : \"0xb595b8b50000000000000000000000000000000000000000000000000000000000000000\" , \"to\" : \"0x5e0fddd49e4bfd02d03f2cefa0ea3a3740d1bb3d\" , \"value\" : \"0xde0b6b3a7640000\" }, \"result\" : { \"gasUsed\" : \"0x25e9\" , \"output\" : \"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000031436173696e6f2068617320696e73756666696369656e742066756e647320666f7220746869732062657420616d6f756e74000000000000000000000000000000\" }, \"subtraces\" : 1 , \"traceAddress\" : [], \"type\" : \"call\" }, { \"action\" : { \"callType\" : \"call\" , \"from\" : \"0x5e0fddd49e4bfd02d03f2cefa0ea3a3740d1bb3d\" , \"gas\" : \"0x8fc\" , \"input\" : \"0x\" , \"to\" : \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" , \"value\" : \"0xde0b6b3a7640000\" }, \"result\" : { \"gasUsed\" : \"0x0\" , \"output\" : \"0x\" }, \"subtraces\" : 0 , \"traceAddress\" : [ 0 ], \"type\" : \"call\" } ] stateDiffTracer \u00b6 Provides information detailing all altered portions of the Ethereum state made due to the execution of the transaction. Each address object provides the state differences for balance , nonce , code and storage . Actually, under the storage object, we can find the state differences for each contract\u2019s storage key. Special symbols explanation: + , when we have a new entry in the state DB, - , when we have a removal from the state DB, * , when existing data have changed in the state DB, providing the from (old) and the to (new) values, = , when the data remained the same. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" : { \"balance\" : { \"*\" : { \"from\" : \"0xd062abd70db4255a296\" , \"to\" : \"0xd062ac59cb1bd516296\" } }, \"nonce\" : { \"*\" : { \"from\" : \"0x1c7ff\" , \"to\" : \"0x1c800\" } }, \"code\" : \"=\" , \"storage\" : { \"0x0000000000000000000000000000000000000000000000000000000000000001\" : { \"*\" : { \"from\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"to\" : \"0x0000000000000000000000000000000000000000000000000000000000000061\" } }, } }, ... } \u201cstateDiff\u201d tracer differences with OpenEthereum \u00b6 SSTORE in some edge cases persists data in state but are not being returned on stateDiff storage results on OpenEthereum output. Happens only on 2 transactions on Mordor testnet, as of block 2,519,999 . (TX hashes: 0xab73afe7b92ad9b537df3f168de0d06f275ed34edf9e19b36362ac6fa304c0bf , 0x15a7c727a9bbfdd43d09805288668cc4a0ec647772d717957e882a71ace80b1a ) When error ErrInsufficientFundsForTransfer happens, OpenEthereum leaves the tracer run producing negative balances, though using safe math for overflows it returns 0 balance , on the other hand the to account receives the full amount . Core-geth removes only the gas cost from the sender and adds it to the coinbase balance . Same as in 2, but on top of that, the sender account doesn\u2019t have to pay for the gas cost even. In this case, core-geth returns an empty JSON , as in reality this transaction will remain in the tx_pool and never be executed, neither change the state. On OpenEthereum the block gasLimit is set to be U256::max() , which leads into problems on contracts using it for pseudo-randomness. On core-geth , we believe that the user utilising the trace_ wants to see what will happen in reality , though we leave the block untouched to its true values *. When an internal call fails with out of gas, and its state is not being persisted, we don\u2019t add it in stateDiff output, as it happens on OpenEthereum.","title":"\"trace\" Module Overview"},{"location":"JSON-RPC-API/trace-module-overview/#trace-module-overview","text":"The trace module is for getting a deeper insight into transaction processing. It includes two sets of calls; the transaction trace filtering API and the ad-hoc tracing API. You can find the documentation for the supported methods here . It\u2019s good to mention that trace_* methods are nothing more than aliases to some existing debug_* methods. The reason for creating those aliases, was to reach compatibility with OpenEthereum\u2019s (aka Parity) trace module, which has been requested by the community in order they can fully use core-geth. For achieving this, the trace_* methods set the default tracer to callTracerParity if none is set. Full sync In order to use the Transaction-Trace Filtering API, core-geth must be fully synced using --syncmode=full --gcmode=archive . Otherwise, you can set the number of blocks to reexec back for rebuilding the state, though taking longer for a trace call to finish.","title":"&ldquo;trace&rdquo; Module Overview"},{"location":"JSON-RPC-API/trace-module-overview/#json-rpc-methods","text":"","title":"JSON-RPC methods"},{"location":"JSON-RPC-API/trace-module-overview/#ad-hoc-tracing","text":"The ad-hoc tracing API allows you to perform a number of different diagnostics on calls or transactions, either historical ones from the chain or hypothetical ones not yet mined. trace_call (alias to debug_traceCall) trace_callMany trace_rawTransaction trace_replayBlockTransactions trace_replayTransaction","title":"Ad-hoc Tracing"},{"location":"JSON-RPC-API/trace-module-overview/#transaction-trace-filtering","text":"These APIs allow you to get a full externality trace on any transaction executed throughout the blockchain. trace_block (alias to debug_traceBlock) trace_transaction (alias to debug_traceTransaction) trace_filter (doesn\u2019t support address filtering yet) trace_get","title":"Transaction-Trace Filtering"},{"location":"JSON-RPC-API/trace-module-overview/#available-tracers","text":"callTracerParity Transaction trace returning a response equivalent to OpenEthereum\u2019s (aka Parity) response schema. For documentation on this response value see here . vmTrace Virtual Machine execution trace. Provides a full trace of the VM\u2019s state throughout the execution of the transaction, including for any subcalls. (Not implemented yet) stateDiffTracer State difference. Provides information detailing all altered portions of the Ethereum state made due to the execution of the transaction. For documentation on this response value see here . Example trace_* API method config (last method argument) 1 2 3 4 5 6 { \"tracer\" : \"stateDiffTracer\" , \"timeout: \" 10 s \", \" reexec : \"10000\" , // number of block to reexec back for calculating state \"nestedTraceOutput\" : true // in Ad-hoc Tracing methods the response is nested similar to OpenEthereum's output }","title":"Available tracers"},{"location":"JSON-RPC-API/trace-module-overview/#tracers-output-documentation","text":"","title":"Tracers&rsquo; output documentation"},{"location":"JSON-RPC-API/trace-module-overview/#calltracerparity","text":"The output result is an array including the outer transaction (first object in the array), as well the internal transactions (next objects in the array) that were being triggered. Each object that represents an internal transaction consists of: the action object with all the call args, the resutls object with the outcome as well the gas used, the subtraces field, representing the number of internal transactions that were being triggered by the current transaction, the traceAddress field, representing the exact nesting location in the call trace [index in root, index in first CALL, index in second CALL, \u2026] . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 [ { \"action\" : { \"callType\" : \"call\" , \"from\" : \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" , \"gas\" : \"0x1e30e8\" , \"input\" : \"0xb595b8b50000000000000000000000000000000000000000000000000000000000000000\" , \"to\" : \"0x5e0fddd49e4bfd02d03f2cefa0ea3a3740d1bb3d\" , \"value\" : \"0xde0b6b3a7640000\" }, \"result\" : { \"gasUsed\" : \"0x25e9\" , \"output\" : \"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000031436173696e6f2068617320696e73756666696369656e742066756e647320666f7220746869732062657420616d6f756e74000000000000000000000000000000\" }, \"subtraces\" : 1 , \"traceAddress\" : [], \"type\" : \"call\" }, { \"action\" : { \"callType\" : \"call\" , \"from\" : \"0x5e0fddd49e4bfd02d03f2cefa0ea3a3740d1bb3d\" , \"gas\" : \"0x8fc\" , \"input\" : \"0x\" , \"to\" : \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" , \"value\" : \"0xde0b6b3a7640000\" }, \"result\" : { \"gasUsed\" : \"0x0\" , \"output\" : \"0x\" }, \"subtraces\" : 0 , \"traceAddress\" : [ 0 ], \"type\" : \"call\" } ]","title":"callTracerParity"},{"location":"JSON-RPC-API/trace-module-overview/#statedifftracer","text":"Provides information detailing all altered portions of the Ethereum state made due to the execution of the transaction. Each address object provides the state differences for balance , nonce , code and storage . Actually, under the storage object, we can find the state differences for each contract\u2019s storage key. Special symbols explanation: + , when we have a new entry in the state DB, - , when we have a removal from the state DB, * , when existing data have changed in the state DB, providing the from (old) and the to (new) values, = , when the data remained the same. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"0x877bd459c9b7d8576b44e59e09d076c25946f443\" : { \"balance\" : { \"*\" : { \"from\" : \"0xd062abd70db4255a296\" , \"to\" : \"0xd062ac59cb1bd516296\" } }, \"nonce\" : { \"*\" : { \"from\" : \"0x1c7ff\" , \"to\" : \"0x1c800\" } }, \"code\" : \"=\" , \"storage\" : { \"0x0000000000000000000000000000000000000000000000000000000000000001\" : { \"*\" : { \"from\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"to\" : \"0x0000000000000000000000000000000000000000000000000000000000000061\" } }, } }, ... }","title":"stateDiffTracer"},{"location":"JSON-RPC-API/trace-module-overview/#statediff-tracer-differences-with-openethereum","text":"SSTORE in some edge cases persists data in state but are not being returned on stateDiff storage results on OpenEthereum output. Happens only on 2 transactions on Mordor testnet, as of block 2,519,999 . (TX hashes: 0xab73afe7b92ad9b537df3f168de0d06f275ed34edf9e19b36362ac6fa304c0bf , 0x15a7c727a9bbfdd43d09805288668cc4a0ec647772d717957e882a71ace80b1a ) When error ErrInsufficientFundsForTransfer happens, OpenEthereum leaves the tracer run producing negative balances, though using safe math for overflows it returns 0 balance , on the other hand the to account receives the full amount . Core-geth removes only the gas cost from the sender and adds it to the coinbase balance . Same as in 2, but on top of that, the sender account doesn\u2019t have to pay for the gas cost even. In this case, core-geth returns an empty JSON , as in reality this transaction will remain in the tx_pool and never be executed, neither change the state. On OpenEthereum the block gasLimit is set to be U256::max() , which leads into problems on contracts using it for pseudo-randomness. On core-geth , we believe that the user utilising the trace_ wants to see what will happen in reality , though we leave the block untouched to its true values *. When an internal call fails with out of gas, and its state is not being persisted, we don\u2019t add it in stateDiff output, as it happens on OpenEthereum.","title":"&ldquo;stateDiff&rdquo; tracer differences with OpenEthereum"},{"location":"JSON-RPC-API/modules/admin/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 admin_addPeer \u00b6 AddPeer requests connecting to a remote node, and also maintaining the new connection at all times, even reconnecting if it is lost. Params (1) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_addPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_addPeer\", \"params\": [<url>]}' Javascript Console 1 admin . addPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( api * adminAPI ) AddPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . AddPeer ( node ) return true , nil } // AddPeer requests connecting to a remote node, and also maintaining the new // connection at all times, even reconnecting if it is lost. View on GitHub \u2192 admin_addTrustedPeer \u00b6 AddTrustedPeer allows a remote node to always connect, even if slots are full Params (1) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_addTrustedPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_addTrustedPeer\", \"params\": [<url>]}' Javascript Console 1 admin . addTrustedPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * adminAPI ) AddTrustedPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . AddTrustedPeer ( node ) return true , nil } // AddTrustedPeer allows a remote node to always connect, even if slots are full View on GitHub \u2192 admin_datadir \u00b6 Datadir retrieves the current data directory the node is using. Params (0) \u00b6 None Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_datadir\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_datadir\", \"params\": []}' Javascript Console 1 admin . datadir (); Source code 1 2 3 func ( api * adminAPI ) Datadir () string { return api . node . DataDir () } // Datadir retrieves the current data directory the node is using. View on GitHub \u2192 admin_ecbp1100 \u00b6 Params (1) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_ecbp1100\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_ecbp1100\", \"params\": [<blockNr>]}' Javascript Console 1 admin . ecbp1100 ( blockNr ); Source code 1 2 3 4 5 func ( api * AdminAPI ) Ecbp1100 ( blockNr rpc . BlockNumber ) ( bool , error ) { i := uint64 ( blockNr . Int64 ()) err := api . eth . blockchain . Config (). SetECBP1100Transition ( & i ) return api . eth . blockchain . IsArtificialFinalityEnabled () && api . eth . blockchain . Config (). IsEnabled ( api . eth . blockchain . Config (). GetECBP1100Transition , api . eth . blockchain . CurrentBlock (). Number ), err } View on GitHub \u2192 admin_exportChain \u00b6 ExportChain exports the current blockchain into a local file, or a range of blocks if first and last are non-nil. Params (3) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: first *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: last *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_exportChain\", \"params\": [<file>, <first>, <last>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_exportChain\", \"params\": [<file>, <first>, <last>]}' Javascript Console 1 admin . exportChain ( file , first , last ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func ( api * AdminAPI ) ExportChain ( file string , first * uint64 , last * uint64 ) ( bool , error ) { if first == nil && last != nil { return false , errors . New ( \"last cannot be specified without first\" ) } if first != nil && last == nil { head := api . eth . BlockChain (). CurrentHeader (). Number . Uint64 () last = & head } if _ , err := os . Stat ( file ); err == nil { return false , errors . New ( \"location would overwrite an existing file\" ) } out , err := os . OpenFile ( file , os . O_CREATE | os . O_WRONLY | os . O_TRUNC , 0644 ) if err != nil { return false , err } defer out . Close () var writer io . Writer = out if strings . HasSuffix ( file , \".gz\" ) { writer = gzip . NewWriter ( writer ) defer writer .( * gzip . Writer ). Close () } if first != nil { if err := api . eth . BlockChain (). ExportN ( writer , * first , * last ); err != nil { return false , err } } else if err := api . eth . BlockChain (). Export ( writer ); err != nil { return false , err } return true , nil } // ExportChain exports the current blockchain into a local file, // or a range of blocks if first and last are non-nil. View on GitHub \u2192 admin_importChain \u00b6 ImportChain imports a blockchain from a local file. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_importChain\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_importChain\", \"params\": [<file>]}' Javascript Console 1 admin . importChain ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 func ( api * AdminAPI ) ImportChain ( file string ) ( bool , error ) { in , err := os . Open ( file ) if err != nil { return false , err } defer in . Close () var reader io . Reader = in if strings . HasSuffix ( file , \".gz\" ) { if reader , err = gzip . NewReader ( reader ); err != nil { return false , err } } stream := rlp . NewStream ( reader , 0 ) blocks , index := make ([ // ImportChain imports a blockchain from a local file. ] * types . Block , 0 , 2500 ), 0 for batch := 0 ; ; batch ++ { for len ( blocks ) < cap ( blocks ) { block := new ( types . Block ) if err := stream . Decode ( block ); err == io . EOF { break } else if err != nil { return false , fmt . Errorf ( \"block %d: failed to parse: %v\" , index , err ) } blocks = append ( blocks , block ) index ++ } if len ( blocks ) == 0 { break } if hasAllBlocks ( api . eth . BlockChain (), blocks ) { blocks = blocks [: 0 ] continue } if _ , err := api . eth . BlockChain (). InsertChain ( blocks ); err != nil { return false , fmt . Errorf ( \"batch %d: failed to insert: %v\" , batch , err ) } blocks = blocks [: 0 ] } return true , nil } View on GitHub \u2192 admin_maxPeers \u00b6 MaxPeers sets the maximum peer limit for the protocol manager and the p2p server. Params (1) \u00b6 Parameters must be given by position . 1: n int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_maxPeers\", \"params\": [<n>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_maxPeers\", \"params\": [<n>]}' Javascript Console 1 admin . maxPeers ( n ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * AdminAPI ) MaxPeers ( n int ) ( bool , error ) { api . eth . handler . maxPeers = n api . eth . p2pServer . MaxPeers = n for i := api . eth . handler . peers . len (); i > n ; i = api . eth . handler . peers . len () { p := api . eth . handler . peers . WorstPeer () if p == nil { break } api . eth . handler . removePeer ( p . ID ()) } return true , nil } // MaxPeers sets the maximum peer limit for the protocol manager and the p2p server. View on GitHub \u2192 admin_nodeInfo \u00b6 NodeInfo retrieves all the information we know about the host node at the protocol granularity. Params (0) \u00b6 None Result \u00b6 *p2p.NodeInfo Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 - additionalProperties: `false` - properties: - enode: - type: `string` - enr: - type: `string` - id: - type: `string` - ip: - type: `string` - listenAddr: - type: `string` - name: - type: `string` - ports: - additionalProperties: `false` - properties: - discovery: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - listener: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - protocols: - additionalProperties: `false` - properties: - discovery: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - listener: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 { \"additionalProperties\": false, \"properties\": { \"enode\": { \"type\": \"string\" }, \"enr\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"ip\": { \"type\": \"string\" }, \"listenAddr\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"ports\": { \"additionalProperties\": false, \"properties\": { \"discovery\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"listener\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"protocols\": { \"additionalProperties\": false, \"properties\": { \"discovery\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"listener\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_nodeInfo\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_nodeInfo\", \"params\": []}' Javascript Console 1 admin . nodeInfo (); Source code 1 2 3 4 5 6 7 8 func ( api * adminAPI ) NodeInfo () ( * p2p . NodeInfo , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } return server . NodeInfo (), nil } // NodeInfo retrieves all the information we know about the host node at the // protocol granularity. View on GitHub \u2192 admin_peerEvents \u00b6 PeerEvents creates an RPC subscription which receives peer events from the node\u2019s p2p.Server Params (0) \u00b6 None Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_subscribe\", \"params\": [\"peerEvents\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func ( api * adminAPI ) PeerEvents ( ctx context . Context ) ( * rpc . Subscription , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return nil , rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { events := make ( chan * p2p . PeerEvent ) sub := server . SubscribeEvents ( events ) defer sub . Unsubscribe () for { select { case event := <- events : notifier . Notify ( rpcSub . ID , event ) case <- sub . Err (): return case <- rpcSub . Err (): return case <- notifier . Closed (): return } } }() return rpcSub , nil } // PeerEvents creates an RPC subscription which receives peer events from the // node's p2p.Server View on GitHub \u2192 admin_peers \u00b6 Peers retrieves all the information we know about each individual peer at the protocol granularity. Params (0) \u00b6 None Result \u00b6 p2pPeerInfo []*p2p.PeerInfo Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 - items: - additionalProperties: `false` - properties: - caps: - items: - type: `string` - type: `array` - enode: - type: `string` - enr: - type: `string` - id: - type: `string` - name: - type: `string` - network: - additionalProperties: `false` - properties: - inbound: - type: `boolean` - localAddress: - type: `string` - remoteAddress: - type: `string` - static: - type: `boolean` - trusted: - type: `boolean` - type: `object` - protocols: - additionalProperties: `false` - properties: - inbound: - type: `boolean` - localAddress: - type: `string` - remoteAddress: - type: `string` - static: - type: `boolean` - trusted: - type: `boolean` - type: `object` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"caps\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"enode\": { \"type\": \"string\" }, \"enr\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"network\": { \"additionalProperties\": false, \"properties\": { \"inbound\": { \"type\": \"boolean\" }, \"localAddress\": { \"type\": \"string\" }, \"remoteAddress\": { \"type\": \"string\" }, \"static\": { \"type\": \"boolean\" }, \"trusted\": { \"type\": \"boolean\" } }, \"type\": \"object\" }, \"protocols\": { \"additionalProperties\": false, \"properties\": { \"inbound\": { \"type\": \"boolean\" }, \"localAddress\": { \"type\": \"string\" }, \"remoteAddress\": { \"type\": \"string\" }, \"static\": { \"type\": \"boolean\" }, \"trusted\": { \"type\": \"boolean\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_peers\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_peers\", \"params\": []}' Javascript Console 1 admin . peers (); Source code 1 2 3 4 5 6 7 8 9 func ( api * adminAPI ) Peers () ([ // Peers retrieves all the information we know about each individual peer at the // protocol granularity. ] * p2p . PeerInfo , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } return server . PeersInfo (), nil } View on GitHub \u2192 admin_removePeer \u00b6 RemovePeer disconnects from a remote node if the connection exists Params (1) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_removePeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_removePeer\", \"params\": [<url>]}' Javascript Console 1 admin . removePeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * adminAPI ) RemovePeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . RemovePeer ( node ) return true , nil } // RemovePeer disconnects from a remote node if the connection exists View on GitHub \u2192 admin_removeTrustedPeer \u00b6 RemoveTrustedPeer removes a remote node from the trusted peer set, but it does not disconnect it automatically. Params (1) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_removeTrustedPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_removeTrustedPeer\", \"params\": [<url>]}' Javascript Console 1 admin . removeTrustedPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( api * adminAPI ) RemoveTrustedPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . RemoveTrustedPeer ( node ) return true , nil } // RemoveTrustedPeer removes a remote node from the trusted peer set, but it // does not disconnect it automatically. View on GitHub \u2192 admin_startHTTP \u00b6 StartHTTP starts the HTTP RPC API server. Params (5) \u00b6 Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: cors *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes 5: vhosts *string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startHTTP\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startHTTP\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Javascript Console 1 admin . startHTTP ( host , port , cors , apis , vhosts ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * adminAPI ) StartHTTP ( host * string , port * int , cors * string , apis * string , vhosts * string ) ( bool , error ) { api . node . lock . Lock () defer api . node . lock . Unlock () if host == nil { h := DefaultHTTPHost if api . node . config . HTTPHost != \"\" { h = api . node . config . HTTPHost } host = & h } if port == nil { port = & api . node . config . HTTPPort } config := httpConfig { CorsAllowedOrigins : api . node . config . HTTPCors , Vhosts : api . node . config . HTTPVirtualHosts , Modules : api . node . config . HTTPModules , rpcEndpointConfig : rpcEndpointConfig { batchItemLimit : api . node . config . BatchRequestLimit , batchResponseSizeLimit : api . node . config . BatchResponseMaxSize }} if cors != nil { config . CorsAllowedOrigins = nil for _ , origin := // StartHTTP starts the HTTP RPC API server. range strings . Split ( * cors , \",\" ) { config . CorsAllowedOrigins = append ( config . CorsAllowedOrigins , strings . TrimSpace ( origin )) } } if vhosts != nil { config . Vhosts = nil for _ , vhost := range strings . Split ( * host , \",\" ) { config . Vhosts = append ( config . Vhosts , strings . TrimSpace ( vhost )) } } if apis != nil { config . Modules = nil for _ , m := range strings . Split ( * apis , \",\" ) { config . Modules = append ( config . Modules , strings . TrimSpace ( m )) } } if err := api . node . http . setListenAddr ( * host , * port ); err != nil { return false , err } if err := api . node . http . enableRPC ( api . node . rpcAPIs , config ); err != nil { return false , err } if err := api . node . http . start (); err != nil { return false , err } return true , nil } View on GitHub \u2192 admin_startRPC \u00b6 StartRPC starts the HTTP RPC API server. Deprecated: use StartHTTP instead. Params (5) \u00b6 Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: cors *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes 5: vhosts *string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startRPC\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startRPC\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Javascript Console 1 admin . startRPC ( host , port , cors , apis , vhosts ); Source code 1 2 3 4 5 func ( api * adminAPI ) StartRPC ( host * string , port * int , cors * string , apis * string , vhosts * string ) ( bool , error ) { log . Warn ( \"Deprecation warning\" , \"method\" , \"admin.StartRPC\" , \"use-instead\" , \"admin.StartHTTP\" ) return api . StartHTTP ( host , port , cors , apis , vhosts ) } // StartRPC starts the HTTP RPC API server. // Deprecated: use StartHTTP instead. View on GitHub \u2192 admin_startWS \u00b6 StartWS starts the websocket RPC API server. Params (4) \u00b6 Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: allowedOrigins *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startWS\", \"params\": [<host>, <port>, <allowedOrigins>, <apis>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startWS\", \"params\": [<host>, <port>, <allowedOrigins>, <apis>]}' Javascript Console 1 admin . startWS ( host , port , allowedOrigins , apis ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 func ( api * adminAPI ) StartWS ( host * string , port * int , allowedOrigins * string , apis * string ) ( bool , error ) { api . node . lock . Lock () defer api . node . lock . Unlock () if host == nil { h := DefaultWSHost if api . node . config . WSHost != \"\" { h = api . node . config . WSHost } host = & h } if port == nil { port = & api . node . config . WSPort } config := wsConfig { Modules : api . node . config . WSModules , Origins : api . node . config . WSOrigins , rpcEndpointConfig : rpcEndpointConfig { batchItemLimit : api . node . config . BatchRequestLimit , batchResponseSizeLimit : api . node . config . BatchResponseMaxSize }} if apis != nil { config . Modules = nil for _ , m := // StartWS starts the websocket RPC API server. range strings . Split ( * apis , \",\" ) { config . Modules = append ( config . Modules , strings . TrimSpace ( m )) } } if allowedOrigins != nil { config . Origins = nil for _ , origin := range strings . Split ( * allowedOrigins , \",\" ) { config . Origins = append ( config . Origins , strings . TrimSpace ( origin )) } } server := api . node . wsServerForPort ( * port , false ) if err := server . setListenAddr ( * host , * port ); err != nil { return false , err } openApis , _ := api . node . getAPIs () if err := server . enableWS ( openApis , config ); err != nil { return false , err } if err := server . start (); err != nil { return false , err } api . node . http . log . Info ( \"WebSocket endpoint opened\" , \"url\" , api . node . WSEndpoint ()) return true , nil } View on GitHub \u2192 admin_stopHTTP \u00b6 StopHTTP shuts down the HTTP server. Params (0) \u00b6 None Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopHTTP\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopHTTP\", \"params\": []}' Javascript Console 1 admin . stopHTTP (); Source code 1 2 3 4 func ( api * adminAPI ) StopHTTP () ( bool , error ) { api . node . http . stop () return true , nil } // StopHTTP shuts down the HTTP server. View on GitHub \u2192 admin_stopRPC \u00b6 StopRPC shuts down the HTTP server. Deprecated: use StopHTTP instead. Params (0) \u00b6 None Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopRPC\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopRPC\", \"params\": []}' Javascript Console 1 admin . stopRPC (); Source code 1 2 3 4 5 func ( api * adminAPI ) StopRPC () ( bool , error ) { log . Warn ( \"Deprecation warning\" , \"method\" , \"admin.StopRPC\" , \"use-instead\" , \"admin.StopHTTP\" ) return api . StopHTTP () } // StopRPC shuts down the HTTP server. // Deprecated: use StopHTTP instead. View on GitHub \u2192 admin_stopWS \u00b6 StopWS terminates all WebSocket servers. Params (0) \u00b6 None Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopWS\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopWS\", \"params\": []}' Javascript Console 1 admin . stopWS (); Source code 1 2 3 4 5 func ( api * adminAPI ) StopWS () ( bool , error ) { api . node . http . stopWS () api . node . ws . stop () return true , nil } // StopWS terminates all WebSocket servers. View on GitHub \u2192","title":"Admin"},{"location":"JSON-RPC-API/modules/admin/#admin_addpeer","text":"AddPeer requests connecting to a remote node, and also maintaining the new connection at all times, even reconnecting if it is lost.","title":"admin_addPeer"},{"location":"JSON-RPC-API/modules/admin/#params-1","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_addPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_addPeer\", \"params\": [<url>]}' Javascript Console 1 admin . addPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( api * adminAPI ) AddPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . AddPeer ( node ) return true , nil } // AddPeer requests connecting to a remote node, and also maintaining the new // connection at all times, even reconnecting if it is lost. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_addtrustedpeer","text":"AddTrustedPeer allows a remote node to always connect, even if slots are full","title":"admin_addTrustedPeer"},{"location":"JSON-RPC-API/modules/admin/#params-1_1","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_1","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_addTrustedPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_addTrustedPeer\", \"params\": [<url>]}' Javascript Console 1 admin . addTrustedPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * adminAPI ) AddTrustedPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . AddTrustedPeer ( node ) return true , nil } // AddTrustedPeer allows a remote node to always connect, even if slots are full View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_datadir","text":"Datadir retrieves the current data directory the node is using.","title":"admin_datadir"},{"location":"JSON-RPC-API/modules/admin/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_2","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_datadir\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_datadir\", \"params\": []}' Javascript Console 1 admin . datadir (); Source code 1 2 3 func ( api * adminAPI ) Datadir () string { return api . node . DataDir () } // Datadir retrieves the current data directory the node is using. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_ecbp1100","text":"","title":"admin_ecbp1100"},{"location":"JSON-RPC-API/modules/admin/#params-1_2","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_3","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_ecbp1100\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_ecbp1100\", \"params\": [<blockNr>]}' Javascript Console 1 admin . ecbp1100 ( blockNr ); Source code 1 2 3 4 5 func ( api * AdminAPI ) Ecbp1100 ( blockNr rpc . BlockNumber ) ( bool , error ) { i := uint64 ( blockNr . Int64 ()) err := api . eth . blockchain . Config (). SetECBP1100Transition ( & i ) return api . eth . blockchain . IsArtificialFinalityEnabled () && api . eth . blockchain . Config (). IsEnabled ( api . eth . blockchain . Config (). GetECBP1100Transition , api . eth . blockchain . CurrentBlock (). Number ), err } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_exportchain","text":"ExportChain exports the current blockchain into a local file, or a range of blocks if first and last are non-nil.","title":"admin_exportChain"},{"location":"JSON-RPC-API/modules/admin/#params-3","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: first *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: last *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/admin/#result_4","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_4","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_exportChain\", \"params\": [<file>, <first>, <last>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_exportChain\", \"params\": [<file>, <first>, <last>]}' Javascript Console 1 admin . exportChain ( file , first , last ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func ( api * AdminAPI ) ExportChain ( file string , first * uint64 , last * uint64 ) ( bool , error ) { if first == nil && last != nil { return false , errors . New ( \"last cannot be specified without first\" ) } if first != nil && last == nil { head := api . eth . BlockChain (). CurrentHeader (). Number . Uint64 () last = & head } if _ , err := os . Stat ( file ); err == nil { return false , errors . New ( \"location would overwrite an existing file\" ) } out , err := os . OpenFile ( file , os . O_CREATE | os . O_WRONLY | os . O_TRUNC , 0644 ) if err != nil { return false , err } defer out . Close () var writer io . Writer = out if strings . HasSuffix ( file , \".gz\" ) { writer = gzip . NewWriter ( writer ) defer writer .( * gzip . Writer ). Close () } if first != nil { if err := api . eth . BlockChain (). ExportN ( writer , * first , * last ); err != nil { return false , err } } else if err := api . eth . BlockChain (). Export ( writer ); err != nil { return false , err } return true , nil } // ExportChain exports the current blockchain into a local file, // or a range of blocks if first and last are non-nil. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_importchain","text":"ImportChain imports a blockchain from a local file.","title":"admin_importChain"},{"location":"JSON-RPC-API/modules/admin/#params-1_3","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_5","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_importChain\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_importChain\", \"params\": [<file>]}' Javascript Console 1 admin . importChain ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 func ( api * AdminAPI ) ImportChain ( file string ) ( bool , error ) { in , err := os . Open ( file ) if err != nil { return false , err } defer in . Close () var reader io . Reader = in if strings . HasSuffix ( file , \".gz\" ) { if reader , err = gzip . NewReader ( reader ); err != nil { return false , err } } stream := rlp . NewStream ( reader , 0 ) blocks , index := make ([ // ImportChain imports a blockchain from a local file. ] * types . Block , 0 , 2500 ), 0 for batch := 0 ; ; batch ++ { for len ( blocks ) < cap ( blocks ) { block := new ( types . Block ) if err := stream . Decode ( block ); err == io . EOF { break } else if err != nil { return false , fmt . Errorf ( \"block %d: failed to parse: %v\" , index , err ) } blocks = append ( blocks , block ) index ++ } if len ( blocks ) == 0 { break } if hasAllBlocks ( api . eth . BlockChain (), blocks ) { blocks = blocks [: 0 ] continue } if _ , err := api . eth . BlockChain (). InsertChain ( blocks ); err != nil { return false , fmt . Errorf ( \"batch %d: failed to insert: %v\" , batch , err ) } blocks = blocks [: 0 ] } return true , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_maxpeers","text":"MaxPeers sets the maximum peer limit for the protocol manager and the p2p server.","title":"admin_maxPeers"},{"location":"JSON-RPC-API/modules/admin/#params-1_4","text":"Parameters must be given by position . 1: n int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_6","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_maxPeers\", \"params\": [<n>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_maxPeers\", \"params\": [<n>]}' Javascript Console 1 admin . maxPeers ( n ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * AdminAPI ) MaxPeers ( n int ) ( bool , error ) { api . eth . handler . maxPeers = n api . eth . p2pServer . MaxPeers = n for i := api . eth . handler . peers . len (); i > n ; i = api . eth . handler . peers . len () { p := api . eth . handler . peers . WorstPeer () if p == nil { break } api . eth . handler . removePeer ( p . ID ()) } return true , nil } // MaxPeers sets the maximum peer limit for the protocol manager and the p2p server. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_nodeinfo","text":"NodeInfo retrieves all the information we know about the host node at the protocol granularity.","title":"admin_nodeInfo"},{"location":"JSON-RPC-API/modules/admin/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_7","text":"*p2p.NodeInfo Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 - additionalProperties: `false` - properties: - enode: - type: `string` - enr: - type: `string` - id: - type: `string` - ip: - type: `string` - listenAddr: - type: `string` - name: - type: `string` - ports: - additionalProperties: `false` - properties: - discovery: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - listener: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - protocols: - additionalProperties: `false` - properties: - discovery: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - listener: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 { \"additionalProperties\": false, \"properties\": { \"enode\": { \"type\": \"string\" }, \"enr\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"ip\": { \"type\": \"string\" }, \"listenAddr\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"ports\": { \"additionalProperties\": false, \"properties\": { \"discovery\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"listener\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"protocols\": { \"additionalProperties\": false, \"properties\": { \"discovery\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"listener\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_7","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_nodeInfo\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_nodeInfo\", \"params\": []}' Javascript Console 1 admin . nodeInfo (); Source code 1 2 3 4 5 6 7 8 func ( api * adminAPI ) NodeInfo () ( * p2p . NodeInfo , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } return server . NodeInfo (), nil } // NodeInfo retrieves all the information we know about the host node at the // protocol granularity. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_peerevents","text":"PeerEvents creates an RPC subscription which receives peer events from the node\u2019s p2p.Server","title":"admin_peerEvents"},{"location":"JSON-RPC-API/modules/admin/#params-0_2","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_8","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_8","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_subscribe\", \"params\": [\"peerEvents\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func ( api * adminAPI ) PeerEvents ( ctx context . Context ) ( * rpc . Subscription , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return nil , rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { events := make ( chan * p2p . PeerEvent ) sub := server . SubscribeEvents ( events ) defer sub . Unsubscribe () for { select { case event := <- events : notifier . Notify ( rpcSub . ID , event ) case <- sub . Err (): return case <- rpcSub . Err (): return case <- notifier . Closed (): return } } }() return rpcSub , nil } // PeerEvents creates an RPC subscription which receives peer events from the // node's p2p.Server View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_peers","text":"Peers retrieves all the information we know about each individual peer at the protocol granularity.","title":"admin_peers"},{"location":"JSON-RPC-API/modules/admin/#params-0_3","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_9","text":"p2pPeerInfo []*p2p.PeerInfo Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 - items: - additionalProperties: `false` - properties: - caps: - items: - type: `string` - type: `array` - enode: - type: `string` - enr: - type: `string` - id: - type: `string` - name: - type: `string` - network: - additionalProperties: `false` - properties: - inbound: - type: `boolean` - localAddress: - type: `string` - remoteAddress: - type: `string` - static: - type: `boolean` - trusted: - type: `boolean` - type: `object` - protocols: - additionalProperties: `false` - properties: - inbound: - type: `boolean` - localAddress: - type: `string` - remoteAddress: - type: `string` - static: - type: `boolean` - trusted: - type: `boolean` - type: `object` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"caps\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"enode\": { \"type\": \"string\" }, \"enr\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"network\": { \"additionalProperties\": false, \"properties\": { \"inbound\": { \"type\": \"boolean\" }, \"localAddress\": { \"type\": \"string\" }, \"remoteAddress\": { \"type\": \"string\" }, \"static\": { \"type\": \"boolean\" }, \"trusted\": { \"type\": \"boolean\" } }, \"type\": \"object\" }, \"protocols\": { \"additionalProperties\": false, \"properties\": { \"inbound\": { \"type\": \"boolean\" }, \"localAddress\": { \"type\": \"string\" }, \"remoteAddress\": { \"type\": \"string\" }, \"static\": { \"type\": \"boolean\" }, \"trusted\": { \"type\": \"boolean\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_9","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_peers\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_peers\", \"params\": []}' Javascript Console 1 admin . peers (); Source code 1 2 3 4 5 6 7 8 9 func ( api * adminAPI ) Peers () ([ // Peers retrieves all the information we know about each individual peer at the // protocol granularity. ] * p2p . PeerInfo , error ) { server := api . node . Server () if server == nil { return nil , ErrNodeStopped } return server . PeersInfo (), nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_removepeer","text":"RemovePeer disconnects from a remote node if the connection exists","title":"admin_removePeer"},{"location":"JSON-RPC-API/modules/admin/#params-1_5","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_10","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_10","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_removePeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_removePeer\", \"params\": [<url>]}' Javascript Console 1 admin . removePeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * adminAPI ) RemovePeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . RemovePeer ( node ) return true , nil } // RemovePeer disconnects from a remote node if the connection exists View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_removetrustedpeer","text":"RemoveTrustedPeer removes a remote node from the trusted peer set, but it does not disconnect it automatically.","title":"admin_removeTrustedPeer"},{"location":"JSON-RPC-API/modules/admin/#params-1_6","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/admin/#result_11","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_11","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_removeTrustedPeer\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_removeTrustedPeer\", \"params\": [<url>]}' Javascript Console 1 admin . removeTrustedPeer ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( api * adminAPI ) RemoveTrustedPeer ( url string ) ( bool , error ) { server := api . node . Server () if server == nil { return false , ErrNodeStopped } node , err := enode . Parse ( enode . ValidSchemes , url ) if err != nil { return false , fmt . Errorf ( \"invalid enode: %v\" , err ) } server . RemoveTrustedPeer ( node ) return true , nil } // RemoveTrustedPeer removes a remote node from the trusted peer set, but it // does not disconnect it automatically. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_starthttp","text":"StartHTTP starts the HTTP RPC API server.","title":"admin_startHTTP"},{"location":"JSON-RPC-API/modules/admin/#params-5","text":"Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: cors *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes 5: vhosts *string Required: \u2713 Yes","title":"Params (5)"},{"location":"JSON-RPC-API/modules/admin/#result_12","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_12","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startHTTP\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startHTTP\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Javascript Console 1 admin . startHTTP ( host , port , cors , apis , vhosts ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * adminAPI ) StartHTTP ( host * string , port * int , cors * string , apis * string , vhosts * string ) ( bool , error ) { api . node . lock . Lock () defer api . node . lock . Unlock () if host == nil { h := DefaultHTTPHost if api . node . config . HTTPHost != \"\" { h = api . node . config . HTTPHost } host = & h } if port == nil { port = & api . node . config . HTTPPort } config := httpConfig { CorsAllowedOrigins : api . node . config . HTTPCors , Vhosts : api . node . config . HTTPVirtualHosts , Modules : api . node . config . HTTPModules , rpcEndpointConfig : rpcEndpointConfig { batchItemLimit : api . node . config . BatchRequestLimit , batchResponseSizeLimit : api . node . config . BatchResponseMaxSize }} if cors != nil { config . CorsAllowedOrigins = nil for _ , origin := // StartHTTP starts the HTTP RPC API server. range strings . Split ( * cors , \",\" ) { config . CorsAllowedOrigins = append ( config . CorsAllowedOrigins , strings . TrimSpace ( origin )) } } if vhosts != nil { config . Vhosts = nil for _ , vhost := range strings . Split ( * host , \",\" ) { config . Vhosts = append ( config . Vhosts , strings . TrimSpace ( vhost )) } } if apis != nil { config . Modules = nil for _ , m := range strings . Split ( * apis , \",\" ) { config . Modules = append ( config . Modules , strings . TrimSpace ( m )) } } if err := api . node . http . setListenAddr ( * host , * port ); err != nil { return false , err } if err := api . node . http . enableRPC ( api . node . rpcAPIs , config ); err != nil { return false , err } if err := api . node . http . start (); err != nil { return false , err } return true , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_startrpc","text":"StartRPC starts the HTTP RPC API server. Deprecated: use StartHTTP instead.","title":"admin_startRPC"},{"location":"JSON-RPC-API/modules/admin/#params-5_1","text":"Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: cors *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes 5: vhosts *string Required: \u2713 Yes","title":"Params (5)"},{"location":"JSON-RPC-API/modules/admin/#result_13","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_13","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startRPC\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startRPC\", \"params\": [<host>, <port>, <cors>, <apis>, <vhosts>]}' Javascript Console 1 admin . startRPC ( host , port , cors , apis , vhosts ); Source code 1 2 3 4 5 func ( api * adminAPI ) StartRPC ( host * string , port * int , cors * string , apis * string , vhosts * string ) ( bool , error ) { log . Warn ( \"Deprecation warning\" , \"method\" , \"admin.StartRPC\" , \"use-instead\" , \"admin.StartHTTP\" ) return api . StartHTTP ( host , port , cors , apis , vhosts ) } // StartRPC starts the HTTP RPC API server. // Deprecated: use StartHTTP instead. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_startws","text":"StartWS starts the websocket RPC API server.","title":"admin_startWS"},{"location":"JSON-RPC-API/modules/admin/#params-4","text":"Parameters must be given by position . 1: host *string Required: \u2713 Yes 2: port *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: allowedOrigins *string Required: \u2713 Yes 4: apis *string Required: \u2713 Yes","title":"Params (4)"},{"location":"JSON-RPC-API/modules/admin/#result_14","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_14","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_startWS\", \"params\": [<host>, <port>, <allowedOrigins>, <apis>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_startWS\", \"params\": [<host>, <port>, <allowedOrigins>, <apis>]}' Javascript Console 1 admin . startWS ( host , port , allowedOrigins , apis ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 func ( api * adminAPI ) StartWS ( host * string , port * int , allowedOrigins * string , apis * string ) ( bool , error ) { api . node . lock . Lock () defer api . node . lock . Unlock () if host == nil { h := DefaultWSHost if api . node . config . WSHost != \"\" { h = api . node . config . WSHost } host = & h } if port == nil { port = & api . node . config . WSPort } config := wsConfig { Modules : api . node . config . WSModules , Origins : api . node . config . WSOrigins , rpcEndpointConfig : rpcEndpointConfig { batchItemLimit : api . node . config . BatchRequestLimit , batchResponseSizeLimit : api . node . config . BatchResponseMaxSize }} if apis != nil { config . Modules = nil for _ , m := // StartWS starts the websocket RPC API server. range strings . Split ( * apis , \",\" ) { config . Modules = append ( config . Modules , strings . TrimSpace ( m )) } } if allowedOrigins != nil { config . Origins = nil for _ , origin := range strings . Split ( * allowedOrigins , \",\" ) { config . Origins = append ( config . Origins , strings . TrimSpace ( origin )) } } server := api . node . wsServerForPort ( * port , false ) if err := server . setListenAddr ( * host , * port ); err != nil { return false , err } openApis , _ := api . node . getAPIs () if err := server . enableWS ( openApis , config ); err != nil { return false , err } if err := server . start (); err != nil { return false , err } api . node . http . log . Info ( \"WebSocket endpoint opened\" , \"url\" , api . node . WSEndpoint ()) return true , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_stophttp","text":"StopHTTP shuts down the HTTP server.","title":"admin_stopHTTP"},{"location":"JSON-RPC-API/modules/admin/#params-0_4","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_15","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_15","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopHTTP\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopHTTP\", \"params\": []}' Javascript Console 1 admin . stopHTTP (); Source code 1 2 3 4 func ( api * adminAPI ) StopHTTP () ( bool , error ) { api . node . http . stop () return true , nil } // StopHTTP shuts down the HTTP server. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_stoprpc","text":"StopRPC shuts down the HTTP server. Deprecated: use StopHTTP instead.","title":"admin_stopRPC"},{"location":"JSON-RPC-API/modules/admin/#params-0_5","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_16","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_16","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopRPC\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopRPC\", \"params\": []}' Javascript Console 1 admin . stopRPC (); Source code 1 2 3 4 5 func ( api * adminAPI ) StopRPC () ( bool , error ) { log . Warn ( \"Deprecation warning\" , \"method\" , \"admin.StopRPC\" , \"use-instead\" , \"admin.StopHTTP\" ) return api . StopHTTP () } // StopRPC shuts down the HTTP server. // Deprecated: use StopHTTP instead. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/admin/#admin_stopws","text":"StopWS terminates all WebSocket servers.","title":"admin_stopWS"},{"location":"JSON-RPC-API/modules/admin/#params-0_6","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/admin/#result_17","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/admin/#client-method-invocation-examples_17","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"admin_stopWS\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"admin_stopWS\", \"params\": []}' Javascript Console 1 admin . stopWS (); Source code 1 2 3 4 5 func ( api * adminAPI ) StopWS () ( bool , error ) { api . node . http . stopWS () api . node . ws . stop () return true , nil } // StopWS terminates all WebSocket servers. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 debug_accountRange \u00b6 AccountRange enumerates all accounts in the given block and start point in paging request Params (6) \u00b6 Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 2: start hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 3: maxResults int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 4: nocode bool Required: \u2713 Yes 5: nostorage bool Required: \u2713 Yes 6: incompletes bool Required: \u2713 Yes Result \u00b6 state.IteratorDump Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 - additionalProperties: `false` - properties: - accounts: - patternProperties: - .*: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - codeHash: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - key: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - root: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - storage: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: `object` - next: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - root: - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"key\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"root\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"next\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"root\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_accountRange\", \"params\": [<blockNrOrHash>, <start>, <maxResults>, <nocode>, <nostorage>, <incompletes>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_accountRange\", \"params\": [<blockNrOrHash>, <start>, <maxResults>, <nocode>, <nostorage>, <incompletes>]}' Javascript Console 1 debug . accountRange ( blockNrOrHash , start , maxResults , nocode , nostorage , incompletes ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 func ( api * DebugAPI ) AccountRange ( blockNrOrHash rpc . BlockNumberOrHash , start hexutil . Bytes , maxResults int , nocode , nostorage , incompletes bool ) ( state . IteratorDump , error ) { var stateDb * state . StateDB var err error if number , ok := blockNrOrHash . Number (); ok { if number == rpc . PendingBlockNumber { _ , stateDb = api . eth . miner . Pending () } else { var header * types . Header switch number { case rpc . LatestBlockNumber : header = api . eth . blockchain . CurrentBlock () case rpc . FinalizedBlockNumber : header = api . eth . blockchain . CurrentFinalBlock () case rpc . SafeBlockNumber : header = api . eth . blockchain . CurrentSafeBlock () default : block := api . eth . blockchain . GetBlockByNumber ( uint64 ( number )) if block == nil { return state . IteratorDump {}, fmt . Errorf ( \"block #%d not found\" , number ) } header = block . Header () } if header == nil { return state . IteratorDump {}, fmt . Errorf ( \"block #%d not found\" , number ) } stateDb , err = api . eth . BlockChain (). StateAt ( header . Root ) if err != nil { return state . IteratorDump {}, err } } } else if hash , ok := blockNrOrHash . Hash (); ok { block := api . eth . blockchain . GetBlockByHash ( hash ) if block == nil { return state . IteratorDump {}, fmt . Errorf ( \"block %s not found\" , hash . Hex ()) } stateDb , err = api . eth . BlockChain (). StateAt ( block . Root ()) if err != nil { return state . IteratorDump {}, err } } else { return state . IteratorDump {}, errors . New ( \"either block number or block hash must be specified\" ) } opts := & state . DumpConfig { SkipCode : nocode , SkipStorage : nostorage , OnlyWithAddresses : ! incompletes , Start : start , Max : uint64 ( maxResults )} if maxResults > AccountRangeMaxResults || maxResults <= 0 { opts . Max = AccountRangeMaxResults } return stateDb . IteratorDump ( opts ), nil } // AccountRange enumerates all accounts in the given block and start point in paging request View on GitHub \u2192 debug_backtraceAt \u00b6 BacktraceAt sets the log backtrace location. See package log for details on the pattern syntax. Params (1) \u00b6 Parameters must be given by position . 1: location string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_backtraceAt\", \"params\": [<location>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_backtraceAt\", \"params\": [<location>]}' Javascript Console 1 debug . backtraceAt ( location ); Source code 1 2 3 4 func ( * HandlerT ) BacktraceAt ( location string ) error { return glogger . BacktraceAt ( location ) } // BacktraceAt sets the log backtrace location. See package log for details on // the pattern syntax. View on GitHub \u2192 debug_blockProfile \u00b6 BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually. Params (2) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_blockProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_blockProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . blockProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 func ( * HandlerT ) BlockProfile ( file string , nsec uint ) error { runtime . SetBlockProfileRate ( 1 ) time . Sleep ( time . Duration ( nsec ) * time . Second ) defer runtime . SetBlockProfileRate ( 0 ) return writeProfile ( \"block\" , file ) } // BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to // file. It uses a profile rate of 1 for most accurate information. If a different rate is // desired, set the rate and write the profile manually. View on GitHub \u2192 debug_chaindbCompact \u00b6 ChaindbCompact flattens the entire key-value database into a single level, removing all unused slots and merging all keys. Params (0) \u00b6 None Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_chaindbCompact\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_chaindbCompact\", \"params\": []}' Javascript Console 1 debug . chaindbCompact (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * DebugAPI ) ChaindbCompact () error { for b := byte ( 0 ); b < 255 ; b ++ { log . Info ( \"Compacting chain database\" , \"range\" , fmt . Sprintf ( \"0x%0.2X-0x%0.2X\" , b , b + 1 )) if err := api . b . ChainDb (). Compact ([ // ChaindbCompact flattens the entire key-value database into a single level, // removing all unused slots and merging all keys. ] byte { b }, [] byte { b + 1 }); err != nil { log . Error ( \"Database compaction failed\" , \"err\" , err ) return err } } return nil } View on GitHub \u2192 debug_chaindbProperty \u00b6 ChaindbProperty returns leveldb properties of the key-value database. Params (1) \u00b6 Parameters must be given by position . 1: property string Required: \u2713 Yes Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_chaindbProperty\", \"params\": [<property>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_chaindbProperty\", \"params\": [<property>]}' Javascript Console 1 debug . chaindbProperty ( property ); Source code 1 2 3 4 5 6 7 8 func ( api * DebugAPI ) ChaindbProperty ( property string ) ( string , error ) { if property == \"\" { property = \"leveldb.stats\" } else if ! strings . HasPrefix ( property , \"leveldb.\" ) { property = \"leveldb.\" + property } return api . b . ChainDb (). Stat ( property ) } // ChaindbProperty returns leveldb properties of the key-value database. View on GitHub \u2192 debug_cpuProfile \u00b6 CpuProfile turns on CPU profiling for nsec seconds and writes profile data to file. Params (2) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_cpuProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_cpuProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . cpuProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 9 func ( h * HandlerT ) CpuProfile ( file string , nsec uint ) error { if err := h . StartCPUProfile ( file ); err != nil { return err } time . Sleep ( time . Duration ( nsec ) * time . Second ) h . StopCPUProfile () return nil } // CpuProfile turns on CPU profiling for nsec seconds and writes // profile data to file. View on GitHub \u2192 debug_dbAncient \u00b6 DbAncient retrieves an ancient binary blob from the append-only immutable files. It is a mapping to the AncientReaderOp.Ancient method Params (2) \u00b6 Parameters must be given by position . 1: kind string Required: \u2713 Yes 2: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbAncient\", \"params\": [<kind>, <number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbAncient\", \"params\": [<kind>, <number>]}' Javascript Console 1 debug . dbAncient ( kind , number ); Source code 1 2 3 4 func ( api * DebugAPI ) DbAncient ( kind string , number uint64 ) ( hexutil . Bytes , error ) { return api . b . ChainDb (). Ancient ( kind , number ) } // DbAncient retrieves an ancient binary blob from the append-only immutable files. // It is a mapping to the `AncientReaderOp.Ancient` method View on GitHub \u2192 debug_dbAncients \u00b6 DbAncients returns the ancient item numbers in the ancient store. It is a mapping to the AncientReaderOp.Ancients method Params (0) \u00b6 None Result \u00b6 uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbAncients\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbAncients\", \"params\": []}' Javascript Console 1 debug . dbAncients (); Source code 1 2 3 4 func ( api * DebugAPI ) DbAncients () ( uint64 , error ) { return api . b . ChainDb (). Ancients () } // DbAncients returns the ancient item numbers in the ancient store. // It is a mapping to the `AncientReaderOp.Ancients` method View on GitHub \u2192 debug_dbGet \u00b6 DbGet returns the raw value of a key stored in the database. Params (1) \u00b6 Parameters must be given by position . 1: key string Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbGet\", \"params\": [<key>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbGet\", \"params\": [<key>]}' Javascript Console 1 debug . dbGet ( key ); Source code 1 2 3 4 5 6 7 func ( api * DebugAPI ) DbGet ( key string ) ( hexutil . Bytes , error ) { blob , err := common . ParseHexOrString ( key ) if err != nil { return nil , err } return api . b . ChainDb (). Get ( blob ) } // DbGet returns the raw value of a key stored in the database. View on GitHub \u2192 debug_dumpBlock \u00b6 DumpBlock retrieves the entire state of the database at a given block. Params (1) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 state.Dump Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 - additionalProperties: `false` - properties: - accounts: - patternProperties: - .*: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - codeHash: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - key: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - root: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - storage: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: `object` - root: - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"key\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"root\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"root\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dumpBlock\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dumpBlock\", \"params\": [<blockNr>]}' Javascript Console 1 debug . dumpBlock ( blockNr ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func ( api * DebugAPI ) DumpBlock ( blockNr rpc . BlockNumber ) ( state . Dump , error ) { opts := & state . DumpConfig { OnlyWithAddresses : true , Max : AccountRangeMaxResults } if blockNr == rpc . PendingBlockNumber { _ , stateDb := api . eth . miner . Pending () return stateDb . RawDump ( opts ), nil } var header * types . Header switch blockNr { case rpc . LatestBlockNumber : header = api . eth . blockchain . CurrentBlock () case rpc . FinalizedBlockNumber : header = api . eth . blockchain . CurrentFinalBlock () case rpc . SafeBlockNumber : header = api . eth . blockchain . CurrentSafeBlock () default : block := api . eth . blockchain . GetBlockByNumber ( uint64 ( blockNr )) if block == nil { return state . Dump {}, fmt . Errorf ( \"block #%d not found\" , blockNr ) } header = block . Header () } if header == nil { return state . Dump {}, fmt . Errorf ( \"block #%d not found\" , blockNr ) } stateDb , err := api . eth . BlockChain (). StateAt ( header . Root ) if err != nil { return state . Dump {}, err } return stateDb . RawDump ( opts ), nil } // DumpBlock retrieves the entire state of the database at a given block. View on GitHub \u2192 debug_freeOSMemory \u00b6 FreeOSMemory forces a garbage collection. Params (0) \u00b6 None Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_freeOSMemory\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_freeOSMemory\", \"params\": []}' Javascript Console 1 debug . freeOSMemory (); Source code 1 2 3 func ( * HandlerT ) FreeOSMemory () { debug . FreeOSMemory () } // FreeOSMemory forces a garbage collection. View on GitHub \u2192 debug_gcStats \u00b6 GcStats returns GC statistics. Params (0) \u00b6 None Result \u00b6 *debug.GCStats Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 - additionalProperties: `false` - properties: - LastGC: - format: `date-time` - type: `string` - NumGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Pause: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - PauseEnd: - items: - format: `date-time` - type: `string` - type: `array` - PauseQuantiles: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - PauseTotal: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"additionalProperties\": false, \"properties\": { \"LastGC\": { \"format\": \"date-time\", \"type\": \"string\" }, \"NumGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Pause\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseEnd\": { \"items\": { \"format\": \"date-time\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseQuantiles\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseTotal\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_gcStats\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_gcStats\", \"params\": []}' Javascript Console 1 debug . gcStats (); Source code 1 2 3 4 5 func ( * HandlerT ) GcStats () * debug . GCStats { s := new ( debug . GCStats ) debug . ReadGCStats ( s ) return s } // GcStats returns GC statistics. View on GitHub \u2192 debug_getAccessibleState \u00b6 GetAccessibleState returns the first number where the node has accessible state on disk. Note this being the post-state of that block and the pre-state of the next block. The (from, to) parameters are the sequence of blocks to search, which can go either forwards or backwards Params (2) \u00b6 Parameters must be given by position . 1: from rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: to rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getAccessibleState\", \"params\": [<from>, <to>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getAccessibleState\", \"params\": [<from>, <to>]}' Javascript Console 1 debug . getAccessibleState ( from , to ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 func ( api * DebugAPI ) GetAccessibleState ( from , to rpc . BlockNumber ) ( uint64 , error ) { db := api . eth . ChainDb () var pivot uint64 if p := rawdb . ReadLastPivotNumber ( db ); p != nil { pivot = * p log . Info ( \"Found fast-sync pivot marker\" , \"number\" , pivot ) } var resolveNum = func ( num rpc . BlockNumber ) ( uint64 , error ) { if num . Int64 () < 0 { block := api . eth . blockchain . CurrentBlock () if block == nil { return 0 , errors . New ( \"current block missing\" ) } return block . Number . Uint64 (), nil } return uint64 ( num . Int64 ()), nil } var ( start uint64 end uint64 delta = int64 ( 1 ) lastLog time . Time err error ) if start , err = resolveNum ( from ); err != nil { return 0 , err } if end , err = resolveNum ( to ); err != nil { return 0 , err } if start == end { return 0 , errors . New ( \"from and to needs to be different\" ) } if start > end { delta = - 1 } for i := int64 ( start ); i != int64 ( end ); i += delta { if time . Since ( lastLog ) > 8 * time . Second { log . Info ( \"Finding roots\" , \"from\" , start , \"to\" , end , \"at\" , i ) lastLog = time . Now () } if i < int64 ( pivot ) { continue } h := api . eth . BlockChain (). GetHeaderByNumber ( uint64 ( i )) if h == nil { return 0 , fmt . Errorf ( \"missing header %d\" , i ) } if ok , _ := api . eth . ChainDb (). Has ( h . Root [ // GetAccessibleState returns the first number where the node has accessible // state on disk. Note this being the post-state of that block and the pre-state // of the next block. // The (from, to) parameters are the sequence of blocks to search, which can go // either forwards or backwards :]); ok { return uint64 ( i ), nil } } return 0 , errors . New ( \"no state found\" ) } View on GitHub \u2192 debug_getBadBlocks \u00b6 GetBadBlocks returns a list of the last \u2018bad blocks\u2019 that the client has seen on the network and returns them as a JSON list of block hashes. Params (0) \u00b6 None Result \u00b6 BadBlockArgs []*BadBlockArgs Required: \u2713 Yes Schemaitems: - additionalProperties: `false` - properties: - block: - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - rlp: - type: `string` - type: object - type: array Raw{ \"items\": [ { \"additionalProperties\": false, \"properties\": { \"block\": { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"rlp\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getBadBlocks\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getBadBlocks\", \"params\": []}' Javascript Console 1 debug . getBadBlocks (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( api * DebugAPI ) GetBadBlocks ( ctx context . Context ) ([ // GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network // and returns them as a JSON list of block hashes. ] * BadBlockArgs , error ) { var ( blocks = rawdb . ReadAllBadBlocks ( api . eth . chainDb ) results = make ([] * BadBlockArgs , 0 , len ( blocks )) ) for _ , block := range blocks { var ( blockRlp string blockJSON * ethapi . RPCMarshalBlockT ) if rlpBytes , err := rlp . EncodeToBytes ( block ); err != nil { blockRlp = err . Error () } else { blockRlp = fmt . Sprintf ( \"%#x\" , rlpBytes ) } blockJSON = ethapi . RPCMarshalBlock ( block , true , true , api . eth . APIBackend . ChainConfig ()) results = append ( results , & BadBlockArgs { Hash : block . Hash (), RLP : blockRlp , Block : blockJSON }) } return results , nil } View on GitHub \u2192 debug_getModifiedAccountsByHash \u00b6 GetModifiedAccountsByHash returns all accounts that have changed between the two blocks specified. A change is defined as a difference in nonce, balance, code hash, or storage hash. With one parameter, returns the list of accounts modified in the specified block. Params (2) \u00b6 Parameters must be given by position . 1: startHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: endHash *common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getModifiedAccountsByHash\", \"params\": [<startHash>, <endHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getModifiedAccountsByHash\", \"params\": [<startHash>, <endHash>]}' Javascript Console 1 debug . getModifiedAccountsByHash ( startHash , endHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( api * DebugAPI ) GetModifiedAccountsByHash ( startHash common . Hash , endHash * common . Hash ) ([ // GetModifiedAccountsByHash returns all accounts that have changed between the // two blocks specified. A change is defined as a difference in nonce, balance, // code hash, or storage hash. // // With one parameter, returns the list of accounts modified in the specified block. ] common . Address , error ) { var startBlock , endBlock * types . Block startBlock = api . eth . blockchain . GetBlockByHash ( startHash ) if startBlock == nil { return nil , fmt . Errorf ( \"start block %x not found\" , startHash ) } if endHash == nil { endBlock = startBlock startBlock = api . eth . blockchain . GetBlockByHash ( startBlock . ParentHash ()) if startBlock == nil { return nil , fmt . Errorf ( \"block %x has no parent\" , endBlock . Number ()) } } else { endBlock = api . eth . blockchain . GetBlockByHash ( * endHash ) if endBlock == nil { return nil , fmt . Errorf ( \"end block %x not found\" , * endHash ) } } return api . getModifiedAccounts ( startBlock , endBlock ) } View on GitHub \u2192 debug_getModifiedAccountsByNumber \u00b6 GetModifiedAccountsByNumber returns all accounts that have changed between the two blocks specified. A change is defined as a difference in nonce, balance, code hash, or storage hash. With one parameter, returns the list of accounts modified in the specified block. Params (2) \u00b6 Parameters must be given by position . 1: startNum uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: endNum *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getModifiedAccountsByNumber\", \"params\": [<startNum>, <endNum>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getModifiedAccountsByNumber\", \"params\": [<startNum>, <endNum>]}' Javascript Console 1 debug . getModifiedAccountsByNumber ( startNum , endNum ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( api * DebugAPI ) GetModifiedAccountsByNumber ( startNum uint64 , endNum * uint64 ) ([ // GetModifiedAccountsByNumber returns all accounts that have changed between the // two blocks specified. A change is defined as a difference in nonce, balance, // code hash, or storage hash. // // With one parameter, returns the list of accounts modified in the specified block. ] common . Address , error ) { var startBlock , endBlock * types . Block startBlock = api . eth . blockchain . GetBlockByNumber ( startNum ) if startBlock == nil { return nil , fmt . Errorf ( \"start block %x not found\" , startNum ) } if endNum == nil { endBlock = startBlock startBlock = api . eth . blockchain . GetBlockByHash ( startBlock . ParentHash ()) if startBlock == nil { return nil , fmt . Errorf ( \"block %x has no parent\" , endBlock . Number ()) } } else { endBlock = api . eth . blockchain . GetBlockByNumber ( * endNum ) if endBlock == nil { return nil , fmt . Errorf ( \"end block %d not found\" , * endNum ) } } return api . getModifiedAccounts ( startBlock , endBlock ) } View on GitHub \u2192 debug_getRawBlock \u00b6 GetRawBlock retrieves the RLP encoded for a single block. Params (1) \u00b6 Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawBlock\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawBlock\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawBlock ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( api * DebugAPI ) GetRawBlock ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } block , _ := api . b . BlockByHash ( ctx , hash ) if block == nil { return nil , fmt . Errorf ( \"block #%d not found\" , hash ) } return rlp . EncodeToBytes ( block ) } // GetRawBlock retrieves the RLP encoded for a single block. View on GitHub \u2192 debug_getRawHeader \u00b6 GetRawHeader retrieves the RLP encoding for a single header. Params (1) \u00b6 Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawHeader\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawHeader\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawHeader ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( api * DebugAPI ) GetRawHeader ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } header , _ := api . b . HeaderByHash ( ctx , hash ) if header == nil { return nil , fmt . Errorf ( \"header #%d not found\" , hash ) } return rlp . EncodeToBytes ( header ) } // GetRawHeader retrieves the RLP encoding for a single header. View on GitHub \u2192 debug_getRawReceipts \u00b6 GetRawReceipts retrieves the binary-encoded receipts of a single block. Params (1) \u00b6 Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 hexutilBytes []hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawReceipts\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawReceipts\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawReceipts ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func ( api * DebugAPI ) GetRawReceipts ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ([ // GetRawReceipts retrieves the binary-encoded receipts of a single block. ] hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } receipts , err := api . b . GetReceipts ( ctx , hash ) if err != nil { return nil , err } result := make ([] hexutil . Bytes , len ( receipts )) for i , receipt := range receipts { b , err := receipt . MarshalBinary () if err != nil { return nil , err } result [ i ] = b } return result , nil } View on GitHub \u2192 debug_getRawTransaction \u00b6 GetRawTransaction returns the bytes of the transaction for the given hash. Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawTransaction\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawTransaction\", \"params\": [<hash>]}' Javascript Console 1 debug . getRawTransaction ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * DebugAPI ) GetRawTransaction ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { tx , _ , _ , _ , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { if tx = s . b . GetPoolTransaction ( hash ); tx == nil { return nil , nil } } return tx . MarshalBinary () } // GetRawTransaction returns the bytes of the transaction for the given hash. View on GitHub \u2192 debug_goTrace \u00b6 GoTrace turns on tracing for nsec seconds and writes trace data to file. Params (2) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_goTrace\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_goTrace\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . goTrace ( file , nsec ); Source code 1 2 3 4 5 6 7 8 9 func ( h * HandlerT ) GoTrace ( file string , nsec uint ) error { if err := h . StartGoTrace ( file ); err != nil { return err } time . Sleep ( time . Duration ( nsec ) * time . Second ) h . StopGoTrace () return nil } // GoTrace turns on tracing for nsec seconds and writes // trace data to file. View on GitHub \u2192 debug_intermediateRoots \u00b6 IntermediateRoots executes a block (bad- or canon- or side-), and returns a list of intermediate roots: the stateroot after each transaction. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 commonHash []common.Hash Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_intermediateRoots\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_intermediateRoots\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . intermediateRoots ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 func ( api * API ) IntermediateRoots ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // IntermediateRoots executes a block (bad- or canon- or side-), and returns a list // of intermediate roots: the stateroot after each transaction. ] common . Hash , error ) { block , _ := api . blockByHash ( ctx , hash ) if block == nil { block = rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) } if block == nil { return nil , fmt . Errorf ( \"block %#x not found\" , hash ) } if block . NumberU64 () == 0 { return nil , errors . New ( \"genesis is not traceable\" ) } parent , err := api . blockByNumberAndHash ( ctx , rpc . BlockNumber ( block . NumberU64 () - 1 ), block . ParentHash ()) if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , parent , reexec , nil , true , false ) if err != nil { return nil , err } defer release () var ( roots [] common . Hash signer = types . MakeSigner ( api . backend . ChainConfig (), block . Number (), block . Time ()) chainConfig = api . backend . ChainConfig () vmctx = core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) deleteEmptyObjects = api . backend . ChainConfig (). IsEnabled ( api . backend . ChainConfig (). GetEIP161dTransition , block . Number ()) ) for i , tx := range block . Transactions () { if err := ctx . Err (); err != nil { return nil , err } var ( msg , _ = core . TransactionToMessage ( tx , signer , block . BaseFee ()) txContext = core . NewEVMTxContext ( msg ) vmenv = vm . NewEVM ( vmctx , txContext , statedb , chainConfig , vm . Config {}) ) statedb . SetTxContext ( tx . Hash (), i ) if _ , err := core . ApplyMessage ( vmenv , msg , new ( core . GasPool ). AddGas ( msg . GasLimit )); err != nil { log . Warn ( \"Tracing intermediate roots did not complete\" , \"txindex\" , i , \"txhash\" , tx . Hash (), \"err\" , err ) return roots , nil } roots = append ( roots , statedb . IntermediateRoot ( deleteEmptyObjects )) } return roots , nil } View on GitHub \u2192 debug_memStats \u00b6 MemStats returns detailed runtime memory statistics. Params (0) \u00b6 None Result \u00b6 *runtime.MemStats Required: \u2713 Yes SchemaadditionalProperties: `false` - properties: - Alloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - BuckHashSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - BySize: - items: - additionalProperties: `false` - properties: - Frees: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Mallocs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Size: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - maxItems: `61` - minItems: `61` - type: `array` - DebugGC: - type: `boolean` - EnableGC: - type: `boolean` - Frees: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GCCPUFraction: - type: `number` - GCSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapAlloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapIdle: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapObjects: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapReleased: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - LastGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Lookups: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MCacheInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MCacheSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MSpanInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MSpanSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Mallocs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NextGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NumForcedGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NumGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - OtherSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - PauseEnd: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - PauseNs: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - PauseTotalNs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StackInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StackSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Sys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TotalAlloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw{ \"additionalProperties\": false, \"properties\": { \"Alloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"BuckHashSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"BySize\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"Frees\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Mallocs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Size\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"maxItems\": 61, \"minItems\": 61, \"type\": \"array\" }, \"DebugGC\": { \"type\": \"boolean\" }, \"EnableGC\": { \"type\": \"boolean\" }, \"Frees\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GCCPUFraction\": { \"type\": \"number\" }, \"GCSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapAlloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapIdle\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapObjects\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapReleased\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"LastGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Lookups\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MCacheInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MCacheSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MSpanInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MSpanSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Mallocs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NextGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NumForcedGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NumGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"OtherSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"PauseEnd\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"PauseNs\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"PauseTotalNs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StackInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StackSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Sys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TotalAlloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_memStats\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_memStats\", \"params\": []}' Javascript Console 1 debug . memStats (); Source code 1 2 3 4 5 func ( * HandlerT ) MemStats () * runtime . MemStats { s := new ( runtime . MemStats ) runtime . ReadMemStats ( s ) return s } // MemStats returns detailed runtime memory statistics. View on GitHub \u2192 debug_mutexProfile \u00b6 MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually. Params (2) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_mutexProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_mutexProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . mutexProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 func ( * HandlerT ) MutexProfile ( file string , nsec uint ) error { runtime . SetMutexProfileFraction ( 1 ) time . Sleep ( time . Duration ( nsec ) * time . Second ) defer runtime . SetMutexProfileFraction ( 0 ) return writeProfile ( \"mutex\" , file ) } // MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file. // It uses a profile rate of 1 for most accurate information. If a different rate is // desired, set the rate and write the profile manually. View on GitHub \u2192 debug_preimage \u00b6 Preimage is a debug API function that returns the preimage for a sha3 hash, if known. Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_preimage\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_preimage\", \"params\": [<hash>]}' Javascript Console 1 debug . preimage ( hash ); Source code 1 2 3 4 5 6 func ( api * DebugAPI ) Preimage ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { if preimage := rawdb . ReadPreimage ( api . eth . ChainDb (), hash ); preimage != nil { return preimage , nil } return nil , errors . New ( \"unknown preimage\" ) } // Preimage is a debug API function that returns the preimage for a sha3 hash, if known. View on GitHub \u2192 debug_printBlock \u00b6 PrintBlock retrieves a block and returns its pretty printed form. Params (1) \u00b6 Parameters must be given by position . 1: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_printBlock\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_printBlock\", \"params\": [<number>]}' Javascript Console 1 debug . printBlock ( number ); Source code 1 2 3 4 5 6 7 func ( api * DebugAPI ) PrintBlock ( ctx context . Context , number uint64 ) ( string , error ) { block , _ := api . b . BlockByNumber ( ctx , rpc . BlockNumber ( number )) if block == nil { return \"\" , fmt . Errorf ( \"block #%d not found\" , number ) } return spew . Sdump ( block ), nil } // PrintBlock retrieves a block and returns its pretty printed form. View on GitHub \u2192 debug_seedHash \u00b6 SeedHash retrieves the seed hash of a block. Params (1) \u00b6 Parameters must be given by position . 1: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_seedHash\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_seedHash\", \"params\": [<number>]}' Javascript Console 1 debug . seedHash ( number ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * DebugAPI ) SeedHash ( ctx context . Context , number uint64 ) ( string , error ) { block , _ := api . b . BlockByNumber ( ctx , rpc . BlockNumber ( number )) if block == nil { return \"\" , fmt . Errorf ( \"block #%d not found\" , number ) } ecip1099FBlock := api . b . ChainConfig (). GetEthashECIP1099Transition () epochLength := ethash . CalcEpochLength ( number , ecip1099FBlock ) epoch := ethash . CalcEpoch ( number , epochLength ) return fmt . Sprintf ( \"%#x\" , ethash . SeedHash ( epoch , epochLength )), nil } // SeedHash retrieves the seed hash of a block. View on GitHub \u2192 debug_setBlockProfileRate \u00b6 SetBlockProfileRate sets the rate of goroutine block profile data collection. rate 0 disables block profiling. Params (1) \u00b6 Parameters must be given by position . 1: rate int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setBlockProfileRate\", \"params\": [<rate>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setBlockProfileRate\", \"params\": [<rate>]}' Javascript Console 1 debug . setBlockProfileRate ( rate ); Source code 1 2 3 4 func ( * HandlerT ) SetBlockProfileRate ( rate int ) { runtime . SetBlockProfileRate ( rate ) } // SetBlockProfileRate sets the rate of goroutine block profile data collection. // rate 0 disables block profiling. View on GitHub \u2192 debug_setGCPercent \u00b6 SetGCPercent sets the garbage collection target percentage. It returns the previous setting. A negative value disables GC. Params (1) \u00b6 Parameters must be given by position . 1: v int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setGCPercent\", \"params\": [<v>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setGCPercent\", \"params\": [<v>]}' Javascript Console 1 debug . setGCPercent ( v ); Source code 1 2 3 4 func ( * HandlerT ) SetGCPercent ( v int ) int { return debug . SetGCPercent ( v ) } // SetGCPercent sets the garbage collection target percentage. It returns the previous // setting. A negative value disables GC. View on GitHub \u2192 debug_setHead \u00b6 SetHead rewinds the head of the blockchain to a previous block. Params (1) \u00b6 Parameters must be given by position . 1: number hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setHead\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setHead\", \"params\": [<number>]}' Javascript Console 1 debug . setHead ( number ); Source code 1 2 3 func ( api * DebugAPI ) SetHead ( number hexutil . Uint64 ) { api . b . SetHead ( uint64 ( number )) } // SetHead rewinds the head of the blockchain to a previous block. View on GitHub \u2192 debug_setMutexProfileFraction \u00b6 SetMutexProfileFraction sets the rate of mutex profiling. Params (1) \u00b6 Parameters must be given by position . 1: rate int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setMutexProfileFraction\", \"params\": [<rate>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setMutexProfileFraction\", \"params\": [<rate>]}' Javascript Console 1 debug . setMutexProfileFraction ( rate ); Source code 1 2 3 func ( * HandlerT ) SetMutexProfileFraction ( rate int ) { runtime . SetMutexProfileFraction ( rate ) } // SetMutexProfileFraction sets the rate of mutex profiling. View on GitHub \u2192 debug_stacks \u00b6 Stacks returns a printed representation of the stacks of all goroutines. It also permits the following optional filters to be used: - filter: boolean expression of packages to filter for Params (1) \u00b6 Parameters must be given by position . 1: filter *string Required: \u2713 Yes Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stacks\", \"params\": [<filter>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stacks\", \"params\": [<filter>]}' Javascript Console 1 debug . stacks ( filter ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( * HandlerT ) Stacks ( filter * string ) string { buf := new ( bytes . Buffer ) pprof . Lookup ( \"goroutine\" ). WriteTo ( buf , 2 ) if filter != nil && len ( * filter ) > 0 { expanded := * filter expanded = regexp . MustCompile ( `[:/\\.A-Za-z0-9_-]+` ). ReplaceAllString ( expanded , \"`$0` in Value\" ) expanded = regexp . MustCompile ( \"!(`[:/\\\\.A-Za-z0-9_-]+`)\" ). ReplaceAllString ( expanded , \"$1 not\" ) expanded = strings . ReplaceAll ( expanded , \"||\" , \"or\" ) expanded = strings . ReplaceAll ( expanded , \"&&\" , \"and\" ) log . Info ( \"Expanded filter expression\" , \"filter\" , * filter , \"expanded\" , expanded ) expr , err := bexpr . CreateEvaluator ( expanded ) if err != nil { log . Error ( \"Failed to parse filter expression\" , \"expanded\" , expanded , \"err\" , err ) return \"\" } dump := buf . String () buf . Reset () for _ , trace := // Stacks returns a printed representation of the stacks of all goroutines. It // also permits the following optional filters to be used: // - filter: boolean expression of packages to filter for range strings . Split ( dump , \"\\n\\n\" ) { if ok , _ := expr . Evaluate ( map [ string ] string { \"Value\" : trace }); ok { buf . WriteString ( trace ) buf . WriteString ( \"\\n\\n\" ) } } } return buf . String () } View on GitHub \u2192 debug_standardTraceBadBlockToFile \u00b6 StandardTraceBadBlockToFile dumps the structured logs created during the execution of EVM against a block pulled from the pool of bad ones to the local file system and returns a list of files to the caller. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *StdTraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TxHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TxHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 string []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_standardTraceBadBlockToFile\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_standardTraceBadBlockToFile\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . standardTraceBadBlockToFile ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) StandardTraceBadBlockToFile ( ctx context . Context , hash common . Hash , config * StdTraceConfig ) ([ // StandardTraceBadBlockToFile dumps the structured logs created during the // execution of EVM against a block pulled from the pool of bad ones to the // local file system and returns a list of files to the caller. ] string , error ) { block := rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) if block == nil { return nil , fmt . Errorf ( \"bad block %#x not found\" , hash ) } return api . standardTraceBlockToFile ( ctx , block , config ) } View on GitHub \u2192 debug_standardTraceBlockToFile \u00b6 StandardTraceBlockToFile dumps the structured logs created during the execution of EVM to the local file system and returns a list of files to the caller. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *StdTraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TxHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TxHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 string []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_standardTraceBlockToFile\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_standardTraceBlockToFile\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . standardTraceBlockToFile ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) StandardTraceBlockToFile ( ctx context . Context , hash common . Hash , config * StdTraceConfig ) ([ // StandardTraceBlockToFile dumps the structured logs created during the // execution of EVM to the local file system and returns a list of files // to the caller. ] string , error ) { block , err := api . blockByHash ( ctx , hash ) if err != nil { return nil , err } return api . standardTraceBlockToFile ( ctx , block , config ) } View on GitHub \u2192 debug_startCPUProfile \u00b6 StartCPUProfile turns on CPU profiling, writing to the given file. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_startCPUProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_startCPUProfile\", \"params\": [<file>]}' Javascript Console 1 debug . startCPUProfile ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ( h * HandlerT ) StartCPUProfile ( file string ) error { h . mu . Lock () defer h . mu . Unlock () if h . cpuW != nil { return errors . New ( \"CPU profiling already in progress\" ) } f , err := os . Create ( expandHome ( file )) if err != nil { return err } if err := pprof . StartCPUProfile ( f ); err != nil { f . Close () return err } h . cpuW = f h . cpuFile = file log . Info ( \"CPU profiling started\" , \"dump\" , h . cpuFile ) return nil } // StartCPUProfile turns on CPU profiling, writing to the given file. View on GitHub \u2192 debug_startGoTrace \u00b6 StartGoTrace turns on tracing, writing to the given file. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_startGoTrace\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_startGoTrace\", \"params\": [<file>]}' Javascript Console 1 debug . startGoTrace ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ( h * HandlerT ) StartGoTrace ( file string ) error { h . mu . Lock () defer h . mu . Unlock () if h . traceW != nil { return errors . New ( \"trace already in progress\" ) } f , err := os . Create ( expandHome ( file )) if err != nil { return err } if err := trace . Start ( f ); err != nil { f . Close () return err } h . traceW = f h . traceFile = file log . Info ( \"Go tracing started\" , \"dump\" , h . traceFile ) return nil } // StartGoTrace turns on tracing, writing to the given file. View on GitHub \u2192 debug_stopCPUProfile \u00b6 StopCPUProfile stops an ongoing CPU profile. Params (0) \u00b6 None Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stopCPUProfile\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stopCPUProfile\", \"params\": []}' Javascript Console 1 debug . stopCPUProfile (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( h * HandlerT ) StopCPUProfile () error { h . mu . Lock () defer h . mu . Unlock () pprof . StopCPUProfile () if h . cpuW == nil { return errors . New ( \"CPU profiling not in progress\" ) } log . Info ( \"Done writing CPU profile\" , \"dump\" , h . cpuFile ) h . cpuW . Close () h . cpuW = nil h . cpuFile = \"\" return nil } // StopCPUProfile stops an ongoing CPU profile. View on GitHub \u2192 debug_stopGoTrace \u00b6 StopGoTrace stops an ongoing trace. Params (0) \u00b6 None Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stopGoTrace\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stopGoTrace\", \"params\": []}' Javascript Console 1 debug . stopGoTrace (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( h * HandlerT ) StopGoTrace () error { h . mu . Lock () defer h . mu . Unlock () trace . Stop () if h . traceW == nil { return errors . New ( \"trace not in progress\" ) } log . Info ( \"Done writing Go trace\" , \"dump\" , h . traceFile ) h . traceW . Close () h . traceW = nil h . traceFile = \"\" return nil } // StopGoTrace stops an ongoing trace. View on GitHub \u2192 debug_storageRangeAt \u00b6 StorageRangeAt returns the storage at the given block height and transaction index. Params (5) \u00b6 Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 2: txIndex int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: contractAddress common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 4: keyStart hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 5: maxResult int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 StorageRangeResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 - additionalProperties: `false` - properties: - nextKey: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storage: - patternProperties: - .*: - additionalProperties: `false` - properties: - key: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"additionalProperties\": false, \"properties\": { \"nextKey\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"key\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_storageRangeAt\", \"params\": [<blockNrOrHash>, <txIndex>, <contractAddress>, <keyStart>, <maxResult>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_storageRangeAt\", \"params\": [<blockNrOrHash>, <txIndex>, <contractAddress>, <keyStart>, <maxResult>]}' Javascript Console 1 debug . storageRangeAt ( blockNrOrHash , txIndex , contractAddress , keyStart , maxResult ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( api * DebugAPI ) StorageRangeAt ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash , txIndex int , contractAddress common . Address , keyStart hexutil . Bytes , maxResult int ) ( StorageRangeResult , error ) { var block * types . Block block , err := api . eth . APIBackend . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return StorageRangeResult {}, err } if block == nil { return StorageRangeResult {}, fmt . Errorf ( \"block %v not found\" , blockNrOrHash ) } _ , _ , statedb , release , err := api . eth . stateAtTransaction ( ctx , block , txIndex , 0 ) if err != nil { return StorageRangeResult {}, err } defer release () st , err := statedb . StorageTrie ( contractAddress ) if err != nil { return StorageRangeResult {}, err } if st == nil { return StorageRangeResult {}, fmt . Errorf ( \"account %x doesn't exist\" , contractAddress ) } return storageRangeAt ( st , keyStart , maxResult ) } // StorageRangeAt returns the storage at the given block height and transaction index. View on GitHub \u2192 debug_subscribe \u00b6 Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. Params (2) \u00b6 Parameters must be given by position . 1: subscriptionName RPCDebugSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - oneOf: - description: `Returns transaction traces within a range of blocks.` - enum: traceChain - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"oneOf\": [ { \"description\": \"Returns transaction traces within a range of blocks.\", \"enum\": [ \"traceChain\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No Result \u00b6 subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCDebugSubscription ) Subscribe ( subscriptionName RPCDebugSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192 debug_traceBadBlock \u00b6 TraceBadBlock returns the structured logs created during the execution of EVM against a block pulled from the pool of bad ones and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBadBlock\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBadBlock\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceBadBlock ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) TraceBadBlock ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // TraceBadBlock returns the structured logs created during the execution of // EVM against a block pulled from the pool of bad ones and returns them as a JSON // object. ] * txTraceResult , error ) { block := rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) if block == nil { return nil , fmt . Errorf ( \"bad block %#x not found\" , hash ) } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192 debug_traceBlock \u00b6 TraceBlock returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: blob hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlock\", \"params\": [<blob>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlock\", \"params\": [<blob>, <config>]}' Javascript Console 1 debug . traceBlock ( blob , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlock ( ctx context . Context , blob hexutil . Bytes , config * TraceConfig ) ([ // TraceBlock returns the structured logs created during the execution of EVM // and returns them as a JSON object. ] * txTraceResult , error ) { block := new ( types . Block ) if err := rlp . Decode ( bytes . NewReader ( blob ), block ); err != nil { return nil , fmt . Errorf ( \"could not decode block: %v\" , err ) } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192 debug_traceBlockByHash \u00b6 TraceBlockByHash returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockByHash\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockByHash\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceBlockByHash ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockByHash ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // TraceBlockByHash returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { block , err := api . blockByHash ( ctx , hash ) if err != nil { return nil , err } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192 debug_traceBlockByNumber \u00b6 TraceBlockByNumber returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockByNumber\", \"params\": [<number>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockByNumber\", \"params\": [<number>, <config>]}' Javascript Console 1 debug . traceBlockByNumber ( number , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockByNumber ( ctx context . Context , number rpc . BlockNumber , config * TraceConfig ) ([ // TraceBlockByNumber returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { block , err := api . blockByNumber ( ctx , number ) if err != nil { return nil , err } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192 debug_traceBlockFromFile \u00b6 TraceBlockFromFile returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockFromFile\", \"params\": [<file>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockFromFile\", \"params\": [<file>, <config>]}' Javascript Console 1 debug . traceBlockFromFile ( file , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockFromFile ( ctx context . Context , file string , config * TraceConfig ) ([ // TraceBlockFromFile returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { blob , err := os . ReadFile ( file ) if err != nil { return nil , fmt . Errorf ( \"could not read file: %v\" , err ) } return api . TraceBlock ( ctx , blob , config ) } View on GitHub \u2192 debug_traceCall \u00b6 TraceCall lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. Params (3) \u00b6 Parameters must be given by position . 1: args ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceCall\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceCall\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Javascript Console 1 debug . traceCall ( args , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * API ) TraceCall ( ctx context . Context , args ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { var ( err error block * types . Block ) if hash , ok := blockNrOrHash . Hash (); ok { block , err = api . blockByHash ( ctx , hash ) } else if number , ok := blockNrOrHash . Number (); ok { if number == rpc . PendingBlockNumber { return nil , errors . New ( \"tracing on top of pending is not supported\" ) } block , err = api . blockByNumber ( ctx , number ) } else { return nil , errors . New ( \"invalid arguments; neither block nor hash specified\" ) } if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , block , reexec , nil , true , false ) if err != nil { return nil , err } defer release () vmctx := core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) if config != nil { if err := config . StateOverrides . Apply ( statedb ); err != nil { return nil , err } config . BlockOverrides . Apply ( & vmctx ) } msg , err := args . ToMessage ( api . backend . RPCGasCap (), block . BaseFee ()) if err != nil { return nil , err } traceConfig := getTraceConfigFromTraceCallConfig ( config ) return api . traceTx ( ctx , msg , new ( Context ), vmctx , statedb , traceConfig ) } // TraceCall lets you trace a given eth_call. It collects the structured logs // created during the execution of EVM if the given transaction was added on // top of the provided block and returns them as a JSON object. // Try to retrieve the specified block View on GitHub \u2192 debug_traceCallMany \u00b6 TraceCallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block. Params (3) \u00b6 Parameters must be given by position . 1: txs []ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceCallMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceCallMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Javascript Console 1 debug . traceCallMany ( txs , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 func ( api * API ) TraceCallMany ( ctx context . Context , txs [ // TraceCallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. ] ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { var ( err error block * types . Block ) if hash , ok := blockNrOrHash . Hash (); ok { block , err = api . blockByHash ( ctx , hash ) } else if number , ok := blockNrOrHash . Number (); ok { block , err = api . blockByNumber ( ctx , number ) } else { return nil , errors . New ( \"invalid arguments; neither block nor hash specified\" ) } if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , block , reexec , nil , true , false ) if err != nil { return nil , err } defer release () if config != nil { if err := config . StateOverrides . Apply ( statedb ); err != nil { return nil , err } } traceConfig := getTraceConfigFromTraceCallConfig ( config ) var results = make ([ // Try to retrieve the specified block ] interface {}, len ( txs )) for idx , args := range txs { msg , err := args . ToMessage ( api . backend . RPCGasCap (), block . BaseFee ()) if err != nil { results [ idx ] = & txTraceResult { Error : err . Error ()} continue } vmctx := core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) res , err := api . traceTx ( ctx , msg , new ( Context ), vmctx , statedb , traceConfig ) if err != nil { results [ idx ] = & txTraceResult { Error : err . Error ()} continue } res , err = decorateResponse ( res , traceConfig ) if err != nil { return nil , fmt . Errorf ( \"failed to decorate response for transaction at index %d with error %v\" , idx , err ) } results [ idx ] = res } return results , nil } View on GitHub \u2192 debug_traceChain \u00b6 TraceChain returns the structured logs created during the execution of EVM between two blocks (excluding start) and returns them as a JSON object. Params (3) \u00b6 Parameters must be given by position . 1: start rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: end rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 3: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_subscribe\", \"params\": [\"traceChain\", <start>, <end>, <config>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) TraceChain ( ctx context . Context , start , end rpc . BlockNumber , config * TraceConfig ) ( * rpc . Subscription , error ) { from , err := api . blockByNumber ( ctx , start ) if err != nil { return nil , err } to , err := api . blockByNumber ( ctx , end ) if err != nil { return nil , err } if from . Number (). Cmp ( to . Number ()) >= 0 { return nil , fmt . Errorf ( \"end block (#%d) needs to come after start block (#%d)\" , end , start ) } notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } sub := notifier . CreateSubscription () resCh := api . traceChain ( from , to , config , notifier . Closed ()) go func () { for result := // TraceChain returns the structured logs created during the execution of EVM // between two blocks (excluding start) and returns them as a JSON object. range resCh { notifier . Notify ( sub . ID , result ) } }() return sub , nil } View on GitHub \u2192 debug_traceTransaction \u00b6 TraceTransaction returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceTransaction\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceTransaction\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceTransaction ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func ( api * API ) TraceTransaction ( ctx context . Context , hash common . Hash , config * TraceConfig ) ( interface {}, error ) { tx , blockHash , blockNumber , index , err := api . backend . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { return nil , errTxNotFound } if blockNumber == 0 { return nil , errors . New ( \"genesis is not traceable\" ) } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } block , err := api . blockByNumberAndHash ( ctx , rpc . BlockNumber ( blockNumber ), blockHash ) if err != nil { return nil , err } msg , vmctx , statedb , release , err := api . backend . StateAtTransaction ( ctx , block , int ( index ), reexec ) if err != nil { return nil , err } defer release () txctx := & Context { BlockHash : blockHash , BlockNumber : block . Number (), TxIndex : int ( index ), TxHash : hash } return api . traceTx ( ctx , msg , txctx , vmctx , statedb , config ) } // TraceTransaction returns the structured logs created during the execution of EVM // and returns them as a JSON object. View on GitHub \u2192 debug_unsubscribe \u00b6 Unsubscribe terminates an existing subscription by ID. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 debug . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCDebugSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192 debug_verbosity \u00b6 Verbosity sets the log verbosity ceiling. The verbosity of individual packages and source files can be raised using Vmodule. Params (1) \u00b6 Parameters must be given by position . 1: level int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_verbosity\", \"params\": [<level>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_verbosity\", \"params\": [<level>]}' Javascript Console 1 debug . verbosity ( level ); Source code 1 2 3 4 func ( * HandlerT ) Verbosity ( level int ) { glogger . Verbosity ( log . Lvl ( level )) } // Verbosity sets the log verbosity ceiling. The verbosity of individual packages // and source files can be raised using Vmodule. View on GitHub \u2192 debug_vmodule \u00b6 Vmodule sets the log verbosity pattern. See package log for details on the pattern syntax. Params (1) \u00b6 Parameters must be given by position . 1: pattern string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_vmodule\", \"params\": [<pattern>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_vmodule\", \"params\": [<pattern>]}' Javascript Console 1 debug . vmodule ( pattern ); Source code 1 2 3 4 func ( * HandlerT ) Vmodule ( pattern string ) error { return glogger . Vmodule ( pattern ) } // Vmodule sets the log verbosity pattern. See package log for details on the // pattern syntax. View on GitHub \u2192 debug_writeBlockProfile \u00b6 WriteBlockProfile writes a goroutine blocking profile to the given file. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeBlockProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeBlockProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeBlockProfile ( file ); Source code 1 2 3 func ( * HandlerT ) WriteBlockProfile ( file string ) error { return writeProfile ( \"block\" , file ) } // WriteBlockProfile writes a goroutine blocking profile to the given file. View on GitHub \u2192 debug_writeMemProfile \u00b6 WriteMemProfile writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeMemProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeMemProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeMemProfile ( file ); Source code 1 2 3 4 5 func ( * HandlerT ) WriteMemProfile ( file string ) error { return writeProfile ( \"heap\" , file ) } // WriteMemProfile writes an allocation profile to the given file. // Note that the profiling rate cannot be set through the API, // it must be set on the command line. View on GitHub \u2192 debug_writeMutexProfile \u00b6 WriteMutexProfile writes a goroutine blocking profile to the given file. Params (1) \u00b6 Parameters must be given by position . 1: file string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeMutexProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeMutexProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeMutexProfile ( file ); Source code 1 2 3 func ( * HandlerT ) WriteMutexProfile ( file string ) error { return writeProfile ( \"mutex\" , file ) } // WriteMutexProfile writes a goroutine blocking profile to the given file. View on GitHub \u2192","title":"Debug"},{"location":"JSON-RPC-API/modules/debug/#debug_accountrange","text":"AccountRange enumerates all accounts in the given block and start point in paging request","title":"debug_accountRange"},{"location":"JSON-RPC-API/modules/debug/#params-6","text":"Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 2: start hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 3: maxResults int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 4: nocode bool Required: \u2713 Yes 5: nostorage bool Required: \u2713 Yes 6: incompletes bool Required: \u2713 Yes","title":"Params (6)"},{"location":"JSON-RPC-API/modules/debug/#result","text":"state.IteratorDump Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 - additionalProperties: `false` - properties: - accounts: - patternProperties: - .*: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - codeHash: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - key: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - root: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - storage: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: `object` - next: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - root: - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"key\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"root\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"next\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"root\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_accountRange\", \"params\": [<blockNrOrHash>, <start>, <maxResults>, <nocode>, <nostorage>, <incompletes>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_accountRange\", \"params\": [<blockNrOrHash>, <start>, <maxResults>, <nocode>, <nostorage>, <incompletes>]}' Javascript Console 1 debug . accountRange ( blockNrOrHash , start , maxResults , nocode , nostorage , incompletes ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 func ( api * DebugAPI ) AccountRange ( blockNrOrHash rpc . BlockNumberOrHash , start hexutil . Bytes , maxResults int , nocode , nostorage , incompletes bool ) ( state . IteratorDump , error ) { var stateDb * state . StateDB var err error if number , ok := blockNrOrHash . Number (); ok { if number == rpc . PendingBlockNumber { _ , stateDb = api . eth . miner . Pending () } else { var header * types . Header switch number { case rpc . LatestBlockNumber : header = api . eth . blockchain . CurrentBlock () case rpc . FinalizedBlockNumber : header = api . eth . blockchain . CurrentFinalBlock () case rpc . SafeBlockNumber : header = api . eth . blockchain . CurrentSafeBlock () default : block := api . eth . blockchain . GetBlockByNumber ( uint64 ( number )) if block == nil { return state . IteratorDump {}, fmt . Errorf ( \"block #%d not found\" , number ) } header = block . Header () } if header == nil { return state . IteratorDump {}, fmt . Errorf ( \"block #%d not found\" , number ) } stateDb , err = api . eth . BlockChain (). StateAt ( header . Root ) if err != nil { return state . IteratorDump {}, err } } } else if hash , ok := blockNrOrHash . Hash (); ok { block := api . eth . blockchain . GetBlockByHash ( hash ) if block == nil { return state . IteratorDump {}, fmt . Errorf ( \"block %s not found\" , hash . Hex ()) } stateDb , err = api . eth . BlockChain (). StateAt ( block . Root ()) if err != nil { return state . IteratorDump {}, err } } else { return state . IteratorDump {}, errors . New ( \"either block number or block hash must be specified\" ) } opts := & state . DumpConfig { SkipCode : nocode , SkipStorage : nostorage , OnlyWithAddresses : ! incompletes , Start : start , Max : uint64 ( maxResults )} if maxResults > AccountRangeMaxResults || maxResults <= 0 { opts . Max = AccountRangeMaxResults } return stateDb . IteratorDump ( opts ), nil } // AccountRange enumerates all accounts in the given block and start point in paging request View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_backtraceat","text":"BacktraceAt sets the log backtrace location. See package log for details on the pattern syntax.","title":"debug_backtraceAt"},{"location":"JSON-RPC-API/modules/debug/#params-1","text":"Parameters must be given by position . 1: location string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_1","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_backtraceAt\", \"params\": [<location>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_backtraceAt\", \"params\": [<location>]}' Javascript Console 1 debug . backtraceAt ( location ); Source code 1 2 3 4 func ( * HandlerT ) BacktraceAt ( location string ) error { return glogger . BacktraceAt ( location ) } // BacktraceAt sets the log backtrace location. See package log for details on // the pattern syntax. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_blockprofile","text":"BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually.","title":"debug_blockProfile"},{"location":"JSON-RPC-API/modules/debug/#params-2","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_2","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_blockProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_blockProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . blockProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 func ( * HandlerT ) BlockProfile ( file string , nsec uint ) error { runtime . SetBlockProfileRate ( 1 ) time . Sleep ( time . Duration ( nsec ) * time . Second ) defer runtime . SetBlockProfileRate ( 0 ) return writeProfile ( \"block\" , file ) } // BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to // file. It uses a profile rate of 1 for most accurate information. If a different rate is // desired, set the rate and write the profile manually. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_chaindbcompact","text":"ChaindbCompact flattens the entire key-value database into a single level, removing all unused slots and merging all keys.","title":"debug_chaindbCompact"},{"location":"JSON-RPC-API/modules/debug/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_3","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_chaindbCompact\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_chaindbCompact\", \"params\": []}' Javascript Console 1 debug . chaindbCompact (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * DebugAPI ) ChaindbCompact () error { for b := byte ( 0 ); b < 255 ; b ++ { log . Info ( \"Compacting chain database\" , \"range\" , fmt . Sprintf ( \"0x%0.2X-0x%0.2X\" , b , b + 1 )) if err := api . b . ChainDb (). Compact ([ // ChaindbCompact flattens the entire key-value database into a single level, // removing all unused slots and merging all keys. ] byte { b }, [] byte { b + 1 }); err != nil { log . Error ( \"Database compaction failed\" , \"err\" , err ) return err } } return nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_chaindbproperty","text":"ChaindbProperty returns leveldb properties of the key-value database.","title":"debug_chaindbProperty"},{"location":"JSON-RPC-API/modules/debug/#params-1_1","text":"Parameters must be given by position . 1: property string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_4","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_4","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_chaindbProperty\", \"params\": [<property>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_chaindbProperty\", \"params\": [<property>]}' Javascript Console 1 debug . chaindbProperty ( property ); Source code 1 2 3 4 5 6 7 8 func ( api * DebugAPI ) ChaindbProperty ( property string ) ( string , error ) { if property == \"\" { property = \"leveldb.stats\" } else if ! strings . HasPrefix ( property , \"leveldb.\" ) { property = \"leveldb.\" + property } return api . b . ChainDb (). Stat ( property ) } // ChaindbProperty returns leveldb properties of the key-value database. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_cpuprofile","text":"CpuProfile turns on CPU profiling for nsec seconds and writes profile data to file.","title":"debug_cpuProfile"},{"location":"JSON-RPC-API/modules/debug/#params-2_1","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_5","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_cpuProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_cpuProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . cpuProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 9 func ( h * HandlerT ) CpuProfile ( file string , nsec uint ) error { if err := h . StartCPUProfile ( file ); err != nil { return err } time . Sleep ( time . Duration ( nsec ) * time . Second ) h . StopCPUProfile () return nil } // CpuProfile turns on CPU profiling for nsec seconds and writes // profile data to file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_dbancient","text":"DbAncient retrieves an ancient binary blob from the append-only immutable files. It is a mapping to the AncientReaderOp.Ancient method","title":"debug_dbAncient"},{"location":"JSON-RPC-API/modules/debug/#params-2_2","text":"Parameters must be given by position . 1: kind string Required: \u2713 Yes 2: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_6","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbAncient\", \"params\": [<kind>, <number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbAncient\", \"params\": [<kind>, <number>]}' Javascript Console 1 debug . dbAncient ( kind , number ); Source code 1 2 3 4 func ( api * DebugAPI ) DbAncient ( kind string , number uint64 ) ( hexutil . Bytes , error ) { return api . b . ChainDb (). Ancient ( kind , number ) } // DbAncient retrieves an ancient binary blob from the append-only immutable files. // It is a mapping to the `AncientReaderOp.Ancient` method View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_dbancients","text":"DbAncients returns the ancient item numbers in the ancient store. It is a mapping to the AncientReaderOp.Ancients method","title":"debug_dbAncients"},{"location":"JSON-RPC-API/modules/debug/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_7","text":"uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_7","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbAncients\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbAncients\", \"params\": []}' Javascript Console 1 debug . dbAncients (); Source code 1 2 3 4 func ( api * DebugAPI ) DbAncients () ( uint64 , error ) { return api . b . ChainDb (). Ancients () } // DbAncients returns the ancient item numbers in the ancient store. // It is a mapping to the `AncientReaderOp.Ancients` method View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_dbget","text":"DbGet returns the raw value of a key stored in the database.","title":"debug_dbGet"},{"location":"JSON-RPC-API/modules/debug/#params-1_2","text":"Parameters must be given by position . 1: key string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_8","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_8","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dbGet\", \"params\": [<key>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dbGet\", \"params\": [<key>]}' Javascript Console 1 debug . dbGet ( key ); Source code 1 2 3 4 5 6 7 func ( api * DebugAPI ) DbGet ( key string ) ( hexutil . Bytes , error ) { blob , err := common . ParseHexOrString ( key ) if err != nil { return nil , err } return api . b . ChainDb (). Get ( blob ) } // DbGet returns the raw value of a key stored in the database. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_dumpblock","text":"DumpBlock retrieves the entire state of the database at a given block.","title":"debug_dumpBlock"},{"location":"JSON-RPC-API/modules/debug/#params-1_3","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_9","text":"state.Dump Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 - additionalProperties: `false` - properties: - accounts: - patternProperties: - .*: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - codeHash: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - key: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - root: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - storage: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: `object` - root: - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"key\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"root\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"root\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_9","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_dumpBlock\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_dumpBlock\", \"params\": [<blockNr>]}' Javascript Console 1 debug . dumpBlock ( blockNr ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func ( api * DebugAPI ) DumpBlock ( blockNr rpc . BlockNumber ) ( state . Dump , error ) { opts := & state . DumpConfig { OnlyWithAddresses : true , Max : AccountRangeMaxResults } if blockNr == rpc . PendingBlockNumber { _ , stateDb := api . eth . miner . Pending () return stateDb . RawDump ( opts ), nil } var header * types . Header switch blockNr { case rpc . LatestBlockNumber : header = api . eth . blockchain . CurrentBlock () case rpc . FinalizedBlockNumber : header = api . eth . blockchain . CurrentFinalBlock () case rpc . SafeBlockNumber : header = api . eth . blockchain . CurrentSafeBlock () default : block := api . eth . blockchain . GetBlockByNumber ( uint64 ( blockNr )) if block == nil { return state . Dump {}, fmt . Errorf ( \"block #%d not found\" , blockNr ) } header = block . Header () } if header == nil { return state . Dump {}, fmt . Errorf ( \"block #%d not found\" , blockNr ) } stateDb , err := api . eth . BlockChain (). StateAt ( header . Root ) if err != nil { return state . Dump {}, err } return stateDb . RawDump ( opts ), nil } // DumpBlock retrieves the entire state of the database at a given block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_freeosmemory","text":"FreeOSMemory forces a garbage collection.","title":"debug_freeOSMemory"},{"location":"JSON-RPC-API/modules/debug/#params-0_2","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_10","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_10","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_freeOSMemory\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_freeOSMemory\", \"params\": []}' Javascript Console 1 debug . freeOSMemory (); Source code 1 2 3 func ( * HandlerT ) FreeOSMemory () { debug . FreeOSMemory () } // FreeOSMemory forces a garbage collection. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_gcstats","text":"GcStats returns GC statistics.","title":"debug_gcStats"},{"location":"JSON-RPC-API/modules/debug/#params-0_3","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_11","text":"*debug.GCStats Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 - additionalProperties: `false` - properties: - LastGC: - format: `date-time` - type: `string` - NumGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Pause: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - PauseEnd: - items: - format: `date-time` - type: `string` - type: `array` - PauseQuantiles: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - PauseTotal: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"additionalProperties\": false, \"properties\": { \"LastGC\": { \"format\": \"date-time\", \"type\": \"string\" }, \"NumGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Pause\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseEnd\": { \"items\": { \"format\": \"date-time\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseQuantiles\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"PauseTotal\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_11","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_gcStats\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_gcStats\", \"params\": []}' Javascript Console 1 debug . gcStats (); Source code 1 2 3 4 5 func ( * HandlerT ) GcStats () * debug . GCStats { s := new ( debug . GCStats ) debug . ReadGCStats ( s ) return s } // GcStats returns GC statistics. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getaccessiblestate","text":"GetAccessibleState returns the first number where the node has accessible state on disk. Note this being the post-state of that block and the pre-state of the next block. The (from, to) parameters are the sequence of blocks to search, which can go either forwards or backwards","title":"debug_getAccessibleState"},{"location":"JSON-RPC-API/modules/debug/#params-2_3","text":"Parameters must be given by position . 1: from rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: to rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_12","text":"uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_12","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getAccessibleState\", \"params\": [<from>, <to>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getAccessibleState\", \"params\": [<from>, <to>]}' Javascript Console 1 debug . getAccessibleState ( from , to ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 func ( api * DebugAPI ) GetAccessibleState ( from , to rpc . BlockNumber ) ( uint64 , error ) { db := api . eth . ChainDb () var pivot uint64 if p := rawdb . ReadLastPivotNumber ( db ); p != nil { pivot = * p log . Info ( \"Found fast-sync pivot marker\" , \"number\" , pivot ) } var resolveNum = func ( num rpc . BlockNumber ) ( uint64 , error ) { if num . Int64 () < 0 { block := api . eth . blockchain . CurrentBlock () if block == nil { return 0 , errors . New ( \"current block missing\" ) } return block . Number . Uint64 (), nil } return uint64 ( num . Int64 ()), nil } var ( start uint64 end uint64 delta = int64 ( 1 ) lastLog time . Time err error ) if start , err = resolveNum ( from ); err != nil { return 0 , err } if end , err = resolveNum ( to ); err != nil { return 0 , err } if start == end { return 0 , errors . New ( \"from and to needs to be different\" ) } if start > end { delta = - 1 } for i := int64 ( start ); i != int64 ( end ); i += delta { if time . Since ( lastLog ) > 8 * time . Second { log . Info ( \"Finding roots\" , \"from\" , start , \"to\" , end , \"at\" , i ) lastLog = time . Now () } if i < int64 ( pivot ) { continue } h := api . eth . BlockChain (). GetHeaderByNumber ( uint64 ( i )) if h == nil { return 0 , fmt . Errorf ( \"missing header %d\" , i ) } if ok , _ := api . eth . ChainDb (). Has ( h . Root [ // GetAccessibleState returns the first number where the node has accessible // state on disk. Note this being the post-state of that block and the pre-state // of the next block. // The (from, to) parameters are the sequence of blocks to search, which can go // either forwards or backwards :]); ok { return uint64 ( i ), nil } } return 0 , errors . New ( \"no state found\" ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getbadblocks","text":"GetBadBlocks returns a list of the last \u2018bad blocks\u2019 that the client has seen on the network and returns them as a JSON list of block hashes.","title":"debug_getBadBlocks"},{"location":"JSON-RPC-API/modules/debug/#params-0_4","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_13","text":"BadBlockArgs []*BadBlockArgs Required: \u2713 Yes Schemaitems: - additionalProperties: `false` - properties: - block: - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - rlp: - type: `string` - type: object - type: array Raw{ \"items\": [ { \"additionalProperties\": false, \"properties\": { \"block\": { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"rlp\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_13","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getBadBlocks\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getBadBlocks\", \"params\": []}' Javascript Console 1 debug . getBadBlocks (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( api * DebugAPI ) GetBadBlocks ( ctx context . Context ) ([ // GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network // and returns them as a JSON list of block hashes. ] * BadBlockArgs , error ) { var ( blocks = rawdb . ReadAllBadBlocks ( api . eth . chainDb ) results = make ([] * BadBlockArgs , 0 , len ( blocks )) ) for _ , block := range blocks { var ( blockRlp string blockJSON * ethapi . RPCMarshalBlockT ) if rlpBytes , err := rlp . EncodeToBytes ( block ); err != nil { blockRlp = err . Error () } else { blockRlp = fmt . Sprintf ( \"%#x\" , rlpBytes ) } blockJSON = ethapi . RPCMarshalBlock ( block , true , true , api . eth . APIBackend . ChainConfig ()) results = append ( results , & BadBlockArgs { Hash : block . Hash (), RLP : blockRlp , Block : blockJSON }) } return results , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getmodifiedaccountsbyhash","text":"GetModifiedAccountsByHash returns all accounts that have changed between the two blocks specified. A change is defined as a difference in nonce, balance, code hash, or storage hash. With one parameter, returns the list of accounts modified in the specified block.","title":"debug_getModifiedAccountsByHash"},{"location":"JSON-RPC-API/modules/debug/#params-2_4","text":"Parameters must be given by position . 1: startHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: endHash *common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_14","text":"commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_14","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getModifiedAccountsByHash\", \"params\": [<startHash>, <endHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getModifiedAccountsByHash\", \"params\": [<startHash>, <endHash>]}' Javascript Console 1 debug . getModifiedAccountsByHash ( startHash , endHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( api * DebugAPI ) GetModifiedAccountsByHash ( startHash common . Hash , endHash * common . Hash ) ([ // GetModifiedAccountsByHash returns all accounts that have changed between the // two blocks specified. A change is defined as a difference in nonce, balance, // code hash, or storage hash. // // With one parameter, returns the list of accounts modified in the specified block. ] common . Address , error ) { var startBlock , endBlock * types . Block startBlock = api . eth . blockchain . GetBlockByHash ( startHash ) if startBlock == nil { return nil , fmt . Errorf ( \"start block %x not found\" , startHash ) } if endHash == nil { endBlock = startBlock startBlock = api . eth . blockchain . GetBlockByHash ( startBlock . ParentHash ()) if startBlock == nil { return nil , fmt . Errorf ( \"block %x has no parent\" , endBlock . Number ()) } } else { endBlock = api . eth . blockchain . GetBlockByHash ( * endHash ) if endBlock == nil { return nil , fmt . Errorf ( \"end block %x not found\" , * endHash ) } } return api . getModifiedAccounts ( startBlock , endBlock ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getmodifiedaccountsbynumber","text":"GetModifiedAccountsByNumber returns all accounts that have changed between the two blocks specified. A change is defined as a difference in nonce, balance, code hash, or storage hash. With one parameter, returns the list of accounts modified in the specified block.","title":"debug_getModifiedAccountsByNumber"},{"location":"JSON-RPC-API/modules/debug/#params-2_5","text":"Parameters must be given by position . 1: startNum uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: endNum *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_15","text":"commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_15","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getModifiedAccountsByNumber\", \"params\": [<startNum>, <endNum>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getModifiedAccountsByNumber\", \"params\": [<startNum>, <endNum>]}' Javascript Console 1 debug . getModifiedAccountsByNumber ( startNum , endNum ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( api * DebugAPI ) GetModifiedAccountsByNumber ( startNum uint64 , endNum * uint64 ) ([ // GetModifiedAccountsByNumber returns all accounts that have changed between the // two blocks specified. A change is defined as a difference in nonce, balance, // code hash, or storage hash. // // With one parameter, returns the list of accounts modified in the specified block. ] common . Address , error ) { var startBlock , endBlock * types . Block startBlock = api . eth . blockchain . GetBlockByNumber ( startNum ) if startBlock == nil { return nil , fmt . Errorf ( \"start block %x not found\" , startNum ) } if endNum == nil { endBlock = startBlock startBlock = api . eth . blockchain . GetBlockByHash ( startBlock . ParentHash ()) if startBlock == nil { return nil , fmt . Errorf ( \"block %x has no parent\" , endBlock . Number ()) } } else { endBlock = api . eth . blockchain . GetBlockByNumber ( * endNum ) if endBlock == nil { return nil , fmt . Errorf ( \"end block %d not found\" , * endNum ) } } return api . getModifiedAccounts ( startBlock , endBlock ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getrawblock","text":"GetRawBlock retrieves the RLP encoded for a single block.","title":"debug_getRawBlock"},{"location":"JSON-RPC-API/modules/debug/#params-1_4","text":"Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_16","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_16","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawBlock\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawBlock\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawBlock ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( api * DebugAPI ) GetRawBlock ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } block , _ := api . b . BlockByHash ( ctx , hash ) if block == nil { return nil , fmt . Errorf ( \"block #%d not found\" , hash ) } return rlp . EncodeToBytes ( block ) } // GetRawBlock retrieves the RLP encoded for a single block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getrawheader","text":"GetRawHeader retrieves the RLP encoding for a single header.","title":"debug_getRawHeader"},{"location":"JSON-RPC-API/modules/debug/#params-1_5","text":"Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_17","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_17","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawHeader\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawHeader\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawHeader ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( api * DebugAPI ) GetRawHeader ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } header , _ := api . b . HeaderByHash ( ctx , hash ) if header == nil { return nil , fmt . Errorf ( \"header #%d not found\" , hash ) } return rlp . EncodeToBytes ( header ) } // GetRawHeader retrieves the RLP encoding for a single header. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getrawreceipts","text":"GetRawReceipts retrieves the binary-encoded receipts of a single block.","title":"debug_getRawReceipts"},{"location":"JSON-RPC-API/modules/debug/#params-1_6","text":"Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_18","text":"hexutilBytes []hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_18","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawReceipts\", \"params\": [<blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawReceipts\", \"params\": [<blockNrOrHash>]}' Javascript Console 1 debug . getRawReceipts ( blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func ( api * DebugAPI ) GetRawReceipts ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash ) ([ // GetRawReceipts retrieves the binary-encoded receipts of a single block. ] hexutil . Bytes , error ) { var hash common . Hash if h , ok := blockNrOrHash . Hash (); ok { hash = h } else { block , err := api . b . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return nil , err } hash = block . Hash () } receipts , err := api . b . GetReceipts ( ctx , hash ) if err != nil { return nil , err } result := make ([] hexutil . Bytes , len ( receipts )) for i , receipt := range receipts { b , err := receipt . MarshalBinary () if err != nil { return nil , err } result [ i ] = b } return result , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_getrawtransaction","text":"GetRawTransaction returns the bytes of the transaction for the given hash.","title":"debug_getRawTransaction"},{"location":"JSON-RPC-API/modules/debug/#params-1_7","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_19","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_19","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_getRawTransaction\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_getRawTransaction\", \"params\": [<hash>]}' Javascript Console 1 debug . getRawTransaction ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * DebugAPI ) GetRawTransaction ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { tx , _ , _ , _ , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { if tx = s . b . GetPoolTransaction ( hash ); tx == nil { return nil , nil } } return tx . MarshalBinary () } // GetRawTransaction returns the bytes of the transaction for the given hash. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_gotrace","text":"GoTrace turns on tracing for nsec seconds and writes trace data to file.","title":"debug_goTrace"},{"location":"JSON-RPC-API/modules/debug/#params-2_6","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_20","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_20","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_goTrace\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_goTrace\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . goTrace ( file , nsec ); Source code 1 2 3 4 5 6 7 8 9 func ( h * HandlerT ) GoTrace ( file string , nsec uint ) error { if err := h . StartGoTrace ( file ); err != nil { return err } time . Sleep ( time . Duration ( nsec ) * time . Second ) h . StopGoTrace () return nil } // GoTrace turns on tracing for nsec seconds and writes // trace data to file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_intermediateroots","text":"IntermediateRoots executes a block (bad- or canon- or side-), and returns a list of intermediate roots: the stateroot after each transaction.","title":"debug_intermediateRoots"},{"location":"JSON-RPC-API/modules/debug/#params-2_7","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_21","text":"commonHash []common.Hash Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_21","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_intermediateRoots\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_intermediateRoots\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . intermediateRoots ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 func ( api * API ) IntermediateRoots ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // IntermediateRoots executes a block (bad- or canon- or side-), and returns a list // of intermediate roots: the stateroot after each transaction. ] common . Hash , error ) { block , _ := api . blockByHash ( ctx , hash ) if block == nil { block = rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) } if block == nil { return nil , fmt . Errorf ( \"block %#x not found\" , hash ) } if block . NumberU64 () == 0 { return nil , errors . New ( \"genesis is not traceable\" ) } parent , err := api . blockByNumberAndHash ( ctx , rpc . BlockNumber ( block . NumberU64 () - 1 ), block . ParentHash ()) if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , parent , reexec , nil , true , false ) if err != nil { return nil , err } defer release () var ( roots [] common . Hash signer = types . MakeSigner ( api . backend . ChainConfig (), block . Number (), block . Time ()) chainConfig = api . backend . ChainConfig () vmctx = core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) deleteEmptyObjects = api . backend . ChainConfig (). IsEnabled ( api . backend . ChainConfig (). GetEIP161dTransition , block . Number ()) ) for i , tx := range block . Transactions () { if err := ctx . Err (); err != nil { return nil , err } var ( msg , _ = core . TransactionToMessage ( tx , signer , block . BaseFee ()) txContext = core . NewEVMTxContext ( msg ) vmenv = vm . NewEVM ( vmctx , txContext , statedb , chainConfig , vm . Config {}) ) statedb . SetTxContext ( tx . Hash (), i ) if _ , err := core . ApplyMessage ( vmenv , msg , new ( core . GasPool ). AddGas ( msg . GasLimit )); err != nil { log . Warn ( \"Tracing intermediate roots did not complete\" , \"txindex\" , i , \"txhash\" , tx . Hash (), \"err\" , err ) return roots , nil } roots = append ( roots , statedb . IntermediateRoot ( deleteEmptyObjects )) } return roots , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_memstats","text":"MemStats returns detailed runtime memory statistics.","title":"debug_memStats"},{"location":"JSON-RPC-API/modules/debug/#params-0_5","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_22","text":"*runtime.MemStats Required: \u2713 Yes SchemaadditionalProperties: `false` - properties: - Alloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - BuckHashSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - BySize: - items: - additionalProperties: `false` - properties: - Frees: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Mallocs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Size: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - maxItems: `61` - minItems: `61` - type: `array` - DebugGC: - type: `boolean` - EnableGC: - type: `boolean` - Frees: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GCCPUFraction: - type: `number` - GCSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapAlloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapIdle: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapObjects: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapReleased: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - HeapSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - LastGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Lookups: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MCacheInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MCacheSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MSpanInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - MSpanSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Mallocs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NextGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NumForcedGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NumGC: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - OtherSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - PauseEnd: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - PauseNs: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - PauseTotalNs: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StackInuse: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StackSys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Sys: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TotalAlloc: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw{ \"additionalProperties\": false, \"properties\": { \"Alloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"BuckHashSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"BySize\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"Frees\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Mallocs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Size\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"maxItems\": 61, \"minItems\": 61, \"type\": \"array\" }, \"DebugGC\": { \"type\": \"boolean\" }, \"EnableGC\": { \"type\": \"boolean\" }, \"Frees\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GCCPUFraction\": { \"type\": \"number\" }, \"GCSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapAlloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapIdle\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapObjects\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapReleased\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"HeapSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"LastGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Lookups\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MCacheInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MCacheSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MSpanInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"MSpanSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Mallocs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NextGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NumForcedGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NumGC\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"OtherSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"PauseEnd\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"PauseNs\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"PauseTotalNs\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StackInuse\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StackSys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Sys\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TotalAlloc\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_22","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_memStats\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_memStats\", \"params\": []}' Javascript Console 1 debug . memStats (); Source code 1 2 3 4 5 func ( * HandlerT ) MemStats () * runtime . MemStats { s := new ( runtime . MemStats ) runtime . ReadMemStats ( s ) return s } // MemStats returns detailed runtime memory statistics. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_mutexprofile","text":"MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually.","title":"debug_mutexProfile"},{"location":"JSON-RPC-API/modules/debug/#params-2_8","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: nsec uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_23","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_23","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_mutexProfile\", \"params\": [<file>, <nsec>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_mutexProfile\", \"params\": [<file>, <nsec>]}' Javascript Console 1 debug . mutexProfile ( file , nsec ); Source code 1 2 3 4 5 6 7 8 func ( * HandlerT ) MutexProfile ( file string , nsec uint ) error { runtime . SetMutexProfileFraction ( 1 ) time . Sleep ( time . Duration ( nsec ) * time . Second ) defer runtime . SetMutexProfileFraction ( 0 ) return writeProfile ( \"mutex\" , file ) } // MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file. // It uses a profile rate of 1 for most accurate information. If a different rate is // desired, set the rate and write the profile manually. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_preimage","text":"Preimage is a debug API function that returns the preimage for a sha3 hash, if known.","title":"debug_preimage"},{"location":"JSON-RPC-API/modules/debug/#params-1_8","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_24","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_24","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_preimage\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_preimage\", \"params\": [<hash>]}' Javascript Console 1 debug . preimage ( hash ); Source code 1 2 3 4 5 6 func ( api * DebugAPI ) Preimage ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { if preimage := rawdb . ReadPreimage ( api . eth . ChainDb (), hash ); preimage != nil { return preimage , nil } return nil , errors . New ( \"unknown preimage\" ) } // Preimage is a debug API function that returns the preimage for a sha3 hash, if known. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_printblock","text":"PrintBlock retrieves a block and returns its pretty printed form.","title":"debug_printBlock"},{"location":"JSON-RPC-API/modules/debug/#params-1_9","text":"Parameters must be given by position . 1: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_25","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_25","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_printBlock\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_printBlock\", \"params\": [<number>]}' Javascript Console 1 debug . printBlock ( number ); Source code 1 2 3 4 5 6 7 func ( api * DebugAPI ) PrintBlock ( ctx context . Context , number uint64 ) ( string , error ) { block , _ := api . b . BlockByNumber ( ctx , rpc . BlockNumber ( number )) if block == nil { return \"\" , fmt . Errorf ( \"block #%d not found\" , number ) } return spew . Sdump ( block ), nil } // PrintBlock retrieves a block and returns its pretty printed form. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_seedhash","text":"SeedHash retrieves the seed hash of a block.","title":"debug_seedHash"},{"location":"JSON-RPC-API/modules/debug/#params-1_10","text":"Parameters must be given by position . 1: number uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_26","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_26","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_seedHash\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_seedHash\", \"params\": [<number>]}' Javascript Console 1 debug . seedHash ( number ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * DebugAPI ) SeedHash ( ctx context . Context , number uint64 ) ( string , error ) { block , _ := api . b . BlockByNumber ( ctx , rpc . BlockNumber ( number )) if block == nil { return \"\" , fmt . Errorf ( \"block #%d not found\" , number ) } ecip1099FBlock := api . b . ChainConfig (). GetEthashECIP1099Transition () epochLength := ethash . CalcEpochLength ( number , ecip1099FBlock ) epoch := ethash . CalcEpoch ( number , epochLength ) return fmt . Sprintf ( \"%#x\" , ethash . SeedHash ( epoch , epochLength )), nil } // SeedHash retrieves the seed hash of a block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_setblockprofilerate","text":"SetBlockProfileRate sets the rate of goroutine block profile data collection. rate 0 disables block profiling.","title":"debug_setBlockProfileRate"},{"location":"JSON-RPC-API/modules/debug/#params-1_11","text":"Parameters must be given by position . 1: rate int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_27","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_27","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setBlockProfileRate\", \"params\": [<rate>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setBlockProfileRate\", \"params\": [<rate>]}' Javascript Console 1 debug . setBlockProfileRate ( rate ); Source code 1 2 3 4 func ( * HandlerT ) SetBlockProfileRate ( rate int ) { runtime . SetBlockProfileRate ( rate ) } // SetBlockProfileRate sets the rate of goroutine block profile data collection. // rate 0 disables block profiling. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_setgcpercent","text":"SetGCPercent sets the garbage collection target percentage. It returns the previous setting. A negative value disables GC.","title":"debug_setGCPercent"},{"location":"JSON-RPC-API/modules/debug/#params-1_12","text":"Parameters must be given by position . 1: v int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_28","text":"int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_28","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setGCPercent\", \"params\": [<v>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setGCPercent\", \"params\": [<v>]}' Javascript Console 1 debug . setGCPercent ( v ); Source code 1 2 3 4 func ( * HandlerT ) SetGCPercent ( v int ) int { return debug . SetGCPercent ( v ) } // SetGCPercent sets the garbage collection target percentage. It returns the previous // setting. A negative value disables GC. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_sethead","text":"SetHead rewinds the head of the blockchain to a previous block.","title":"debug_setHead"},{"location":"JSON-RPC-API/modules/debug/#params-1_13","text":"Parameters must be given by position . 1: number hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_29","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_29","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setHead\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setHead\", \"params\": [<number>]}' Javascript Console 1 debug . setHead ( number ); Source code 1 2 3 func ( api * DebugAPI ) SetHead ( number hexutil . Uint64 ) { api . b . SetHead ( uint64 ( number )) } // SetHead rewinds the head of the blockchain to a previous block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_setmutexprofilefraction","text":"SetMutexProfileFraction sets the rate of mutex profiling.","title":"debug_setMutexProfileFraction"},{"location":"JSON-RPC-API/modules/debug/#params-1_14","text":"Parameters must be given by position . 1: rate int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_30","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_30","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_setMutexProfileFraction\", \"params\": [<rate>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_setMutexProfileFraction\", \"params\": [<rate>]}' Javascript Console 1 debug . setMutexProfileFraction ( rate ); Source code 1 2 3 func ( * HandlerT ) SetMutexProfileFraction ( rate int ) { runtime . SetMutexProfileFraction ( rate ) } // SetMutexProfileFraction sets the rate of mutex profiling. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_stacks","text":"Stacks returns a printed representation of the stacks of all goroutines. It also permits the following optional filters to be used: - filter: boolean expression of packages to filter for","title":"debug_stacks"},{"location":"JSON-RPC-API/modules/debug/#params-1_15","text":"Parameters must be given by position . 1: filter *string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_31","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_31","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stacks\", \"params\": [<filter>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stacks\", \"params\": [<filter>]}' Javascript Console 1 debug . stacks ( filter ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( * HandlerT ) Stacks ( filter * string ) string { buf := new ( bytes . Buffer ) pprof . Lookup ( \"goroutine\" ). WriteTo ( buf , 2 ) if filter != nil && len ( * filter ) > 0 { expanded := * filter expanded = regexp . MustCompile ( `[:/\\.A-Za-z0-9_-]+` ). ReplaceAllString ( expanded , \"`$0` in Value\" ) expanded = regexp . MustCompile ( \"!(`[:/\\\\.A-Za-z0-9_-]+`)\" ). ReplaceAllString ( expanded , \"$1 not\" ) expanded = strings . ReplaceAll ( expanded , \"||\" , \"or\" ) expanded = strings . ReplaceAll ( expanded , \"&&\" , \"and\" ) log . Info ( \"Expanded filter expression\" , \"filter\" , * filter , \"expanded\" , expanded ) expr , err := bexpr . CreateEvaluator ( expanded ) if err != nil { log . Error ( \"Failed to parse filter expression\" , \"expanded\" , expanded , \"err\" , err ) return \"\" } dump := buf . String () buf . Reset () for _ , trace := // Stacks returns a printed representation of the stacks of all goroutines. It // also permits the following optional filters to be used: // - filter: boolean expression of packages to filter for range strings . Split ( dump , \"\\n\\n\" ) { if ok , _ := expr . Evaluate ( map [ string ] string { \"Value\" : trace }); ok { buf . WriteString ( trace ) buf . WriteString ( \"\\n\\n\" ) } } } return buf . String () } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_standardtracebadblocktofile","text":"StandardTraceBadBlockToFile dumps the structured logs created during the execution of EVM against a block pulled from the pool of bad ones to the local file system and returns a list of files to the caller.","title":"debug_standardTraceBadBlockToFile"},{"location":"JSON-RPC-API/modules/debug/#params-2_9","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *StdTraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TxHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TxHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_32","text":"string []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_32","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_standardTraceBadBlockToFile\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_standardTraceBadBlockToFile\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . standardTraceBadBlockToFile ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) StandardTraceBadBlockToFile ( ctx context . Context , hash common . Hash , config * StdTraceConfig ) ([ // StandardTraceBadBlockToFile dumps the structured logs created during the // execution of EVM against a block pulled from the pool of bad ones to the // local file system and returns a list of files to the caller. ] string , error ) { block := rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) if block == nil { return nil , fmt . Errorf ( \"bad block %#x not found\" , hash ) } return api . standardTraceBlockToFile ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_standardtraceblocktofile","text":"StandardTraceBlockToFile dumps the structured logs created during the execution of EVM to the local file system and returns a list of files to the caller.","title":"debug_standardTraceBlockToFile"},{"location":"JSON-RPC-API/modules/debug/#params-2_10","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *StdTraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - TxHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"TxHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_33","text":"string []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_33","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_standardTraceBlockToFile\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_standardTraceBlockToFile\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . standardTraceBlockToFile ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) StandardTraceBlockToFile ( ctx context . Context , hash common . Hash , config * StdTraceConfig ) ([ // StandardTraceBlockToFile dumps the structured logs created during the // execution of EVM to the local file system and returns a list of files // to the caller. ] string , error ) { block , err := api . blockByHash ( ctx , hash ) if err != nil { return nil , err } return api . standardTraceBlockToFile ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_startcpuprofile","text":"StartCPUProfile turns on CPU profiling, writing to the given file.","title":"debug_startCPUProfile"},{"location":"JSON-RPC-API/modules/debug/#params-1_16","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_34","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_34","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_startCPUProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_startCPUProfile\", \"params\": [<file>]}' Javascript Console 1 debug . startCPUProfile ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ( h * HandlerT ) StartCPUProfile ( file string ) error { h . mu . Lock () defer h . mu . Unlock () if h . cpuW != nil { return errors . New ( \"CPU profiling already in progress\" ) } f , err := os . Create ( expandHome ( file )) if err != nil { return err } if err := pprof . StartCPUProfile ( f ); err != nil { f . Close () return err } h . cpuW = f h . cpuFile = file log . Info ( \"CPU profiling started\" , \"dump\" , h . cpuFile ) return nil } // StartCPUProfile turns on CPU profiling, writing to the given file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_startgotrace","text":"StartGoTrace turns on tracing, writing to the given file.","title":"debug_startGoTrace"},{"location":"JSON-RPC-API/modules/debug/#params-1_17","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_35","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_35","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_startGoTrace\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_startGoTrace\", \"params\": [<file>]}' Javascript Console 1 debug . startGoTrace ( file ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ( h * HandlerT ) StartGoTrace ( file string ) error { h . mu . Lock () defer h . mu . Unlock () if h . traceW != nil { return errors . New ( \"trace already in progress\" ) } f , err := os . Create ( expandHome ( file )) if err != nil { return err } if err := trace . Start ( f ); err != nil { f . Close () return err } h . traceW = f h . traceFile = file log . Info ( \"Go tracing started\" , \"dump\" , h . traceFile ) return nil } // StartGoTrace turns on tracing, writing to the given file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_stopcpuprofile","text":"StopCPUProfile stops an ongoing CPU profile.","title":"debug_stopCPUProfile"},{"location":"JSON-RPC-API/modules/debug/#params-0_6","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_36","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_36","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stopCPUProfile\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stopCPUProfile\", \"params\": []}' Javascript Console 1 debug . stopCPUProfile (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( h * HandlerT ) StopCPUProfile () error { h . mu . Lock () defer h . mu . Unlock () pprof . StopCPUProfile () if h . cpuW == nil { return errors . New ( \"CPU profiling not in progress\" ) } log . Info ( \"Done writing CPU profile\" , \"dump\" , h . cpuFile ) h . cpuW . Close () h . cpuW = nil h . cpuFile = \"\" return nil } // StopCPUProfile stops an ongoing CPU profile. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_stopgotrace","text":"StopGoTrace stops an ongoing trace.","title":"debug_stopGoTrace"},{"location":"JSON-RPC-API/modules/debug/#params-0_7","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/debug/#result_37","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_37","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_stopGoTrace\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_stopGoTrace\", \"params\": []}' Javascript Console 1 debug . stopGoTrace (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( h * HandlerT ) StopGoTrace () error { h . mu . Lock () defer h . mu . Unlock () trace . Stop () if h . traceW == nil { return errors . New ( \"trace not in progress\" ) } log . Info ( \"Done writing Go trace\" , \"dump\" , h . traceFile ) h . traceW . Close () h . traceW = nil h . traceFile = \"\" return nil } // StopGoTrace stops an ongoing trace. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_storagerangeat","text":"StorageRangeAt returns the storage at the given block height and transaction index.","title":"debug_storageRangeAt"},{"location":"JSON-RPC-API/modules/debug/#params-5","text":"Parameters must be given by position . 1: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 2: txIndex int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: contractAddress common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 4: keyStart hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 5: maxResult int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (5)"},{"location":"JSON-RPC-API/modules/debug/#result_38","text":"StorageRangeResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 - additionalProperties: `false` - properties: - nextKey: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storage: - patternProperties: - .*: - additionalProperties: `false` - properties: - key: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"additionalProperties\": false, \"properties\": { \"nextKey\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storage\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"key\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_38","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_storageRangeAt\", \"params\": [<blockNrOrHash>, <txIndex>, <contractAddress>, <keyStart>, <maxResult>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_storageRangeAt\", \"params\": [<blockNrOrHash>, <txIndex>, <contractAddress>, <keyStart>, <maxResult>]}' Javascript Console 1 debug . storageRangeAt ( blockNrOrHash , txIndex , contractAddress , keyStart , maxResult ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( api * DebugAPI ) StorageRangeAt ( ctx context . Context , blockNrOrHash rpc . BlockNumberOrHash , txIndex int , contractAddress common . Address , keyStart hexutil . Bytes , maxResult int ) ( StorageRangeResult , error ) { var block * types . Block block , err := api . eth . APIBackend . BlockByNumberOrHash ( ctx , blockNrOrHash ) if err != nil { return StorageRangeResult {}, err } if block == nil { return StorageRangeResult {}, fmt . Errorf ( \"block %v not found\" , blockNrOrHash ) } _ , _ , statedb , release , err := api . eth . stateAtTransaction ( ctx , block , txIndex , 0 ) if err != nil { return StorageRangeResult {}, err } defer release () st , err := statedb . StorageTrie ( contractAddress ) if err != nil { return StorageRangeResult {}, err } if st == nil { return StorageRangeResult {}, fmt . Errorf ( \"account %x doesn't exist\" , contractAddress ) } return storageRangeAt ( st , keyStart , maxResult ) } // StorageRangeAt returns the storage at the given block height and transaction index. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_subscribe","text":"Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections.","title":"debug_subscribe"},{"location":"JSON-RPC-API/modules/debug/#params-2_11","text":"Parameters must be given by position . 1: subscriptionName RPCDebugSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - oneOf: - description: `Returns transaction traces within a range of blocks.` - enum: traceChain - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"oneOf\": [ { \"description\": \"Returns transaction traces within a range of blocks.\", \"enum\": [ \"traceChain\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_39","text":"subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_39","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCDebugSubscription ) Subscribe ( subscriptionName RPCDebugSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_tracebadblock","text":"TraceBadBlock returns the structured logs created during the execution of EVM against a block pulled from the pool of bad ones and returns them as a JSON object.","title":"debug_traceBadBlock"},{"location":"JSON-RPC-API/modules/debug/#params-2_12","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_40","text":"txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_40","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBadBlock\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBadBlock\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceBadBlock ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * API ) TraceBadBlock ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // TraceBadBlock returns the structured logs created during the execution of // EVM against a block pulled from the pool of bad ones and returns them as a JSON // object. ] * txTraceResult , error ) { block := rawdb . ReadBadBlock ( api . backend . ChainDb (), hash ) if block == nil { return nil , fmt . Errorf ( \"bad block %#x not found\" , hash ) } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_traceblock","text":"TraceBlock returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"debug_traceBlock"},{"location":"JSON-RPC-API/modules/debug/#params-2_13","text":"Parameters must be given by position . 1: blob hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_41","text":"txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_41","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlock\", \"params\": [<blob>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlock\", \"params\": [<blob>, <config>]}' Javascript Console 1 debug . traceBlock ( blob , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlock ( ctx context . Context , blob hexutil . Bytes , config * TraceConfig ) ([ // TraceBlock returns the structured logs created during the execution of EVM // and returns them as a JSON object. ] * txTraceResult , error ) { block := new ( types . Block ) if err := rlp . Decode ( bytes . NewReader ( blob ), block ); err != nil { return nil , fmt . Errorf ( \"could not decode block: %v\" , err ) } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_traceblockbyhash","text":"TraceBlockByHash returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"debug_traceBlockByHash"},{"location":"JSON-RPC-API/modules/debug/#params-2_14","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_42","text":"txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_42","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockByHash\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockByHash\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceBlockByHash ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockByHash ( ctx context . Context , hash common . Hash , config * TraceConfig ) ([ // TraceBlockByHash returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { block , err := api . blockByHash ( ctx , hash ) if err != nil { return nil , err } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_traceblockbynumber","text":"TraceBlockByNumber returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"debug_traceBlockByNumber"},{"location":"JSON-RPC-API/modules/debug/#params-2_15","text":"Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_43","text":"txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_43","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockByNumber\", \"params\": [<number>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockByNumber\", \"params\": [<number>, <config>]}' Javascript Console 1 debug . traceBlockByNumber ( number , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockByNumber ( ctx context . Context , number rpc . BlockNumber , config * TraceConfig ) ([ // TraceBlockByNumber returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { block , err := api . blockByNumber ( ctx , number ) if err != nil { return nil , err } return api . traceBlock ( ctx , block , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_traceblockfromfile","text":"TraceBlockFromFile returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"debug_traceBlockFromFile"},{"location":"JSON-RPC-API/modules/debug/#params-2_16","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_44","text":"txTraceResult []*txTraceResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - items: - additionalProperties: `false` - properties: - error: - type: `string` - result: - additionalProperties: `true` - txHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"error\": { \"type\": \"string\" }, \"result\": { \"additionalProperties\": true }, \"txHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_44","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceBlockFromFile\", \"params\": [<file>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceBlockFromFile\", \"params\": [<file>, <config>]}' Javascript Console 1 debug . traceBlockFromFile ( file , config ); Source code 1 2 3 4 5 6 7 8 9 func ( api * API ) TraceBlockFromFile ( ctx context . Context , file string , config * TraceConfig ) ([ // TraceBlockFromFile returns the structured logs created during the execution of // EVM and returns them as a JSON object. ] * txTraceResult , error ) { blob , err := os . ReadFile ( file ) if err != nil { return nil , fmt . Errorf ( \"could not read file: %v\" , err ) } return api . TraceBlock ( ctx , blob , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_tracecall","text":"TraceCall lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object.","title":"debug_traceCall"},{"location":"JSON-RPC-API/modules/debug/#params-3","text":"Parameters must be given by position . 1: args ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/debug/#result_45","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_45","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceCall\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceCall\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Javascript Console 1 debug . traceCall ( args , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * API ) TraceCall ( ctx context . Context , args ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { var ( err error block * types . Block ) if hash , ok := blockNrOrHash . Hash (); ok { block , err = api . blockByHash ( ctx , hash ) } else if number , ok := blockNrOrHash . Number (); ok { if number == rpc . PendingBlockNumber { return nil , errors . New ( \"tracing on top of pending is not supported\" ) } block , err = api . blockByNumber ( ctx , number ) } else { return nil , errors . New ( \"invalid arguments; neither block nor hash specified\" ) } if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , block , reexec , nil , true , false ) if err != nil { return nil , err } defer release () vmctx := core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) if config != nil { if err := config . StateOverrides . Apply ( statedb ); err != nil { return nil , err } config . BlockOverrides . Apply ( & vmctx ) } msg , err := args . ToMessage ( api . backend . RPCGasCap (), block . BaseFee ()) if err != nil { return nil , err } traceConfig := getTraceConfigFromTraceCallConfig ( config ) return api . traceTx ( ctx , msg , new ( Context ), vmctx , statedb , traceConfig ) } // TraceCall lets you trace a given eth_call. It collects the structured logs // created during the execution of EVM if the given transaction was added on // top of the provided block and returns them as a JSON object. // Try to retrieve the specified block View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_tracecallmany","text":"TraceCallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block.","title":"debug_traceCallMany"},{"location":"JSON-RPC-API/modules/debug/#params-3_1","text":"Parameters must be given by position . 1: txs []ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/debug/#result_46","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_46","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceCallMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceCallMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Javascript Console 1 debug . traceCallMany ( txs , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 func ( api * API ) TraceCallMany ( ctx context . Context , txs [ // TraceCallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. ] ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { var ( err error block * types . Block ) if hash , ok := blockNrOrHash . Hash (); ok { block , err = api . blockByHash ( ctx , hash ) } else if number , ok := blockNrOrHash . Number (); ok { block , err = api . blockByNumber ( ctx , number ) } else { return nil , errors . New ( \"invalid arguments; neither block nor hash specified\" ) } if err != nil { return nil , err } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } statedb , release , err := api . backend . StateAtBlock ( ctx , block , reexec , nil , true , false ) if err != nil { return nil , err } defer release () if config != nil { if err := config . StateOverrides . Apply ( statedb ); err != nil { return nil , err } } traceConfig := getTraceConfigFromTraceCallConfig ( config ) var results = make ([ // Try to retrieve the specified block ] interface {}, len ( txs )) for idx , args := range txs { msg , err := args . ToMessage ( api . backend . RPCGasCap (), block . BaseFee ()) if err != nil { results [ idx ] = & txTraceResult { Error : err . Error ()} continue } vmctx := core . NewEVMBlockContext ( block . Header (), api . chainContext ( ctx ), nil ) res , err := api . traceTx ( ctx , msg , new ( Context ), vmctx , statedb , traceConfig ) if err != nil { results [ idx ] = & txTraceResult { Error : err . Error ()} continue } res , err = decorateResponse ( res , traceConfig ) if err != nil { return nil , fmt . Errorf ( \"failed to decorate response for transaction at index %d with error %v\" , idx , err ) } results [ idx ] = res } return results , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_tracechain","text":"TraceChain returns the structured logs created during the execution of EVM between two blocks (excluding start) and returns them as a JSON object.","title":"debug_traceChain"},{"location":"JSON-RPC-API/modules/debug/#params-3_2","text":"Parameters must be given by position . 1: start rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: end rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 3: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/debug/#result_47","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_47","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_subscribe\", \"params\": [\"traceChain\", <start>, <end>, <config>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) TraceChain ( ctx context . Context , start , end rpc . BlockNumber , config * TraceConfig ) ( * rpc . Subscription , error ) { from , err := api . blockByNumber ( ctx , start ) if err != nil { return nil , err } to , err := api . blockByNumber ( ctx , end ) if err != nil { return nil , err } if from . Number (). Cmp ( to . Number ()) >= 0 { return nil , fmt . Errorf ( \"end block (#%d) needs to come after start block (#%d)\" , end , start ) } notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } sub := notifier . CreateSubscription () resCh := api . traceChain ( from , to , config , notifier . Closed ()) go func () { for result := // TraceChain returns the structured logs created during the execution of EVM // between two blocks (excluding start) and returns them as a JSON object. range resCh { notifier . Notify ( sub . ID , result ) } }() return sub , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_tracetransaction","text":"TraceTransaction returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"debug_traceTransaction"},{"location":"JSON-RPC-API/modules/debug/#params-2_17","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/debug/#result_48","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_48","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_traceTransaction\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_traceTransaction\", \"params\": [<hash>, <config>]}' Javascript Console 1 debug . traceTransaction ( hash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func ( api * API ) TraceTransaction ( ctx context . Context , hash common . Hash , config * TraceConfig ) ( interface {}, error ) { tx , blockHash , blockNumber , index , err := api . backend . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { return nil , errTxNotFound } if blockNumber == 0 { return nil , errors . New ( \"genesis is not traceable\" ) } reexec := defaultTraceReexec if config != nil && config . Reexec != nil { reexec = * config . Reexec } block , err := api . blockByNumberAndHash ( ctx , rpc . BlockNumber ( blockNumber ), blockHash ) if err != nil { return nil , err } msg , vmctx , statedb , release , err := api . backend . StateAtTransaction ( ctx , block , int ( index ), reexec ) if err != nil { return nil , err } defer release () txctx := & Context { BlockHash : blockHash , BlockNumber : block . Number (), TxIndex : int ( index ), TxHash : hash } return api . traceTx ( ctx , msg , txctx , vmctx , statedb , config ) } // TraceTransaction returns the structured logs created during the execution of EVM // and returns them as a JSON object. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_unsubscribe","text":"Unsubscribe terminates an existing subscription by ID.","title":"debug_unsubscribe"},{"location":"JSON-RPC-API/modules/debug/#params-1_18","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_49","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_49","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 debug . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCDebugSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_verbosity","text":"Verbosity sets the log verbosity ceiling. The verbosity of individual packages and source files can be raised using Vmodule.","title":"debug_verbosity"},{"location":"JSON-RPC-API/modules/debug/#params-1_19","text":"Parameters must be given by position . 1: level int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_50","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_50","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_verbosity\", \"params\": [<level>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_verbosity\", \"params\": [<level>]}' Javascript Console 1 debug . verbosity ( level ); Source code 1 2 3 4 func ( * HandlerT ) Verbosity ( level int ) { glogger . Verbosity ( log . Lvl ( level )) } // Verbosity sets the log verbosity ceiling. The verbosity of individual packages // and source files can be raised using Vmodule. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_vmodule","text":"Vmodule sets the log verbosity pattern. See package log for details on the pattern syntax.","title":"debug_vmodule"},{"location":"JSON-RPC-API/modules/debug/#params-1_20","text":"Parameters must be given by position . 1: pattern string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_51","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_51","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_vmodule\", \"params\": [<pattern>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_vmodule\", \"params\": [<pattern>]}' Javascript Console 1 debug . vmodule ( pattern ); Source code 1 2 3 4 func ( * HandlerT ) Vmodule ( pattern string ) error { return glogger . Vmodule ( pattern ) } // Vmodule sets the log verbosity pattern. See package log for details on the // pattern syntax. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_writeblockprofile","text":"WriteBlockProfile writes a goroutine blocking profile to the given file.","title":"debug_writeBlockProfile"},{"location":"JSON-RPC-API/modules/debug/#params-1_21","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_52","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_52","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeBlockProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeBlockProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeBlockProfile ( file ); Source code 1 2 3 func ( * HandlerT ) WriteBlockProfile ( file string ) error { return writeProfile ( \"block\" , file ) } // WriteBlockProfile writes a goroutine blocking profile to the given file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_writememprofile","text":"WriteMemProfile writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line.","title":"debug_writeMemProfile"},{"location":"JSON-RPC-API/modules/debug/#params-1_22","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_53","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_53","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeMemProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeMemProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeMemProfile ( file ); Source code 1 2 3 4 5 func ( * HandlerT ) WriteMemProfile ( file string ) error { return writeProfile ( \"heap\" , file ) } // WriteMemProfile writes an allocation profile to the given file. // Note that the profiling rate cannot be set through the API, // it must be set on the command line. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/debug/#debug_writemutexprofile","text":"WriteMutexProfile writes a goroutine blocking profile to the given file.","title":"debug_writeMutexProfile"},{"location":"JSON-RPC-API/modules/debug/#params-1_23","text":"Parameters must be given by position . 1: file string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/debug/#result_54","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/debug/#client-method-invocation-examples_54","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"debug_writeMutexProfile\", \"params\": [<file>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_writeMutexProfile\", \"params\": [<file>]}' Javascript Console 1 debug . writeMutexProfile ( file ); Source code 1 2 3 func ( * HandlerT ) WriteMutexProfile ( file string ) error { return writeProfile ( \"mutex\" , file ) } // WriteMutexProfile writes a goroutine blocking profile to the given file. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 eth_accounts \u00b6 Accounts returns the collection of accounts this node manages. Params (0) \u00b6 None Result \u00b6 commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_accounts\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_accounts\", \"params\": []}' Javascript Console 1 eth . accounts (); Source code 1 2 3 4 func ( s * EthereumAccountAPI ) Accounts () [ // Accounts returns the collection of accounts this node manages. ] common . Address { return s . am . Accounts () } View on GitHub \u2192 eth_blockNumber \u00b6 BlockNumber returns the block number of the chain head. Params (0) \u00b6 None Result \u00b6 hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_blockNumber\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_blockNumber\", \"params\": []}' Javascript Console 1 eth . blockNumber (); Source code 1 2 3 4 func ( s * BlockChainAPI ) BlockNumber () hexutil . Uint64 { header , _ := s . b . HeaderByNumber ( context . Background (), rpc . LatestBlockNumber ) return hexutil . Uint64 ( header . Number . Uint64 ()) } // BlockNumber returns the block number of the chain head. View on GitHub \u2192 eth_call \u00b6 Call executes the given transaction on the state for the given block number. Additionally, the caller can specify a batch of contract for fields overriding. Note, this function doesn\u2019t make and changes in the state/blockchain and is useful to execute and retrieve values. Params (4) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: overrides *StateOverride Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } 4: blockOverrides *BlockOverrides Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_call\", \"params\": [<args>, <blockNrOrHash>, <overrides>, <blockOverrides>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_call\", \"params\": [<args>, <blockNrOrHash>, <overrides>, <blockOverrides>]}' Javascript Console 1 eth . call ( args , blockNrOrHash , overrides , blockOverrides ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) Call ( ctx context . Context , args TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , overrides * StateOverride , blockOverrides * BlockOverrides ) ( hexutil . Bytes , error ) { result , err := DoCall ( ctx , s . b , args , blockNrOrHash , overrides , blockOverrides , s . b . RPCEVMTimeout (), s . b . RPCGasCap ()) if err != nil { return nil , err } if len ( result . Revert ()) > 0 { return nil , newRevertError ( result ) } return result . Return (), result . Err } // Call executes the given transaction on the state for the given block number. // // Additionally, the caller can specify a batch of contract for fields overriding. // // Note, this function doesn't make and changes in the state/blockchain and is // useful to execute and retrieve values. View on GitHub \u2192 eth_chainId \u00b6 ChainId is the EIP-155 replay-protection chain id for the current Ethereum chain config. Note, this method does not conform to EIP-695 because the configured chain ID is always returned, regardless of the current head block. We used to return an error when the chain wasn\u2019t synced up to a block where EIP-155 is enabled, but this behavior caused issues in CL clients. Params (0) \u00b6 None Result \u00b6 *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_chainId\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_chainId\", \"params\": []}' Javascript Console 1 eth . chainId (); Source code 1 2 3 4 5 6 7 8 func ( api * BlockChainAPI ) ChainId () * hexutil . Big { return ( * hexutil . Big )( api . b . ChainConfig (). GetChainID ()) } // ChainId is the EIP-155 replay-protection chain id for the current Ethereum chain config. // // Note, this method does not conform to EIP-695 because the configured chain ID is always // returned, regardless of the current head block. We used to return an error when the chain // wasn't synced up to a block where EIP-155 is enabled, but this behavior caused issues // in CL clients. View on GitHub \u2192 eth_coinbase \u00b6 Coinbase is the address that mining rewards will be sent to (alias for Etherbase). Params (0) \u00b6 None Result \u00b6 common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_coinbase\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_coinbase\", \"params\": []}' Javascript Console 1 eth . coinbase (); Source code 1 2 3 func ( api * EthereumAPI ) Coinbase () ( common . Address , error ) { return api . Etherbase () } // Coinbase is the address that mining rewards will be sent to (alias for Etherbase). View on GitHub \u2192 eth_createAccessList \u00b6 CreateAccessList creates an EIP-2930 type AccessList for the given transaction. Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state. Params (2) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash *rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 *accessListResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - error: - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"error\": { \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_createAccessList\", \"params\": [<args>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_createAccessList\", \"params\": [<args>, <blockNrOrHash>]}' Javascript Console 1 eth . createAccessList ( args , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func ( s * BlockChainAPI ) CreateAccessList ( ctx context . Context , args TransactionArgs , blockNrOrHash * rpc . BlockNumberOrHash ) ( * accessListResult , error ) { bNrOrHash := rpc . BlockNumberOrHashWithNumber ( rpc . PendingBlockNumber ) if blockNrOrHash != nil { bNrOrHash = * blockNrOrHash } acl , gasUsed , vmerr , err := AccessList ( ctx , s . b , bNrOrHash , args ) if err != nil { return nil , err } result := & accessListResult { Accesslist : & acl , GasUsed : hexutil . Uint64 ( gasUsed )} if vmerr != nil { result . Error = vmerr . Error () } return result , nil } // CreateAccessList creates an EIP-2930 type AccessList for the given transaction. // Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state. View on GitHub \u2192 eth_estimateGas \u00b6 EstimateGas returns an estimate of the amount of gas needed to execute the given transaction against the current pending block. Params (3) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash *rpc.BlockNumberOrHash Required: \u2713 Yes 3: overrides *StateOverride Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Result \u00b6 hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_estimateGas\", \"params\": [<args>, <blockNrOrHash>, <overrides>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_estimateGas\", \"params\": [<args>, <blockNrOrHash>, <overrides>]}' Javascript Console 1 eth . estimateGas ( args , blockNrOrHash , overrides ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) EstimateGas ( ctx context . Context , args TransactionArgs , blockNrOrHash * rpc . BlockNumberOrHash , overrides * StateOverride ) ( hexutil . Uint64 , error ) { bNrOrHash := rpc . BlockNumberOrHashWithNumber ( rpc . LatestBlockNumber ) if blockNrOrHash != nil { bNrOrHash = * blockNrOrHash } return DoEstimateGas ( ctx , s . b , args , bNrOrHash , overrides , s . b . RPCGasCap ()) } // EstimateGas returns an estimate of the amount of gas needed to execute the // given transaction against the current pending block. View on GitHub \u2192 eth_etherbase \u00b6 Etherbase is the address that mining rewards will be sent to. Params (0) \u00b6 None Result \u00b6 common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_etherbase\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_etherbase\", \"params\": []}' Javascript Console 1 eth . etherbase (); Source code 1 2 3 func ( api * EthereumAPI ) Etherbase () ( common . Address , error ) { return api . e . Etherbase () } // Etherbase is the address that mining rewards will be sent to. View on GitHub \u2192 eth_feeHistory \u00b6 FeeHistory returns the fee market history. Params (3) \u00b6 Parameters must be given by position . 1: blockCount math.HexOrDecimal64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: lastBlock rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 3: rewardPercentiles []float64 Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: number - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"number\" ] } ], \"type\": [ \"array\" ] } Result \u00b6 *feeHistoryResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 - additionalProperties: `false` - properties: - baseFeePerGas: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - gasUsedRatio: - items: - type: `number` - type: `array` - oldestBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - reward: - items: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"gasUsedRatio\": { \"items\": { \"type\": \"number\" }, \"type\": \"array\" }, \"oldestBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"reward\": { \"items\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_feeHistory\", \"params\": [<blockCount>, <lastBlock>, <rewardPercentiles>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_feeHistory\", \"params\": [<blockCount>, <lastBlock>, <rewardPercentiles>]}' Javascript Console 1 eth . feeHistory ( blockCount , lastBlock , rewardPercentiles ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( s * EthereumAPI ) FeeHistory ( ctx context . Context , blockCount math . HexOrDecimal64 , lastBlock rpc . BlockNumber , rewardPercentiles [ // FeeHistory returns the fee market history. ] float64 ) ( * feeHistoryResult , error ) { oldest , reward , baseFee , gasUsed , err := s . b . FeeHistory ( ctx , uint64 ( blockCount ), lastBlock , rewardPercentiles ) if err != nil { return nil , err } results := & feeHistoryResult { OldestBlock : ( * hexutil . Big )( oldest ), GasUsedRatio : gasUsed } if reward != nil { results . Reward = make ([][] * hexutil . Big , len ( reward )) for i , w := range reward { results . Reward [ i ] = make ([] * hexutil . Big , len ( w )) for j , v := range w { results . Reward [ i ][ j ] = ( * hexutil . Big )( v ) } } } if baseFee != nil { results . BaseFee = make ([] * hexutil . Big , len ( baseFee )) for i , v := range baseFee { results . BaseFee [ i ] = ( * hexutil . Big )( v ) } } return results , nil } View on GitHub \u2192 eth_fillTransaction \u00b6 FillTransaction fills the defaults (nonce, gas, gasPrice or 1559 fields) on a given unsigned transaction, and returns it to the caller for further processing (signing + broadcast). Params (1) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Result \u00b6 *SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_fillTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_fillTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . fillTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * TransactionAPI ) FillTransaction ( ctx context . Context , args TransactionArgs ) ( * SignTransactionResult , error ) { if err := args . setDefaults ( ctx , s . b ); err != nil { return nil , err } tx := args . toTransaction () data , err := tx . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , tx }, nil } // FillTransaction fills the defaults (nonce, gas, gasPrice or 1559 fields) // on a given unsigned transaction, and returns it to the caller for further // processing (signing + broadcast). View on GitHub \u2192 eth_gasPrice \u00b6 GasPrice returns a suggestion for a gas price for legacy transactions. Params (0) \u00b6 None Result \u00b6 *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_gasPrice\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_gasPrice\", \"params\": []}' Javascript Console 1 eth . gasPrice (); Source code 1 2 3 4 5 6 7 8 9 10 func ( s * EthereumAPI ) GasPrice ( ctx context . Context ) ( * hexutil . Big , error ) { tipcap , err := s . b . SuggestGasTipCap ( ctx ) if err != nil { return nil , err } if head := s . b . CurrentHeader (); head . BaseFee != nil { tipcap . Add ( tipcap , head . BaseFee ) } return ( * hexutil . Big )( tipcap ), err } // GasPrice returns a suggestion for a gas price for legacy transactions. View on GitHub \u2192 eth_getBalance \u00b6 GetBalance returns the amount of wei for the given address in the state of the given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed. Params (2) \u00b6 Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBalance\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBalance\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getBalance ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 func ( s * BlockChainAPI ) GetBalance ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( * hexutil . Big , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } return ( * hexutil . Big )( state . GetBalance ( address )), state . Error () } // GetBalance returns the amount of wei for the given address in the state of the // given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta // block numbers are also allowed. View on GitHub \u2192 eth_getBlockByHash \u00b6 GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: fullTx bool Required: \u2713 Yes Result \u00b6 *RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockByHash\", \"params\": [<hash>, <fullTx>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByHash\", \"params\": [<hash>, <fullTx>]}' Javascript Console 1 eth . getBlockByHash ( hash , fullTx ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) GetBlockByHash ( ctx context . Context , hash common . Hash , fullTx bool ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByHash ( ctx , hash ) if block != nil { return s . rpcMarshalBlock ( ctx , block , true , fullTx ) } return nil , err } // GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full // detail, otherwise only the transaction hash is returned. View on GitHub \u2192 eth_getBlockByNumber \u00b6 GetBlockByNumber returns the requested canonical block. - When blockNr is -1 the chain pending block is returned. - When blockNr is -2 the chain latest block is returned. - When blockNr is -3 the chain finalized block is returned. - When blockNr is -4 the chain safe block is returned. - When fullTx is true all transactions in the block are returned, otherwise only the transaction hash is returned. Params (2) \u00b6 Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: fullTx bool Required: \u2713 Yes Result \u00b6 *RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockByNumber\", \"params\": [<number>, <fullTx>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByNumber\", \"params\": [<number>, <fullTx>]}' Javascript Console 1 eth . getBlockByNumber ( number , fullTx ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * BlockChainAPI ) GetBlockByNumber ( ctx context . Context , number rpc . BlockNumber , fullTx bool ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByNumber ( ctx , number ) if block != nil && err == nil { response , err := s . rpcMarshalBlock ( ctx , block , true , fullTx ) if err == nil && number == rpc . PendingBlockNumber { response . setAsPending () } return response , err } return nil , err } // GetBlockByNumber returns the requested canonical block. // - When blockNr is -1 the chain pending block is returned. // - When blockNr is -2 the chain latest block is returned. // - When blockNr is -3 the chain finalized block is returned. // - When blockNr is -4 the chain safe block is returned. // - When fullTx is true all transactions in the block are returned, otherwise // only the transaction hash is returned. View on GitHub \u2192 eth_getBlockTransactionCountByHash \u00b6 GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash. Params (1) \u00b6 Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 *hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockTransactionCountByHash\", \"params\": [<blockHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockTransactionCountByHash\", \"params\": [<blockHash>]}' Javascript Console 1 eth . getBlockTransactionCountByHash ( blockHash ); Source code 1 2 3 4 5 6 7 func ( s * TransactionAPI ) GetBlockTransactionCountByHash ( ctx context . Context , blockHash common . Hash ) * hexutil . Uint { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { n := hexutil . Uint ( len ( block . Transactions ())) return & n } return nil } // GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash. View on GitHub \u2192 eth_getBlockTransactionCountByNumber \u00b6 GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number. Params (1) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 *hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockTransactionCountByNumber\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockTransactionCountByNumber\", \"params\": [<blockNr>]}' Javascript Console 1 eth . getBlockTransactionCountByNumber ( blockNr ); Source code 1 2 3 4 5 6 7 func ( s * TransactionAPI ) GetBlockTransactionCountByNumber ( ctx context . Context , blockNr rpc . BlockNumber ) * hexutil . Uint { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { n := hexutil . Uint ( len ( block . Transactions ())) return & n } return nil } // GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number. View on GitHub \u2192 eth_getCode \u00b6 GetCode returns the code stored at the given address in the state for the given block number. Params (2) \u00b6 Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getCode\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getCode\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getCode ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) GetCode ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } code := state . GetCode ( address ) return code , state . Error () } // GetCode returns the code stored at the given address in the state for the given block number. View on GitHub \u2192 eth_getFilterChanges \u00b6 GetFilterChanges returns the logs for the filter with the given id since last time it was called. This can be used for polling. For pending transaction and block filters the result is []common.Hash. (pending)Log filters return []Log. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getFilterChanges\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getFilterChanges\", \"params\": [<id>]}' Javascript Console 1 eth . getFilterChanges ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * FilterAPI ) GetFilterChanges ( id rpc . ID ) ( interface {}, error ) { api . filtersMu . Lock () defer api . filtersMu . Unlock () chainConfig := api . sys . backend . ChainConfig () latest := api . sys . backend . CurrentHeader () if f , found := api . filters [ id ]; found { if ! f . deadline . Stop () { <- f . deadline . C } f . deadline . Reset ( api . timeout ) switch f . typ { case BlocksSubscription , SideBlocksSubscription : hashes := f . hashes f . hashes = nil return returnHashes ( hashes ), nil case PendingTransactionsSubscription : if f . fullTx { txs := make ([ // GetFilterChanges returns the logs for the filter with the given id since // last time it was called. This can be used for polling. // // For pending transaction and block filters the result is []common.Hash. // (pending)Log filters return []Log. ] * ethapi . RPCTransaction , 0 , len ( f . txs )) for _ , tx := range f . txs { txs = append ( txs , ethapi . NewRPCPendingTransaction ( tx , latest , chainConfig )) } f . txs = nil return txs , nil } else { hashes := make ([] common . Hash , 0 , len ( f . txs )) for _ , tx := range f . txs { hashes = append ( hashes , tx . Hash ()) } f . txs = nil return hashes , nil } case LogsSubscription , MinedAndPendingLogsSubscription : logs := f . logs f . logs = nil return returnLogs ( logs ), nil } } return [] interface {}{}, errFilterNotFound } View on GitHub \u2192 eth_getFilterLogs \u00b6 GetFilterLogs returns the logs for the filter with the given id. If the filter could not be found an empty array of logs is returned. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 typesLog []*types.Log Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - logIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - removed: - type: `boolean` - topics: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - transactionHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"logIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"removed\": { \"type\": \"boolean\" }, \"topics\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"transactionHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getFilterLogs\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getFilterLogs\", \"params\": [<id>]}' Javascript Console 1 eth . getFilterLogs ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) GetFilterLogs ( ctx context . Context , id rpc . ID ) ([ // GetFilterLogs returns the logs for the filter with the given id. // If the filter could not be found an empty array of logs is returned. ] * types . Log , error ) { api . filtersMu . Lock () f , found := api . filters [ id ] api . filtersMu . Unlock () if ! found || f . typ != LogsSubscription { return nil , errFilterNotFound } var filter * Filter if f . crit . BlockHash != nil { filter = api . sys . NewBlockFilter ( * f . crit . BlockHash , f . crit . Addresses , f . crit . Topics ) } else { begin := rpc . LatestBlockNumber . Int64 () if f . crit . FromBlock != nil { begin = f . crit . FromBlock . Int64 () } end := rpc . LatestBlockNumber . Int64 () if f . crit . ToBlock != nil { end = f . crit . ToBlock . Int64 () } filter = api . sys . NewRangeFilter ( begin , end , f . crit . Addresses , f . crit . Topics ) } logs , err := filter . Logs ( ctx ) if err != nil { return nil , err } return returnLogs ( logs ), nil } View on GitHub \u2192 eth_getHashrate \u00b6 GetHashrate returns the current hashrate for local CPU miner and remote miner. Params (0) \u00b6 None Result \u00b6 uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHashrate\", \"params\": []}' Javascript Console 1 eth . getHashrate (); Source code 1 2 3 func ( api * API ) GetHashrate () uint64 { return uint64 ( api . ethash . Hashrate ()) } // GetHashrate returns the current hashrate for local CPU miner and remote miner. View on GitHub \u2192 eth_getHeaderByHash \u00b6 GetHeaderByHash returns the requested header by hash. Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 *RPCMarshalHeaderT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHeaderByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHeaderByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getHeaderByHash ( hash ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetHeaderByHash ( ctx context . Context , hash common . Hash ) * RPCMarshalHeaderT { header , _ := s . b . HeaderByHash ( ctx , hash ) if header != nil { return s . rpcMarshalHeader ( ctx , header ) } return nil } // GetHeaderByHash returns the requested header by hash. View on GitHub \u2192 eth_getHeaderByNumber \u00b6 GetHeaderByNumber returns the requested canonical block header. - When blockNr is -1 the chain pending header is returned. - When blockNr is -2 the chain latest header is returned. - When blockNr is -3 the chain finalized header is returned. - When blockNr is -4 the chain safe header is returned. Params (1) \u00b6 Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 *RPCMarshalHeaderT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHeaderByNumber\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHeaderByNumber\", \"params\": [<number>]}' Javascript Console 1 eth . getHeaderByNumber ( number ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) GetHeaderByNumber ( ctx context . Context , number rpc . BlockNumber ) ( * RPCMarshalHeaderT , error ) { header , err := s . b . HeaderByNumber ( ctx , number ) if header != nil && err == nil { response := s . rpcMarshalHeader ( ctx , header ) if number == rpc . PendingBlockNumber { response . setAsPending () } return response , err } return nil , err } // GetHeaderByNumber returns the requested canonical block header. // - When blockNr is -1 the chain pending header is returned. // - When blockNr is -2 the chain latest header is returned. // - When blockNr is -3 the chain finalized header is returned. // - When blockNr is -4 the chain safe header is returned. View on GitHub \u2192 eth_getLogs \u00b6 GetLogs returns logs matching the given argument that are stored within the state. Params (1) \u00b6 Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] } Result \u00b6 typesLog []*types.Log Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - logIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - removed: - type: `boolean` - topics: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - transactionHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"logIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"removed\": { \"type\": \"boolean\" }, \"topics\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"transactionHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getLogs\", \"params\": [<crit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getLogs\", \"params\": [<crit>]}' Javascript Console 1 eth . getLogs ( crit ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( api * FilterAPI ) GetLogs ( ctx context . Context , crit FilterCriteria ) ([ // GetLogs returns logs matching the given argument that are stored within the state. ] * types . Log , error ) { var filter * Filter if crit . BlockHash != nil { filter = api . sys . NewBlockFilter ( * crit . BlockHash , crit . Addresses , crit . Topics ) } else { begin := rpc . LatestBlockNumber . Int64 () if crit . FromBlock != nil { begin = crit . FromBlock . Int64 () } end := rpc . LatestBlockNumber . Int64 () if crit . ToBlock != nil { end = crit . ToBlock . Int64 () } filter = api . sys . NewRangeFilter ( begin , end , crit . Addresses , crit . Topics ) } logs , err := filter . Logs ( ctx ) if err != nil { return nil , err } return returnLogs ( logs ), err } View on GitHub \u2192 eth_getProof \u00b6 GetProof returns the Merkle-proof for a given account and optionally some storage keys. Params (3) \u00b6 Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: storageKeys []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } 3: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 *AccountResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 - additionalProperties: `false` - properties: - accountProof: - items: - type: `string` - type: `array` - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - codeHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - storageHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageProof: - items: - additionalProperties: `false` - properties: - key: - type: `string` - proof: - items: - type: `string` - type: `array` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"additionalProperties\": false, \"properties\": { \"accountProof\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"storageHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageProof\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"key\": { \"type\": \"string\" }, \"proof\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getProof\", \"params\": [<address>, <storageKeys>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getProof\", \"params\": [<address>, <storageKeys>, <blockNrOrHash>]}' Javascript Console 1 eth . getProof ( address , storageKeys , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 func ( s * BlockChainAPI ) GetProof ( ctx context . Context , address common . Address , storageKeys [ // GetProof returns the Merkle-proof for a given account and optionally some storage keys. ] string , blockNrOrHash rpc . BlockNumberOrHash ) ( * AccountResult , error ) { var ( keys = make ([] common . Hash , len ( storageKeys )) keyLengths = make ([] int , len ( storageKeys )) storageProof = make ([] StorageResult , len ( storageKeys )) storageTrie state . Trie storageHash = types . EmptyRootHash codeHash = types . EmptyCodeHash ) for i , hexKey := range storageKeys { var err error keys [ i ], keyLengths [ i ], err = decodeHash ( hexKey ) if err != nil { return nil , err } } state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } if storageTrie , err = state . StorageTrie ( address ); err != nil { return nil , err } if storageTrie != nil { storageHash = storageTrie . Hash () codeHash = state . GetCodeHash ( address ) } for i , key := range keys { var outputKey string if keyLengths [ i ] != 32 { outputKey = hexutil . EncodeBig ( key . Big ()) } else { outputKey = hexutil . Encode ( key [ // Output key encoding is a bit special: if the input was a 32-byte hash, it is // returned as such. Otherwise, we apply the QUANTITY encoding mandated by the // JSON-RPC spec for getProof. This behavior exists to preserve backwards // compatibility with older client versions. :]) } if storageTrie == nil { storageProof [ i ] = StorageResult { outputKey , & hexutil . Big {}, [] string {}} continue } var proof proofList if err := storageTrie . Prove ( crypto . Keccak256 ( key . Bytes ()), & proof ); err != nil { return nil , err } value := ( * hexutil . Big )( state . GetState ( address , key ). Big ()) storageProof [ i ] = StorageResult { outputKey , value , proof } } accountProof , proofErr := state . GetProof ( address ) if proofErr != nil { return nil , proofErr } return & AccountResult { Address : address , AccountProof : toHexSlice ( accountProof ), Balance : ( * hexutil . Big )( state . GetBalance ( address )), CodeHash : codeHash , Nonce : hexutil . Uint64 ( state . GetNonce ( address )), StorageHash : storageHash , StorageProof : storageProof }, state . Error () } View on GitHub \u2192 eth_getRawTransactionByBlockHashAndIndex \u00b6 GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index. Params (2) \u00b6 Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getRawTransactionByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetRawTransactionByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) hexutil . Bytes { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { return newRPCRawTransactionFromBlockIndex ( block , uint64 ( index )) } return nil } // GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index. View on GitHub \u2192 eth_getRawTransactionByBlockNumberAndIndex \u00b6 GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index. Params (2) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getRawTransactionByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetRawTransactionByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) hexutil . Bytes { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { return newRPCRawTransactionFromBlockIndex ( block , uint64 ( index )) } return nil } // GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index. View on GitHub \u2192 eth_getRawTransactionByHash \u00b6 GetRawTransactionByHash returns the bytes of the transaction for the given hash. Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getRawTransactionByHash ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * TransactionAPI ) GetRawTransactionByHash ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { tx , _ , _ , _ , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { if tx = s . b . GetPoolTransaction ( hash ); tx == nil { return nil , nil } } return tx . MarshalBinary () } // GetRawTransactionByHash returns the bytes of the transaction for the given hash. View on GitHub \u2192 eth_getStorageAt \u00b6 GetStorageAt returns the storage from the state at the given address, key and block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed. Params (3) \u00b6 Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: hexKey string Required: \u2713 Yes 3: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getStorageAt\", \"params\": [<address>, <hexKey>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getStorageAt\", \"params\": [<address>, <hexKey>, <blockNrOrHash>]}' Javascript Console 1 eth . getStorageAt ( address , hexKey , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) GetStorageAt ( ctx context . Context , address common . Address , hexKey string , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } key , _ , err := decodeHash ( hexKey ) if err != nil { return nil , fmt . Errorf ( \"unable to decode storage key: %s\" , err ) } res := state . GetState ( address , key ) return res [ // GetStorageAt returns the storage from the state at the given address, key and // block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block // numbers are also allowed. :], state . Error () } View on GitHub \u2192 eth_getTransactionByBlockHashAndIndex \u00b6 GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index. Params (2) \u00b6 Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 *RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getTransactionByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetTransactionByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) * RPCTransaction { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { return newRPCTransactionFromBlockIndex ( block , uint64 ( index ), s . b . ChainConfig ()) } return nil } // GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index. View on GitHub \u2192 eth_getTransactionByBlockNumberAndIndex \u00b6 GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index. Params (2) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 *RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getTransactionByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetTransactionByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) * RPCTransaction { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { return newRPCTransactionFromBlockIndex ( block , uint64 ( index ), s . b . ChainConfig ()) } return nil } // GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index. View on GitHub \u2192 eth_getTransactionByHash \u00b6 GetTransactionByHash returns the transaction for the given hash Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 *RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getTransactionByHash ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * TransactionAPI ) GetTransactionByHash ( ctx context . Context , hash common . Hash ) ( * RPCTransaction , error ) { tx , blockHash , blockNumber , index , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx != nil { header , err := s . b . HeaderByHash ( ctx , blockHash ) if err != nil { return nil , err } return newRPCTransaction ( tx , blockHash , blockNumber , header . Time , index , header . BaseFee , s . b . ChainConfig ()), nil } if tx := s . b . GetPoolTransaction ( hash ); tx != nil { return NewRPCPendingTransaction ( tx , s . b . CurrentHeader (), s . b . ChainConfig ()), nil } return nil , nil } // GetTransactionByHash returns the transaction for the given hash View on GitHub \u2192 eth_getTransactionCount \u00b6 GetTransactionCount returns the number of transactions the given address has sent for the given block number Params (2) \u00b6 Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes Result \u00b6 *hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionCount\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionCount\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getTransactionCount ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * TransactionAPI ) GetTransactionCount ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( * hexutil . Uint64 , error ) { if blockNr , ok := blockNrOrHash . Number (); ok && blockNr == rpc . PendingBlockNumber { nonce , err := s . b . GetPoolNonce ( ctx , address ) if err != nil { return nil , err } return ( * hexutil . Uint64 )( & nonce ), nil } state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } nonce := state . GetNonce ( address ) return ( * hexutil . Uint64 )( & nonce ), state . Error () } // GetTransactionCount returns the number of transactions the given address has sent for the given block number View on GitHub \u2192 eth_getTransactionReceipt \u00b6 GetTransactionReceipt returns the transaction receipt for the given transaction hash. Params (1) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 mapstringinterface map[string]interface{} Required: \u2713 Yes Schema 1 2 3 4 5 6 - patternProperties: - .*: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 { \"patternProperties\": { \".*\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionReceipt\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionReceipt\", \"params\": [<hash>]}' Javascript Console 1 eth . getTransactionReceipt ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 func ( s * TransactionAPI ) GetTransactionReceipt ( ctx context . Context , hash common . Hash ) ( map // GetTransactionReceipt returns the transaction receipt for the given transaction hash. [ string ] interface {}, error ) { tx , blockHash , blockNumber , index , err := s . b . GetTransaction ( ctx , hash ) if tx == nil || err != nil { return nil , nil } header , err := s . b . HeaderByHash ( ctx , blockHash ) if err != nil { return nil , err } receipts , err := s . b . GetReceipts ( ctx , blockHash ) if err != nil { return nil , err } if uint64 ( len ( receipts )) <= index { return nil , nil } receipt := receipts [ index ] signer := types . MakeSigner ( s . b . ChainConfig (), header . Number , header . Time ) from , _ := types . Sender ( signer , tx ) fields := map [ string ] interface {}{ \"blockHash\" : blockHash , \"blockNumber\" : hexutil . Uint64 ( blockNumber ), \"transactionHash\" : hash , \"transactionIndex\" : hexutil . Uint64 ( index ), \"from\" : from , \"to\" : tx . To (), \"gasUsed\" : hexutil . Uint64 ( receipt . GasUsed ), \"cumulativeGasUsed\" : hexutil . Uint64 ( receipt . CumulativeGasUsed ), \"contractAddress\" : nil , \"logs\" : receipt . Logs , \"logsBloom\" : receipt . Bloom , \"type\" : hexutil . Uint ( tx . Type ()), \"effectiveGasPrice\" : ( * hexutil . Big )( receipt . EffectiveGasPrice )} if len ( receipt . PostState ) > 0 { fields [ \"root\" ] = hexutil . Bytes ( receipt . PostState ) } else { fields [ \"status\" ] = hexutil . Uint ( receipt . Status ) } if receipt . Logs == nil { fields [ \"logs\" ] = [] * types . Log {} } if receipt . ContractAddress != ( common . Address {}) { fields [ \"contractAddress\" ] = receipt . ContractAddress } return fields , nil } View on GitHub \u2192 eth_getUncleByBlockHashAndIndex \u00b6 GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. Params (2) \u00b6 Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 *RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getUncleByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * BlockChainAPI ) GetUncleByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByHash ( ctx , blockHash ) if block != nil { uncles := block . Uncles () if index >= hexutil . Uint ( len ( uncles )) { log . Debug ( \"Requested uncle not found\" , \"number\" , block . Number (), \"hash\" , blockHash , \"index\" , index ) return nil , nil } block = types . NewBlockWithHeader ( uncles [ index ]) return s . rpcMarshalBlock ( ctx , block , false , false ) } return nil , err } // GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true // all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. View on GitHub \u2192 eth_getUncleByBlockNumberAndIndex \u00b6 GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. Params (2) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Result \u00b6 *RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getUncleByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * BlockChainAPI ) GetUncleByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByNumber ( ctx , blockNr ) if block != nil { uncles := block . Uncles () if index >= hexutil . Uint ( len ( uncles )) { log . Debug ( \"Requested uncle not found\" , \"number\" , blockNr , \"hash\" , block . Hash (), \"index\" , index ) return nil , nil } block = types . NewBlockWithHeader ( uncles [ index ]) return s . rpcMarshalBlock ( ctx , block , false , false ) } return nil , err } // GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true // all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. View on GitHub \u2192 eth_getUncleCountByBlockHash \u00b6 GetUncleCountByBlockHash returns number of uncles in the block for the given block hash Params (1) \u00b6 Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 *hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleCountByBlockHash\", \"params\": [<blockHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleCountByBlockHash\", \"params\": [<blockHash>]}' Javascript Console 1 eth . getUncleCountByBlockHash ( blockHash ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetUncleCountByBlockHash ( ctx context . Context , blockHash common . Hash ) * hexutil . Uint { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { n := hexutil . Uint ( len ( block . Uncles ())) return & n } return nil } // GetUncleCountByBlockHash returns number of uncles in the block for the given block hash View on GitHub \u2192 eth_getUncleCountByBlockNumber \u00b6 GetUncleCountByBlockNumber returns number of uncles in the block for the given block number Params (1) \u00b6 Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } Result \u00b6 *hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleCountByBlockNumber\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleCountByBlockNumber\", \"params\": [<blockNr>]}' Javascript Console 1 eth . getUncleCountByBlockNumber ( blockNr ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetUncleCountByBlockNumber ( ctx context . Context , blockNr rpc . BlockNumber ) * hexutil . Uint { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { n := hexutil . Uint ( len ( block . Uncles ())) return & n } return nil } // GetUncleCountByBlockNumber returns number of uncles in the block for the given block number View on GitHub \u2192 eth_getWork \u00b6 GetWork returns a work package for external miner. The work package consists of 3 strings: result [ 0 ] - 32 bytes hex encoded current block header pow - hash result [ 1 ] - 32 bytes hex encoded seed hash used for DAG result [ 2 ] - 32 bytes hex encoded boundary condition ( \"target\" ) , 2 ^ 256 / difficulty result [ 3 ] - hex encoded block number Params (0) \u00b6 None Result \u00b6 num4string [4]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - items: - type: string - maxItems: `4` - minItems: `4` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"items\": [ { \"type\": [ \"string\" ] } ], \"maxItems\": 4, \"minItems\": 4, \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getWork\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getWork\", \"params\": []}' Javascript Console 1 eth . getWork (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) GetWork () ([ 4 ] string , error ) { if api . ethash . remote == nil { return [ 4 ] string {}, errors . New ( \"not supported\" ) } var ( workCh = make ( chan [ 4 ] string , 1 ) errc = make ( chan error , 1 ) ) select { case api . ethash . remote . fetchWorkCh <- & sealWork { errc : errc , res : workCh }: case <- api . ethash . remote . exitCh : return [ 4 ] string {}, errEthashStopped } select { case work := <- workCh : return work , nil case err := <- errc : return [ 4 ] string {}, err } } // GetWork returns a work package for external miner. // // The work package consists of 3 strings: // // result[0] - 32 bytes hex encoded current block header pow-hash // result[1] - 32 bytes hex encoded seed hash used for DAG // result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty // result[3] - hex encoded block number View on GitHub \u2192 eth_hashrate \u00b6 Hashrate returns the POW hashrate. Params (0) \u00b6 None Result \u00b6 hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_hashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_hashrate\", \"params\": []}' Javascript Console 1 eth . hashrate (); Source code 1 2 3 func ( api * EthereumAPI ) Hashrate () hexutil . Uint64 { return hexutil . Uint64 ( api . e . Miner (). Hashrate ()) } // Hashrate returns the POW hashrate. View on GitHub \u2192 eth_logs \u00b6 Logs creates a subscription that fires for all new log that match the given filter criteria. Params (1) \u00b6 Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] } Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"logs\", <crit>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 func ( api * FilterAPI ) Logs ( ctx context . Context , crit FilterCriteria ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } var ( rpcSub = notifier . CreateSubscription () matchedLogs = make ( chan [ // Logs creates a subscription that fires for all new log that match the given filter criteria. ] * types . Log ) ) logsSub , err := api . events . SubscribeLogs ( ethereum . FilterQuery ( crit ), matchedLogs ) if err != nil { return nil , err } go func () { for { select { case logs := <- matchedLogs : for _ , log := range logs { log := log notifier . Notify ( rpcSub . ID , & log ) } case <- rpcSub . Err (): logsSub . Unsubscribe () return case <- notifier . Closed (): logsSub . Unsubscribe () return } } }() return rpcSub , nil } View on GitHub \u2192 eth_maxPriorityFeePerGas \u00b6 MaxPriorityFeePerGas returns a suggestion for a gas tip cap for dynamic fee transactions. Params (0) \u00b6 None Result \u00b6 *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_maxPriorityFeePerGas\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_maxPriorityFeePerGas\", \"params\": []}' Javascript Console 1 eth . maxPriorityFeePerGas (); Source code 1 2 3 4 5 6 7 func ( s * EthereumAPI ) MaxPriorityFeePerGas ( ctx context . Context ) ( * hexutil . Big , error ) { tipcap , err := s . b . SuggestGasTipCap ( ctx ) if err != nil { return nil , err } return ( * hexutil . Big )( tipcap ), err } // MaxPriorityFeePerGas returns a suggestion for a gas tip cap for dynamic fee transactions. View on GitHub \u2192 eth_mining \u00b6 Mining returns an indication if this node is currently mining. Params (0) \u00b6 None Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_mining\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_mining\", \"params\": []}' Javascript Console 1 eth . mining (); Source code 1 2 3 func ( api * EthereumAPI ) Mining () bool { return api . e . IsMining () } // Mining returns an indication if this node is currently mining. View on GitHub \u2192 eth_newBlockFilter \u00b6 NewBlockFilter creates a filter that fetches blocks that are imported into the chain. It is part of the filter package since polling goes with eth_getFilterChanges. Params (0) \u00b6 None Result \u00b6 rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newBlockFilter\", \"params\": []}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) NewBlockFilter () rpc . ID { var ( headers = make ( chan * types . Header ) headerSub = api . events . SubscribeNewHeads ( headers ) ) api . filtersMu . Lock () api . filters [ headerSub . ID ] = & filter { typ : BlocksSubscription , deadline : time . NewTimer ( api . timeout ), hashes : make ([ // NewBlockFilter creates a filter that fetches blocks that are imported into the chain. // It is part of the filter package since polling goes with eth_getFilterChanges. ] common . Hash , 0 ), s : headerSub } api . filtersMu . Unlock () go func () { for { select { case h := <- headers : api . filtersMu . Lock () if f , found := api . filters [ headerSub . ID ]; found { f . hashes = append ( f . hashes , h . Hash ()) } api . filtersMu . Unlock () case <- headerSub . Err (): api . filtersMu . Lock () delete ( api . filters , headerSub . ID ) api . filtersMu . Unlock () return } } }() return headerSub . ID } View on GitHub \u2192 eth_newFilter \u00b6 NewFilter creates a new filter and returns the filter id. It can be used to retrieve logs when the state changes. This method cannot be used to fetch logs that are already stored in the state. Default criteria for the from and to block are \u201clatest\u201d. Using \u201clatest\u201d as block number will return logs for mined blocks. Using \u201cpending\u201d as block number returns logs for not yet mined (pending) blocks. In case logs are removed (chain reorg) previously returned logs are returned again but with the removed property set to true. In case \u201cfromBlock\u201d > \u201ctoBlock\u201d an error is returned. Params (1) \u00b6 Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] } Result \u00b6 rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newFilter\", \"params\": [<crit>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 func ( api * FilterAPI ) NewFilter ( crit FilterCriteria ) ( rpc . ID , error ) { logs := make ( chan [ // NewFilter creates a new filter and returns the filter id. It can be // used to retrieve logs when the state changes. This method cannot be // used to fetch logs that are already stored in the state. // // Default criteria for the from and to block are \"latest\". // Using \"latest\" as block number will return logs for mined blocks. // Using \"pending\" as block number returns logs for not yet mined (pending) blocks. // In case logs are removed (chain reorg) previously returned logs are returned // again but with the removed property set to true. // // In case \"fromBlock\" > \"toBlock\" an error is returned. ] * types . Log ) logsSub , err := api . events . SubscribeLogs ( ethereum . FilterQuery ( crit ), logs ) if err != nil { return \"\" , err } api . filtersMu . Lock () api . filters [ logsSub . ID ] = & filter { typ : LogsSubscription , crit : crit , deadline : time . NewTimer ( api . timeout ), logs : make ([] * types . Log , 0 ), s : logsSub } api . filtersMu . Unlock () go func () { for { select { case l := <- logs : api . filtersMu . Lock () if f , found := api . filters [ logsSub . ID ]; found { f . logs = append ( f . logs , l ... ) } api . filtersMu . Unlock () case <- logsSub . Err (): api . filtersMu . Lock () delete ( api . filters , logsSub . ID ) api . filtersMu . Unlock () return } } }() return logsSub . ID , nil } View on GitHub \u2192 eth_newHeads \u00b6 NewHeads send a notification each time a new (header) block is appended to the chain. Params (0) \u00b6 None Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newHeads\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * FilterAPI ) NewHeads ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { headers := make ( chan * types . Header ) headersSub := api . events . SubscribeNewHeads ( headers ) for { select { case h := <- headers : notifier . Notify ( rpcSub . ID , h ) case <- rpcSub . Err (): headersSub . Unsubscribe () return case <- notifier . Closed (): headersSub . Unsubscribe () return } } }() return rpcSub , nil } // NewHeads send a notification each time a new (header) block is appended to the chain. View on GitHub \u2192 eth_newPendingTransactionFilter \u00b6 NewPendingTransactionFilter creates a filter that fetches pending transactions as transactions enter the pending state. It is part of the filter package because this filter can be used through the eth_getFilterChanges polling method that is also used for log filters. Params (1) \u00b6 Parameters must be given by position . 1: fullTx *bool Required: \u2713 Yes Result \u00b6 rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newPendingTransactionFilter\", \"params\": [<fullTx>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 func ( api * FilterAPI ) NewPendingTransactionFilter ( fullTx * bool ) rpc . ID { var ( pendingTxs = make ( chan [ // NewPendingTransactionFilter creates a filter that fetches pending transactions // as transactions enter the pending state. // // It is part of the filter package because this filter can be used through the // `eth_getFilterChanges` polling method that is also used for log filters. ] * types . Transaction ) pendingTxSub = api . events . SubscribePendingTxs ( pendingTxs ) ) api . filtersMu . Lock () api . filters [ pendingTxSub . ID ] = & filter { typ : PendingTransactionsSubscription , fullTx : fullTx != nil && * fullTx , deadline : time . NewTimer ( api . timeout ), txs : make ([] * types . Transaction , 0 ), s : pendingTxSub } api . filtersMu . Unlock () go func () { for { select { case pTx := <- pendingTxs : api . filtersMu . Lock () if f , found := api . filters [ pendingTxSub . ID ]; found { f . txs = append ( f . txs , pTx ... ) } api . filtersMu . Unlock () case <- pendingTxSub . Err (): api . filtersMu . Lock () delete ( api . filters , pendingTxSub . ID ) api . filtersMu . Unlock () return } } }() return pendingTxSub . ID } View on GitHub \u2192 eth_newPendingTransactions \u00b6 NewPendingTransactions creates a subscription that is triggered each time a transaction enters the transaction pool. If fullTx is true the full tx is sent to the client, otherwise the hash is sent. Params (1) \u00b6 Parameters must be given by position . 1: fullTx *bool Required: \u2713 Yes Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newPendingTransactions\", <fullTx>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( api * FilterAPI ) NewPendingTransactions ( ctx context . Context , fullTx * bool ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { txs := make ( chan [ // NewPendingTransactions creates a subscription that is triggered each time a // transaction enters the transaction pool. If fullTx is true the full tx is // sent to the client, otherwise the hash is sent. ] * types . Transaction , 128 ) pendingTxSub := api . events . SubscribePendingTxs ( txs ) chainConfig := api . sys . backend . ChainConfig () for { select { case txs := <- txs : latest := api . sys . backend . CurrentHeader () for _ , tx := range txs { if fullTx != nil && * fullTx { rpcTx := ethapi . NewRPCPendingTransaction ( tx , latest , chainConfig ) notifier . Notify ( rpcSub . ID , rpcTx ) } else { notifier . Notify ( rpcSub . ID , tx . Hash ()) } } case <- rpcSub . Err (): pendingTxSub . Unsubscribe () return case <- notifier . Closed (): pendingTxSub . Unsubscribe () return } } }() return rpcSub , nil } View on GitHub \u2192 eth_newSideBlockFilter \u00b6 NewSideBlockFilter creates a filter that fetches blocks that are imported into the chain with a non-canonical status. It is part of the filter package since polling goes with eth_getFilterChanges. Params (0) \u00b6 None Result \u00b6 rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newSideBlockFilter\", \"params\": []}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) NewSideBlockFilter () rpc . ID { var ( headers = make ( chan * types . Header ) headerSub = api . events . SubscribeNewSideHeads ( headers ) ) api . filtersMu . Lock () api . filters [ headerSub . ID ] = & filter { typ : SideBlocksSubscription , deadline : time . NewTimer ( api . timeout ), hashes : make ([ // NewSideBlockFilter creates a filter that fetches blocks that are imported into the chain with a non-canonical status. // It is part of the filter package since polling goes with eth_getFilterChanges. ] common . Hash , 0 ), s : headerSub } api . filtersMu . Unlock () go func () { for { select { case h := <- headers : api . filtersMu . Lock () if f , found := api . filters [ headerSub . ID ]; found { f . hashes = append ( f . hashes , h . Hash ()) } api . filtersMu . Unlock () case <- headerSub . Err (): api . filtersMu . Lock () delete ( api . filters , headerSub . ID ) api . filtersMu . Unlock () return } } }() return headerSub . ID } View on GitHub \u2192 eth_newSideHeads \u00b6 NewSideHeads send a notification each time a new non-canonical (header) block is written to the database. Params (0) \u00b6 None Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newSideHeads\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * FilterAPI ) NewSideHeads ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { headers := make ( chan * types . Header ) headersSub := api . events . SubscribeNewSideHeads ( headers ) for { select { case h := <- headers : notifier . Notify ( rpcSub . ID , h ) case <- rpcSub . Err (): headersSub . Unsubscribe () return case <- notifier . Closed (): headersSub . Unsubscribe () return } } }() return rpcSub , nil } // NewSideHeads send a notification each time a new non-canonical (header) block is written to the database. View on GitHub \u2192 eth_pendingTransactions \u00b6 PendingTransactions returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages. Params (0) \u00b6 None Result \u00b6 RPCTransaction []*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_pendingTransactions\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_pendingTransactions\", \"params\": []}' Javascript Console 1 eth . pendingTransactions (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( s * TransactionAPI ) PendingTransactions () ([ // PendingTransactions returns the transactions that are in the transaction pool // and have a from address that is one of the accounts this node manages. ] * RPCTransaction , error ) { pending , err := s . b . GetPoolTransactions () if err != nil { return nil , err } accounts := make ( map [ common . Address ] struct {}) for _ , wallet := range s . b . AccountManager (). Wallets () { for _ , account := range wallet . Accounts () { accounts [ account . Address ] = struct {}{} } } curHeader := s . b . CurrentHeader () transactions := make ([] * RPCTransaction , 0 , len ( pending )) for _ , tx := range pending { from , _ := types . Sender ( s . signer , tx ) if _ , exists := accounts [ from ]; exists { transactions = append ( transactions , NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ())) } } return transactions , nil } View on GitHub \u2192 eth_resend \u00b6 Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit. Params (3) \u00b6 Parameters must be given by position . 1: sendArgs TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: gasPrice *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: gasLimit *hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Result \u00b6 common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_resend\", \"params\": [<sendArgs>, <gasPrice>, <gasLimit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_resend\", \"params\": [<sendArgs>, <gasPrice>, <gasLimit>]}' Javascript Console 1 eth . resend ( sendArgs , gasPrice , gasLimit ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 func ( s * TransactionAPI ) Resend ( ctx context . Context , sendArgs TransactionArgs , gasPrice * hexutil . Big , gasLimit * hexutil . Uint64 ) ( common . Hash , error ) { if sendArgs . Nonce == nil { return common . Hash {}, errors . New ( \"missing transaction nonce in transaction spec\" ) } if err := sendArgs . setDefaults ( ctx , s . b ); err != nil { return common . Hash {}, err } matchTx := sendArgs . toTransaction () var price = matchTx . GasPrice () if gasPrice != nil { price = gasPrice . ToInt () } var gas = matchTx . Gas () if gasLimit != nil { gas = uint64 ( * gasLimit ) } if err := checkTxFee ( price , gas , s . b . RPCTxFeeCap ()); err != nil { return common . Hash {}, err } pending , err := s . b . GetPoolTransactions () if err != nil { return common . Hash {}, err } for _ , p := // Resend accepts an existing transaction and a new gas price and limit. It will remove // the given transaction from the pool and reinsert it with the new gas price and limit. // Before replacing the old transaction, ensure the _new_ transaction fee is reasonable. range pending { wantSigHash := s . signer . Hash ( matchTx ) pFrom , err := types . Sender ( s . signer , p ) if err == nil && pFrom == sendArgs . from () && s . signer . Hash ( p ) == wantSigHash { if gasPrice != nil && ( * big . Int )( gasPrice ). Sign () != 0 { sendArgs . GasPrice = gasPrice } if gasLimit != nil && * gasLimit != 0 { sendArgs . Gas = gasLimit } signedTx , err := s . sign ( sendArgs . from (), sendArgs . toTransaction ()) if err != nil { return common . Hash {}, err } if err = s . b . SendTx ( ctx , signedTx ); err != nil { return common . Hash {}, err } return signedTx . Hash (), nil } } return common . Hash {}, fmt . Errorf ( \"transaction %#x not found\" , matchTx . Hash ()) } View on GitHub \u2192 eth_sendRawTransaction \u00b6 SendRawTransaction will add the signed transaction to the transaction pool. The sender is responsible for signing the transaction and using the correct nonce. Params (1) \u00b6 Parameters must be given by position . 1: input hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Result \u00b6 common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sendRawTransaction\", \"params\": [<input>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sendRawTransaction\", \"params\": [<input>]}' Javascript Console 1 eth . sendRawTransaction ( input ); Source code 1 2 3 4 5 6 7 8 func ( s * TransactionAPI ) SendRawTransaction ( ctx context . Context , input hexutil . Bytes ) ( common . Hash , error ) { tx := new ( types . Transaction ) if err := tx . UnmarshalBinary ( input ); err != nil { return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , tx ) } // SendRawTransaction will add the signed transaction to the transaction pool. // The sender is responsible for signing the transaction and using the correct nonce. View on GitHub \u2192 eth_sendTransaction \u00b6 SendTransaction creates a transaction for the given argument, sign it and submit it to the transaction pool. Params (1) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Result \u00b6 common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sendTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sendTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . sendTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func ( s * TransactionAPI ) SendTransaction ( ctx context . Context , args TransactionArgs ) ( common . Hash , error ) { account := accounts . Account { Address : args . from ()} wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return common . Hash {}, err } if args . Nonce == nil { s . nonceLock . LockAddr ( args . from ()) defer s . nonceLock . UnlockAddr ( args . from ()) } if err := args . setDefaults ( ctx , s . b ); err != nil { return common . Hash {}, err } tx := args . toTransaction () signed , err := wallet . SignTx ( account , tx , s . b . ChainConfig (). GetChainID ()) if err != nil { return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , signed ) } // SendTransaction creates a transaction for the given argument, sign it and submit it to the // transaction pool. View on GitHub \u2192 eth_sign \u00b6 Sign calculates an ECDSA signature for: keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d + len(message) + message). Note, the produced signature conforms to the secp256k1 curve R, S and V values, where the V value will be 27 or 28 for legacy reasons. The account associated with addr must be unlocked. https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign Params (2) \u00b6 Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sign\", \"params\": [<addr>, <data>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sign\", \"params\": [<addr>, <data>]}' Javascript Console 1 eth . sign ( addr , data ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func ( s * TransactionAPI ) Sign ( addr common . Address , data hexutil . Bytes ) ( hexutil . Bytes , error ) { account := accounts . Account { Address : addr } wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return nil , err } signature , err := wallet . SignText ( account , data ) if err == nil { signature [ 64 ] += 27 } return signature , err } // Sign calculates an ECDSA signature for: // keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message). // // Note, the produced signature conforms to the secp256k1 curve R, S and V values, // where the V value will be 27 or 28 for legacy reasons. // // The account associated with addr must be unlocked. // // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign View on GitHub \u2192 eth_signTransaction \u00b6 SignTransaction will sign the given transaction with the from account. The node needs to have the private key of the account corresponding with the given from address and it needs to be unlocked. Params (1) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Result \u00b6 *SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_signTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_signTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . signTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( s * TransactionAPI ) SignTransaction ( ctx context . Context , args TransactionArgs ) ( * SignTransactionResult , error ) { if args . Gas == nil { return nil , errors . New ( \"gas not specified\" ) } if args . GasPrice == nil && ( args . MaxPriorityFeePerGas == nil || args . MaxFeePerGas == nil ) { return nil , errors . New ( \"missing gasPrice or maxFeePerGas/maxPriorityFeePerGas\" ) } if args . Nonce == nil { return nil , errors . New ( \"nonce not specified\" ) } if err := args . setDefaults ( ctx , s . b ); err != nil { return nil , err } tx := args . toTransaction () if err := checkTxFee ( tx . GasPrice (), tx . Gas (), s . b . RPCTxFeeCap ()); err != nil { return nil , err } signed , err := s . sign ( args . from (), tx ) if err != nil { return nil , err } data , err := signed . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , signed }, nil } // SignTransaction will sign the given transaction with the from account. // The node needs to have the private key of the account corresponding with // the given from address and it needs to be unlocked. View on GitHub \u2192 eth_submitHashrate \u00b6 SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which must be unique between nodes. Params (2) \u00b6 Parameters must be given by position . 1: rate hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } 2: id common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_submitHashrate\", \"params\": [<rate>, <id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_submitHashrate\", \"params\": [<rate>, <id>]}' Javascript Console 1 eth . submitHashrate ( rate , id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func ( api * API ) SubmitHashrate ( rate hexutil . Uint64 , id common . Hash ) bool { if api . ethash . remote == nil { return false } var done = make ( chan struct {}, 1 ) select { case api . ethash . remote . submitRateCh <- & hashrate { done : done , rate : uint64 ( rate ), id : id }: case <- api . ethash . remote . exitCh : return false } <- done return true } // SubmitHashrate can be used for remote miners to submit their hash rate. // This enables the node to report the combined hash rate of all miners // which submit work through this node. // // It accepts the miner hash rate and an identifier which must be unique // between nodes. View on GitHub \u2192 eth_submitWork \u00b6 SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was accepted. Note either an invalid solution, a stale work a non-existent work will return false. Params (3) \u00b6 Parameters must be given by position . 1: nonce types.BlockNonce Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: digest common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Javascript Console 1 eth . submitWork ( nonce , hash , digest ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( api * API ) SubmitWork ( nonce types . BlockNonce , hash , digest common . Hash ) bool { if api . ethash . remote == nil { return false } var errc = make ( chan error , 1 ) select { case api . ethash . remote . submitWorkCh <- & mineResult { nonce : nonce , mixDigest : digest , hash : hash , errc : errc }: case <- api . ethash . remote . exitCh : return false } err := <- errc return err == nil } // SubmitWork can be used by external miner to submit their POW solution. // It returns an indication if the work was accepted. // Note either an invalid solution, a stale work a non-existent work will return false. View on GitHub \u2192 eth_subscribe \u00b6 Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. Params (2) \u00b6 Parameters must be given by position . 1: subscriptionName RPCEthSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - oneOf: - description: `Fires a notification each time a new header is appended to the chain, including chain reorganizations.` - enum: newHeads - type: string - description: `Fires a notification each time a new header is appended to the non-canonical (side) chain, including chain reorganizations.` - enum: newSideHeads - type: string - description: `Returns logs that are included in new imported blocks and match the given filter criteria.` - enum: logs - type: string - description: `Returns the hash for all transactions that are added to the pending state and are signed with a key that is available in the node.` - enum: newPendingTransactions - type: string - description: `Indicates when the node starts or stops synchronizing. The result can either be a boolean indicating that the synchronization has started (true), finished (false) or an object with various progress indicators.` - enum: syncing - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"oneOf\": [ { \"description\": \"Fires a notification each time a new header is appended to the chain, including chain reorganizations.\", \"enum\": [ \"newHeads\" ], \"type\": [ \"string\" ] }, { \"description\": \"Fires a notification each time a new header is appended to the non-canonical (side) chain, including chain reorganizations.\", \"enum\": [ \"newSideHeads\" ], \"type\": [ \"string\" ] }, { \"description\": \"Returns logs that are included in new imported blocks and match the given filter criteria.\", \"enum\": [ \"logs\" ], \"type\": [ \"string\" ] }, { \"description\": \"Returns the hash for all transactions that are added to the pending state and are signed with a key that is available in the node.\", \"enum\": [ \"newPendingTransactions\" ], \"type\": [ \"string\" ] }, { \"description\": \"Indicates when the node starts or stops synchronizing. The result can either be a boolean indicating that the synchronization has started (true), finished (false) or an object with various progress indicators.\", \"enum\": [ \"syncing\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No Result \u00b6 subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCEthSubscription ) Subscribe ( subscriptionName RPCEthSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192 eth_syncing \u00b6 Syncing provides information when this nodes starts synchronising with the Ethereum network and when it\u2019s finished. Params (0) \u00b6 None Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"syncing\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * DownloaderAPI ) Syncing ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { statuses := make ( chan interface {}) sub := api . SubscribeSyncStatus ( statuses ) for { select { case status := <- statuses : notifier . Notify ( rpcSub . ID , status ) case <- rpcSub . Err (): sub . Unsubscribe () return case <- notifier . Closed (): sub . Unsubscribe () return } } }() return rpcSub , nil } // Syncing provides information when this nodes starts synchronising with the Ethereum network and when it's finished. View on GitHub \u2192 eth_syncing \u00b6 Syncing returns false in case the node is currently not syncing with the network. It can be up-to-date or has not yet received the latest block headers from its pears. In case it is synchronizing: - startingBlock: block number this node started to synchronize from - currentBlock: block number this node is currently importing - highestBlock: block number of the highest block header this node has received from peers - pulledStates: number of state entries processed until now - knownStates: number of known state entries that still need to be pulled Params (0) \u00b6 None Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_syncing\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_syncing\", \"params\": []}' Javascript Console 1 eth . syncing (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * EthereumAPI ) Syncing () ( interface {}, error ) { progress := s . b . SyncProgress () if progress . CurrentBlock >= progress . HighestBlock { return false , nil } return map // Syncing returns false in case the node is currently not syncing with the network. It can be up-to-date or has not // yet received the latest block headers from its pears. In case it is synchronizing: // - startingBlock: block number this node started to synchronize from // - currentBlock: block number this node is currently importing // - highestBlock: block number of the highest block header this node has received from peers // - pulledStates: number of state entries processed until now // - knownStates: number of known state entries that still need to be pulled [ string ] interface {}{ \"startingBlock\" : hexutil . Uint64 ( progress . StartingBlock ), \"currentBlock\" : hexutil . Uint64 ( progress . CurrentBlock ), \"highestBlock\" : hexutil . Uint64 ( progress . HighestBlock ), \"syncedAccounts\" : hexutil . Uint64 ( progress . SyncedAccounts ), \"syncedAccountBytes\" : hexutil . Uint64 ( progress . SyncedAccountBytes ), \"syncedBytecodes\" : hexutil . Uint64 ( progress . SyncedBytecodes ), \"syncedBytecodeBytes\" : hexutil . Uint64 ( progress . SyncedBytecodeBytes ), \"syncedStorage\" : hexutil . Uint64 ( progress . SyncedStorage ), \"syncedStorageBytes\" : hexutil . Uint64 ( progress . SyncedStorageBytes ), \"healedTrienodes\" : hexutil . Uint64 ( progress . HealedTrienodes ), \"healedTrienodeBytes\" : hexutil . Uint64 ( progress . HealedTrienodeBytes ), \"healedBytecodes\" : hexutil . Uint64 ( progress . HealedBytecodes ), \"healedBytecodeBytes\" : hexutil . Uint64 ( progress . HealedBytecodeBytes ), \"healingTrienodes\" : hexutil . Uint64 ( progress . HealingTrienodes ), \"healingBytecode\" : hexutil . Uint64 ( progress . HealingBytecode )}, nil } View on GitHub \u2192 eth_uninstallFilter \u00b6 UninstallFilter removes the filter with the given filter id. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_uninstallFilter\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_uninstallFilter\", \"params\": [<id>]}' Javascript Console 1 eth . uninstallFilter ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * FilterAPI ) UninstallFilter ( id rpc . ID ) bool { api . filtersMu . Lock () f , found := api . filters [ id ] if found { delete ( api . filters , id ) } api . filtersMu . Unlock () if found { f . s . Unsubscribe () } return found } // UninstallFilter removes the filter with the given filter id. View on GitHub \u2192 eth_unsubscribe \u00b6 Unsubscribe terminates an existing subscription by ID. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 eth . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCEthSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192","title":"Eth"},{"location":"JSON-RPC-API/modules/eth/#eth_accounts","text":"Accounts returns the collection of accounts this node manages.","title":"eth_accounts"},{"location":"JSON-RPC-API/modules/eth/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result","text":"commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_accounts\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_accounts\", \"params\": []}' Javascript Console 1 eth . accounts (); Source code 1 2 3 4 func ( s * EthereumAccountAPI ) Accounts () [ // Accounts returns the collection of accounts this node manages. ] common . Address { return s . am . Accounts () } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_blocknumber","text":"BlockNumber returns the block number of the chain head.","title":"eth_blockNumber"},{"location":"JSON-RPC-API/modules/eth/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_1","text":"hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_blockNumber\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_blockNumber\", \"params\": []}' Javascript Console 1 eth . blockNumber (); Source code 1 2 3 4 func ( s * BlockChainAPI ) BlockNumber () hexutil . Uint64 { header , _ := s . b . HeaderByNumber ( context . Background (), rpc . LatestBlockNumber ) return hexutil . Uint64 ( header . Number . Uint64 ()) } // BlockNumber returns the block number of the chain head. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_call","text":"Call executes the given transaction on the state for the given block number. Additionally, the caller can specify a batch of contract for fields overriding. Note, this function doesn\u2019t make and changes in the state/blockchain and is useful to execute and retrieve values.","title":"eth_call"},{"location":"JSON-RPC-API/modules/eth/#params-4","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: overrides *StateOverride Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } 4: blockOverrides *BlockOverrides Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Params (4)"},{"location":"JSON-RPC-API/modules/eth/#result_2","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_call\", \"params\": [<args>, <blockNrOrHash>, <overrides>, <blockOverrides>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_call\", \"params\": [<args>, <blockNrOrHash>, <overrides>, <blockOverrides>]}' Javascript Console 1 eth . call ( args , blockNrOrHash , overrides , blockOverrides ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) Call ( ctx context . Context , args TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , overrides * StateOverride , blockOverrides * BlockOverrides ) ( hexutil . Bytes , error ) { result , err := DoCall ( ctx , s . b , args , blockNrOrHash , overrides , blockOverrides , s . b . RPCEVMTimeout (), s . b . RPCGasCap ()) if err != nil { return nil , err } if len ( result . Revert ()) > 0 { return nil , newRevertError ( result ) } return result . Return (), result . Err } // Call executes the given transaction on the state for the given block number. // // Additionally, the caller can specify a batch of contract for fields overriding. // // Note, this function doesn't make and changes in the state/blockchain and is // useful to execute and retrieve values. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_chainid","text":"ChainId is the EIP-155 replay-protection chain id for the current Ethereum chain config. Note, this method does not conform to EIP-695 because the configured chain ID is always returned, regardless of the current head block. We used to return an error when the chain wasn\u2019t synced up to a block where EIP-155 is enabled, but this behavior caused issues in CL clients.","title":"eth_chainId"},{"location":"JSON-RPC-API/modules/eth/#params-0_2","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_3","text":"*hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_chainId\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_chainId\", \"params\": []}' Javascript Console 1 eth . chainId (); Source code 1 2 3 4 5 6 7 8 func ( api * BlockChainAPI ) ChainId () * hexutil . Big { return ( * hexutil . Big )( api . b . ChainConfig (). GetChainID ()) } // ChainId is the EIP-155 replay-protection chain id for the current Ethereum chain config. // // Note, this method does not conform to EIP-695 because the configured chain ID is always // returned, regardless of the current head block. We used to return an error when the chain // wasn't synced up to a block where EIP-155 is enabled, but this behavior caused issues // in CL clients. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_coinbase","text":"Coinbase is the address that mining rewards will be sent to (alias for Etherbase).","title":"eth_coinbase"},{"location":"JSON-RPC-API/modules/eth/#params-0_3","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_4","text":"common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_4","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_coinbase\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_coinbase\", \"params\": []}' Javascript Console 1 eth . coinbase (); Source code 1 2 3 func ( api * EthereumAPI ) Coinbase () ( common . Address , error ) { return api . Etherbase () } // Coinbase is the address that mining rewards will be sent to (alias for Etherbase). View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_createaccesslist","text":"CreateAccessList creates an EIP-2930 type AccessList for the given transaction. Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state.","title":"eth_createAccessList"},{"location":"JSON-RPC-API/modules/eth/#params-2","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash *rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_5","text":"*accessListResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - error: - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"error\": { \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_createAccessList\", \"params\": [<args>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_createAccessList\", \"params\": [<args>, <blockNrOrHash>]}' Javascript Console 1 eth . createAccessList ( args , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func ( s * BlockChainAPI ) CreateAccessList ( ctx context . Context , args TransactionArgs , blockNrOrHash * rpc . BlockNumberOrHash ) ( * accessListResult , error ) { bNrOrHash := rpc . BlockNumberOrHashWithNumber ( rpc . PendingBlockNumber ) if blockNrOrHash != nil { bNrOrHash = * blockNrOrHash } acl , gasUsed , vmerr , err := AccessList ( ctx , s . b , bNrOrHash , args ) if err != nil { return nil , err } result := & accessListResult { Accesslist : & acl , GasUsed : hexutil . Uint64 ( gasUsed )} if vmerr != nil { result . Error = vmerr . Error () } return result , nil } // CreateAccessList creates an EIP-2930 type AccessList for the given transaction. // Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_estimategas","text":"EstimateGas returns an estimate of the amount of gas needed to execute the given transaction against the current pending block.","title":"eth_estimateGas"},{"location":"JSON-RPC-API/modules/eth/#params-3","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash *rpc.BlockNumberOrHash Required: \u2713 Yes 3: overrides *StateOverride Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_6","text":"hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_estimateGas\", \"params\": [<args>, <blockNrOrHash>, <overrides>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_estimateGas\", \"params\": [<args>, <blockNrOrHash>, <overrides>]}' Javascript Console 1 eth . estimateGas ( args , blockNrOrHash , overrides ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) EstimateGas ( ctx context . Context , args TransactionArgs , blockNrOrHash * rpc . BlockNumberOrHash , overrides * StateOverride ) ( hexutil . Uint64 , error ) { bNrOrHash := rpc . BlockNumberOrHashWithNumber ( rpc . LatestBlockNumber ) if blockNrOrHash != nil { bNrOrHash = * blockNrOrHash } return DoEstimateGas ( ctx , s . b , args , bNrOrHash , overrides , s . b . RPCGasCap ()) } // EstimateGas returns an estimate of the amount of gas needed to execute the // given transaction against the current pending block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_etherbase","text":"Etherbase is the address that mining rewards will be sent to.","title":"eth_etherbase"},{"location":"JSON-RPC-API/modules/eth/#params-0_4","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_7","text":"common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_7","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_etherbase\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_etherbase\", \"params\": []}' Javascript Console 1 eth . etherbase (); Source code 1 2 3 func ( api * EthereumAPI ) Etherbase () ( common . Address , error ) { return api . e . Etherbase () } // Etherbase is the address that mining rewards will be sent to. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_feehistory","text":"FeeHistory returns the fee market history.","title":"eth_feeHistory"},{"location":"JSON-RPC-API/modules/eth/#params-3_1","text":"Parameters must be given by position . 1: blockCount math.HexOrDecimal64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: lastBlock rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 3: rewardPercentiles []float64 Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: number - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"number\" ] } ], \"type\": [ \"array\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_8","text":"*feeHistoryResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 - additionalProperties: `false` - properties: - baseFeePerGas: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - gasUsedRatio: - items: - type: `number` - type: `array` - oldestBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - reward: - items: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"gasUsedRatio\": { \"items\": { \"type\": \"number\" }, \"type\": \"array\" }, \"oldestBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"reward\": { \"items\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_8","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_feeHistory\", \"params\": [<blockCount>, <lastBlock>, <rewardPercentiles>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_feeHistory\", \"params\": [<blockCount>, <lastBlock>, <rewardPercentiles>]}' Javascript Console 1 eth . feeHistory ( blockCount , lastBlock , rewardPercentiles ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( s * EthereumAPI ) FeeHistory ( ctx context . Context , blockCount math . HexOrDecimal64 , lastBlock rpc . BlockNumber , rewardPercentiles [ // FeeHistory returns the fee market history. ] float64 ) ( * feeHistoryResult , error ) { oldest , reward , baseFee , gasUsed , err := s . b . FeeHistory ( ctx , uint64 ( blockCount ), lastBlock , rewardPercentiles ) if err != nil { return nil , err } results := & feeHistoryResult { OldestBlock : ( * hexutil . Big )( oldest ), GasUsedRatio : gasUsed } if reward != nil { results . Reward = make ([][] * hexutil . Big , len ( reward )) for i , w := range reward { results . Reward [ i ] = make ([] * hexutil . Big , len ( w )) for j , v := range w { results . Reward [ i ][ j ] = ( * hexutil . Big )( v ) } } } if baseFee != nil { results . BaseFee = make ([] * hexutil . Big , len ( baseFee )) for i , v := range baseFee { results . BaseFee [ i ] = ( * hexutil . Big )( v ) } } return results , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_filltransaction","text":"FillTransaction fills the defaults (nonce, gas, gasPrice or 1559 fields) on a given unsigned transaction, and returns it to the caller for further processing (signing + broadcast).","title":"eth_fillTransaction"},{"location":"JSON-RPC-API/modules/eth/#params-1","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_9","text":"*SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_9","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_fillTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_fillTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . fillTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * TransactionAPI ) FillTransaction ( ctx context . Context , args TransactionArgs ) ( * SignTransactionResult , error ) { if err := args . setDefaults ( ctx , s . b ); err != nil { return nil , err } tx := args . toTransaction () data , err := tx . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , tx }, nil } // FillTransaction fills the defaults (nonce, gas, gasPrice or 1559 fields) // on a given unsigned transaction, and returns it to the caller for further // processing (signing + broadcast). View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gasprice","text":"GasPrice returns a suggestion for a gas price for legacy transactions.","title":"eth_gasPrice"},{"location":"JSON-RPC-API/modules/eth/#params-0_5","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_10","text":"*hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_10","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_gasPrice\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_gasPrice\", \"params\": []}' Javascript Console 1 eth . gasPrice (); Source code 1 2 3 4 5 6 7 8 9 10 func ( s * EthereumAPI ) GasPrice ( ctx context . Context ) ( * hexutil . Big , error ) { tipcap , err := s . b . SuggestGasTipCap ( ctx ) if err != nil { return nil , err } if head := s . b . CurrentHeader (); head . BaseFee != nil { tipcap . Add ( tipcap , head . BaseFee ) } return ( * hexutil . Big )( tipcap ), err } // GasPrice returns a suggestion for a gas price for legacy transactions. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getbalance","text":"GetBalance returns the amount of wei for the given address in the state of the given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed.","title":"eth_getBalance"},{"location":"JSON-RPC-API/modules/eth/#params-2_1","text":"Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_11","text":"*hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_11","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBalance\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBalance\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getBalance ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 func ( s * BlockChainAPI ) GetBalance ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( * hexutil . Big , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } return ( * hexutil . Big )( state . GetBalance ( address )), state . Error () } // GetBalance returns the amount of wei for the given address in the state of the // given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta // block numbers are also allowed. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getblockbyhash","text":"GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned.","title":"eth_getBlockByHash"},{"location":"JSON-RPC-API/modules/eth/#params-2_2","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: fullTx bool Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_12","text":"*RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_12","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockByHash\", \"params\": [<hash>, <fullTx>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByHash\", \"params\": [<hash>, <fullTx>]}' Javascript Console 1 eth . getBlockByHash ( hash , fullTx ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) GetBlockByHash ( ctx context . Context , hash common . Hash , fullTx bool ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByHash ( ctx , hash ) if block != nil { return s . rpcMarshalBlock ( ctx , block , true , fullTx ) } return nil , err } // GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full // detail, otherwise only the transaction hash is returned. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getblockbynumber","text":"GetBlockByNumber returns the requested canonical block. - When blockNr is -1 the chain pending block is returned. - When blockNr is -2 the chain latest block is returned. - When blockNr is -3 the chain finalized block is returned. - When blockNr is -4 the chain safe block is returned. - When fullTx is true all transactions in the block are returned, otherwise only the transaction hash is returned.","title":"eth_getBlockByNumber"},{"location":"JSON-RPC-API/modules/eth/#params-2_3","text":"Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: fullTx bool Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_13","text":"*RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_13","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockByNumber\", \"params\": [<number>, <fullTx>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByNumber\", \"params\": [<number>, <fullTx>]}' Javascript Console 1 eth . getBlockByNumber ( number , fullTx ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * BlockChainAPI ) GetBlockByNumber ( ctx context . Context , number rpc . BlockNumber , fullTx bool ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByNumber ( ctx , number ) if block != nil && err == nil { response , err := s . rpcMarshalBlock ( ctx , block , true , fullTx ) if err == nil && number == rpc . PendingBlockNumber { response . setAsPending () } return response , err } return nil , err } // GetBlockByNumber returns the requested canonical block. // - When blockNr is -1 the chain pending block is returned. // - When blockNr is -2 the chain latest block is returned. // - When blockNr is -3 the chain finalized block is returned. // - When blockNr is -4 the chain safe block is returned. // - When fullTx is true all transactions in the block are returned, otherwise // only the transaction hash is returned. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getblocktransactioncountbyhash","text":"GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash.","title":"eth_getBlockTransactionCountByHash"},{"location":"JSON-RPC-API/modules/eth/#params-1_1","text":"Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_14","text":"*hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_14","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockTransactionCountByHash\", \"params\": [<blockHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockTransactionCountByHash\", \"params\": [<blockHash>]}' Javascript Console 1 eth . getBlockTransactionCountByHash ( blockHash ); Source code 1 2 3 4 5 6 7 func ( s * TransactionAPI ) GetBlockTransactionCountByHash ( ctx context . Context , blockHash common . Hash ) * hexutil . Uint { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { n := hexutil . Uint ( len ( block . Transactions ())) return & n } return nil } // GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getblocktransactioncountbynumber","text":"GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number.","title":"eth_getBlockTransactionCountByNumber"},{"location":"JSON-RPC-API/modules/eth/#params-1_2","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_15","text":"*hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_15","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getBlockTransactionCountByNumber\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockTransactionCountByNumber\", \"params\": [<blockNr>]}' Javascript Console 1 eth . getBlockTransactionCountByNumber ( blockNr ); Source code 1 2 3 4 5 6 7 func ( s * TransactionAPI ) GetBlockTransactionCountByNumber ( ctx context . Context , blockNr rpc . BlockNumber ) * hexutil . Uint { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { n := hexutil . Uint ( len ( block . Transactions ())) return & n } return nil } // GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getcode","text":"GetCode returns the code stored at the given address in the state for the given block number.","title":"eth_getCode"},{"location":"JSON-RPC-API/modules/eth/#params-2_4","text":"Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_16","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_16","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getCode\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getCode\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getCode ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 func ( s * BlockChainAPI ) GetCode ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } code := state . GetCode ( address ) return code , state . Error () } // GetCode returns the code stored at the given address in the state for the given block number. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getfilterchanges","text":"GetFilterChanges returns the logs for the filter with the given id since last time it was called. This can be used for polling. For pending transaction and block filters the result is []common.Hash. (pending)Log filters return []Log.","title":"eth_getFilterChanges"},{"location":"JSON-RPC-API/modules/eth/#params-1_3","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_17","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_17","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getFilterChanges\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getFilterChanges\", \"params\": [<id>]}' Javascript Console 1 eth . getFilterChanges ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 func ( api * FilterAPI ) GetFilterChanges ( id rpc . ID ) ( interface {}, error ) { api . filtersMu . Lock () defer api . filtersMu . Unlock () chainConfig := api . sys . backend . ChainConfig () latest := api . sys . backend . CurrentHeader () if f , found := api . filters [ id ]; found { if ! f . deadline . Stop () { <- f . deadline . C } f . deadline . Reset ( api . timeout ) switch f . typ { case BlocksSubscription , SideBlocksSubscription : hashes := f . hashes f . hashes = nil return returnHashes ( hashes ), nil case PendingTransactionsSubscription : if f . fullTx { txs := make ([ // GetFilterChanges returns the logs for the filter with the given id since // last time it was called. This can be used for polling. // // For pending transaction and block filters the result is []common.Hash. // (pending)Log filters return []Log. ] * ethapi . RPCTransaction , 0 , len ( f . txs )) for _ , tx := range f . txs { txs = append ( txs , ethapi . NewRPCPendingTransaction ( tx , latest , chainConfig )) } f . txs = nil return txs , nil } else { hashes := make ([] common . Hash , 0 , len ( f . txs )) for _ , tx := range f . txs { hashes = append ( hashes , tx . Hash ()) } f . txs = nil return hashes , nil } case LogsSubscription , MinedAndPendingLogsSubscription : logs := f . logs f . logs = nil return returnLogs ( logs ), nil } } return [] interface {}{}, errFilterNotFound } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getfilterlogs","text":"GetFilterLogs returns the logs for the filter with the given id. If the filter could not be found an empty array of logs is returned.","title":"eth_getFilterLogs"},{"location":"JSON-RPC-API/modules/eth/#params-1_4","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_18","text":"typesLog []*types.Log Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - logIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - removed: - type: `boolean` - topics: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - transactionHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"logIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"removed\": { \"type\": \"boolean\" }, \"topics\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"transactionHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_18","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getFilterLogs\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getFilterLogs\", \"params\": [<id>]}' Javascript Console 1 eth . getFilterLogs ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) GetFilterLogs ( ctx context . Context , id rpc . ID ) ([ // GetFilterLogs returns the logs for the filter with the given id. // If the filter could not be found an empty array of logs is returned. ] * types . Log , error ) { api . filtersMu . Lock () f , found := api . filters [ id ] api . filtersMu . Unlock () if ! found || f . typ != LogsSubscription { return nil , errFilterNotFound } var filter * Filter if f . crit . BlockHash != nil { filter = api . sys . NewBlockFilter ( * f . crit . BlockHash , f . crit . Addresses , f . crit . Topics ) } else { begin := rpc . LatestBlockNumber . Int64 () if f . crit . FromBlock != nil { begin = f . crit . FromBlock . Int64 () } end := rpc . LatestBlockNumber . Int64 () if f . crit . ToBlock != nil { end = f . crit . ToBlock . Int64 () } filter = api . sys . NewRangeFilter ( begin , end , f . crit . Addresses , f . crit . Topics ) } logs , err := filter . Logs ( ctx ) if err != nil { return nil , err } return returnLogs ( logs ), nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gethashrate","text":"GetHashrate returns the current hashrate for local CPU miner and remote miner.","title":"eth_getHashrate"},{"location":"JSON-RPC-API/modules/eth/#params-0_6","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_19","text":"uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_19","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHashrate\", \"params\": []}' Javascript Console 1 eth . getHashrate (); Source code 1 2 3 func ( api * API ) GetHashrate () uint64 { return uint64 ( api . ethash . Hashrate ()) } // GetHashrate returns the current hashrate for local CPU miner and remote miner. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getheaderbyhash","text":"GetHeaderByHash returns the requested header by hash.","title":"eth_getHeaderByHash"},{"location":"JSON-RPC-API/modules/eth/#params-1_5","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_20","text":"*RPCMarshalHeaderT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_20","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHeaderByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHeaderByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getHeaderByHash ( hash ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetHeaderByHash ( ctx context . Context , hash common . Hash ) * RPCMarshalHeaderT { header , _ := s . b . HeaderByHash ( ctx , hash ) if header != nil { return s . rpcMarshalHeader ( ctx , header ) } return nil } // GetHeaderByHash returns the requested header by hash. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getheaderbynumber","text":"GetHeaderByNumber returns the requested canonical block header. - When blockNr is -1 the chain pending header is returned. - When blockNr is -2 the chain latest header is returned. - When blockNr is -3 the chain finalized header is returned. - When blockNr is -4 the chain safe header is returned.","title":"eth_getHeaderByNumber"},{"location":"JSON-RPC-API/modules/eth/#params-1_6","text":"Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_21","text":"*RPCMarshalHeaderT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_21","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getHeaderByNumber\", \"params\": [<number>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getHeaderByNumber\", \"params\": [<number>]}' Javascript Console 1 eth . getHeaderByNumber ( number ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) GetHeaderByNumber ( ctx context . Context , number rpc . BlockNumber ) ( * RPCMarshalHeaderT , error ) { header , err := s . b . HeaderByNumber ( ctx , number ) if header != nil && err == nil { response := s . rpcMarshalHeader ( ctx , header ) if number == rpc . PendingBlockNumber { response . setAsPending () } return response , err } return nil , err } // GetHeaderByNumber returns the requested canonical block header. // - When blockNr is -1 the chain pending header is returned. // - When blockNr is -2 the chain latest header is returned. // - When blockNr is -3 the chain finalized header is returned. // - When blockNr is -4 the chain safe header is returned. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getlogs","text":"GetLogs returns logs matching the given argument that are stored within the state.","title":"eth_getLogs"},{"location":"JSON-RPC-API/modules/eth/#params-1_7","text":"Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_22","text":"typesLog []*types.Log Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F0-9]?)+$` - title: `bytes` - type: `string` - logIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - removed: - type: `boolean` - topics: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - transactionHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F0-9]?)+$\", \"title\": \"bytes\", \"type\": \"string\" }, \"logIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"removed\": { \"type\": \"boolean\" }, \"topics\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"transactionHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_22","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getLogs\", \"params\": [<crit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getLogs\", \"params\": [<crit>]}' Javascript Console 1 eth . getLogs ( crit ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( api * FilterAPI ) GetLogs ( ctx context . Context , crit FilterCriteria ) ([ // GetLogs returns logs matching the given argument that are stored within the state. ] * types . Log , error ) { var filter * Filter if crit . BlockHash != nil { filter = api . sys . NewBlockFilter ( * crit . BlockHash , crit . Addresses , crit . Topics ) } else { begin := rpc . LatestBlockNumber . Int64 () if crit . FromBlock != nil { begin = crit . FromBlock . Int64 () } end := rpc . LatestBlockNumber . Int64 () if crit . ToBlock != nil { end = crit . ToBlock . Int64 () } filter = api . sys . NewRangeFilter ( begin , end , crit . Addresses , crit . Topics ) } logs , err := filter . Logs ( ctx ) if err != nil { return nil , err } return returnLogs ( logs ), err } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getproof","text":"GetProof returns the Merkle-proof for a given account and optionally some storage keys.","title":"eth_getProof"},{"location":"JSON-RPC-API/modules/eth/#params-3_2","text":"Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: storageKeys []string Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 { \"items\": [ { \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } 3: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_23","text":"*AccountResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 - additionalProperties: `false` - properties: - accountProof: - items: - type: `string` - type: `array` - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - codeHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - storageHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageProof: - items: - additionalProperties: `false` - properties: - key: - type: `string` - proof: - items: - type: `string` - type: `array` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \"additionalProperties\": false, \"properties\": { \"accountProof\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"codeHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"storageHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageProof\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"key\": { \"type\": \"string\" }, \"proof\": { \"items\": { \"type\": \"string\" }, \"type\": \"array\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_23","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getProof\", \"params\": [<address>, <storageKeys>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getProof\", \"params\": [<address>, <storageKeys>, <blockNrOrHash>]}' Javascript Console 1 eth . getProof ( address , storageKeys , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 func ( s * BlockChainAPI ) GetProof ( ctx context . Context , address common . Address , storageKeys [ // GetProof returns the Merkle-proof for a given account and optionally some storage keys. ] string , blockNrOrHash rpc . BlockNumberOrHash ) ( * AccountResult , error ) { var ( keys = make ([] common . Hash , len ( storageKeys )) keyLengths = make ([] int , len ( storageKeys )) storageProof = make ([] StorageResult , len ( storageKeys )) storageTrie state . Trie storageHash = types . EmptyRootHash codeHash = types . EmptyCodeHash ) for i , hexKey := range storageKeys { var err error keys [ i ], keyLengths [ i ], err = decodeHash ( hexKey ) if err != nil { return nil , err } } state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } if storageTrie , err = state . StorageTrie ( address ); err != nil { return nil , err } if storageTrie != nil { storageHash = storageTrie . Hash () codeHash = state . GetCodeHash ( address ) } for i , key := range keys { var outputKey string if keyLengths [ i ] != 32 { outputKey = hexutil . EncodeBig ( key . Big ()) } else { outputKey = hexutil . Encode ( key [ // Output key encoding is a bit special: if the input was a 32-byte hash, it is // returned as such. Otherwise, we apply the QUANTITY encoding mandated by the // JSON-RPC spec for getProof. This behavior exists to preserve backwards // compatibility with older client versions. :]) } if storageTrie == nil { storageProof [ i ] = StorageResult { outputKey , & hexutil . Big {}, [] string {}} continue } var proof proofList if err := storageTrie . Prove ( crypto . Keccak256 ( key . Bytes ()), & proof ); err != nil { return nil , err } value := ( * hexutil . Big )( state . GetState ( address , key ). Big ()) storageProof [ i ] = StorageResult { outputKey , value , proof } } accountProof , proofErr := state . GetProof ( address ) if proofErr != nil { return nil , proofErr } return & AccountResult { Address : address , AccountProof : toHexSlice ( accountProof ), Balance : ( * hexutil . Big )( state . GetBalance ( address )), CodeHash : codeHash , Nonce : hexutil . Uint64 ( state . GetNonce ( address )), StorageHash : storageHash , StorageProof : storageProof }, state . Error () } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getrawtransactionbyblockhashandindex","text":"GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.","title":"eth_getRawTransactionByBlockHashAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_5","text":"Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_24","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_24","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getRawTransactionByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetRawTransactionByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) hexutil . Bytes { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { return newRPCRawTransactionFromBlockIndex ( block , uint64 ( index )) } return nil } // GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getrawtransactionbyblocknumberandindex","text":"GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.","title":"eth_getRawTransactionByBlockNumberAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_6","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_25","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_25","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getRawTransactionByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetRawTransactionByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) hexutil . Bytes { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { return newRPCRawTransactionFromBlockIndex ( block , uint64 ( index )) } return nil } // GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getrawtransactionbyhash","text":"GetRawTransactionByHash returns the bytes of the transaction for the given hash.","title":"eth_getRawTransactionByHash"},{"location":"JSON-RPC-API/modules/eth/#params-1_8","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_26","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_26","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getRawTransactionByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getRawTransactionByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getRawTransactionByHash ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * TransactionAPI ) GetRawTransactionByHash ( ctx context . Context , hash common . Hash ) ( hexutil . Bytes , error ) { tx , _ , _ , _ , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx == nil { if tx = s . b . GetPoolTransaction ( hash ); tx == nil { return nil , nil } } return tx . MarshalBinary () } // GetRawTransactionByHash returns the bytes of the transaction for the given hash. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getstorageat","text":"GetStorageAt returns the storage from the state at the given address, key and block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed.","title":"eth_getStorageAt"},{"location":"JSON-RPC-API/modules/eth/#params-3_3","text":"Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: hexKey string Required: \u2713 Yes 3: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_27","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_27","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getStorageAt\", \"params\": [<address>, <hexKey>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getStorageAt\", \"params\": [<address>, <hexKey>, <blockNrOrHash>]}' Javascript Console 1 eth . getStorageAt ( address , hexKey , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * BlockChainAPI ) GetStorageAt ( ctx context . Context , address common . Address , hexKey string , blockNrOrHash rpc . BlockNumberOrHash ) ( hexutil . Bytes , error ) { state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } key , _ , err := decodeHash ( hexKey ) if err != nil { return nil , fmt . Errorf ( \"unable to decode storage key: %s\" , err ) } res := state . GetState ( address , key ) return res [ // GetStorageAt returns the storage from the state at the given address, key and // block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block // numbers are also allowed. :], state . Error () } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gettransactionbyblockhashandindex","text":"GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index.","title":"eth_getTransactionByBlockHashAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_7","text":"Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_28","text":"*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_28","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getTransactionByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetTransactionByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) * RPCTransaction { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { return newRPCTransactionFromBlockIndex ( block , uint64 ( index ), s . b . ChainConfig ()) } return nil } // GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gettransactionbyblocknumberandindex","text":"GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index.","title":"eth_getTransactionByBlockNumberAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_8","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_29","text":"*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_29","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getTransactionByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 func ( s * TransactionAPI ) GetTransactionByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) * RPCTransaction { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { return newRPCTransactionFromBlockIndex ( block , uint64 ( index ), s . b . ChainConfig ()) } return nil } // GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gettransactionbyhash","text":"GetTransactionByHash returns the transaction for the given hash","title":"eth_getTransactionByHash"},{"location":"JSON-RPC-API/modules/eth/#params-1_9","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_30","text":"*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_30","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionByHash\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionByHash\", \"params\": [<hash>]}' Javascript Console 1 eth . getTransactionByHash ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * TransactionAPI ) GetTransactionByHash ( ctx context . Context , hash common . Hash ) ( * RPCTransaction , error ) { tx , blockHash , blockNumber , index , err := s . b . GetTransaction ( ctx , hash ) if err != nil { return nil , err } if tx != nil { header , err := s . b . HeaderByHash ( ctx , blockHash ) if err != nil { return nil , err } return newRPCTransaction ( tx , blockHash , blockNumber , header . Time , index , header . BaseFee , s . b . ChainConfig ()), nil } if tx := s . b . GetPoolTransaction ( hash ); tx != nil { return NewRPCPendingTransaction ( tx , s . b . CurrentHeader (), s . b . ChainConfig ()), nil } return nil , nil } // GetTransactionByHash returns the transaction for the given hash View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gettransactioncount","text":"GetTransactionCount returns the number of transactions the given address has sent for the given block number","title":"eth_getTransactionCount"},{"location":"JSON-RPC-API/modules/eth/#params-2_9","text":"Parameters must be given by position . 1: address common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_31","text":"*hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_31","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionCount\", \"params\": [<address>, <blockNrOrHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionCount\", \"params\": [<address>, <blockNrOrHash>]}' Javascript Console 1 eth . getTransactionCount ( address , blockNrOrHash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * TransactionAPI ) GetTransactionCount ( ctx context . Context , address common . Address , blockNrOrHash rpc . BlockNumberOrHash ) ( * hexutil . Uint64 , error ) { if blockNr , ok := blockNrOrHash . Number (); ok && blockNr == rpc . PendingBlockNumber { nonce , err := s . b . GetPoolNonce ( ctx , address ) if err != nil { return nil , err } return ( * hexutil . Uint64 )( & nonce ), nil } state , _ , err := s . b . StateAndHeaderByNumberOrHash ( ctx , blockNrOrHash ) if state == nil || err != nil { return nil , err } nonce := state . GetNonce ( address ) return ( * hexutil . Uint64 )( & nonce ), state . Error () } // GetTransactionCount returns the number of transactions the given address has sent for the given block number View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_gettransactionreceipt","text":"GetTransactionReceipt returns the transaction receipt for the given transaction hash.","title":"eth_getTransactionReceipt"},{"location":"JSON-RPC-API/modules/eth/#params-1_10","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_32","text":"mapstringinterface map[string]interface{} Required: \u2713 Yes Schema 1 2 3 4 5 6 - patternProperties: - .*: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 { \"patternProperties\": { \".*\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_32","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getTransactionReceipt\", \"params\": [<hash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getTransactionReceipt\", \"params\": [<hash>]}' Javascript Console 1 eth . getTransactionReceipt ( hash ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 func ( s * TransactionAPI ) GetTransactionReceipt ( ctx context . Context , hash common . Hash ) ( map // GetTransactionReceipt returns the transaction receipt for the given transaction hash. [ string ] interface {}, error ) { tx , blockHash , blockNumber , index , err := s . b . GetTransaction ( ctx , hash ) if tx == nil || err != nil { return nil , nil } header , err := s . b . HeaderByHash ( ctx , blockHash ) if err != nil { return nil , err } receipts , err := s . b . GetReceipts ( ctx , blockHash ) if err != nil { return nil , err } if uint64 ( len ( receipts )) <= index { return nil , nil } receipt := receipts [ index ] signer := types . MakeSigner ( s . b . ChainConfig (), header . Number , header . Time ) from , _ := types . Sender ( signer , tx ) fields := map [ string ] interface {}{ \"blockHash\" : blockHash , \"blockNumber\" : hexutil . Uint64 ( blockNumber ), \"transactionHash\" : hash , \"transactionIndex\" : hexutil . Uint64 ( index ), \"from\" : from , \"to\" : tx . To (), \"gasUsed\" : hexutil . Uint64 ( receipt . GasUsed ), \"cumulativeGasUsed\" : hexutil . Uint64 ( receipt . CumulativeGasUsed ), \"contractAddress\" : nil , \"logs\" : receipt . Logs , \"logsBloom\" : receipt . Bloom , \"type\" : hexutil . Uint ( tx . Type ()), \"effectiveGasPrice\" : ( * hexutil . Big )( receipt . EffectiveGasPrice )} if len ( receipt . PostState ) > 0 { fields [ \"root\" ] = hexutil . Bytes ( receipt . PostState ) } else { fields [ \"status\" ] = hexutil . Uint ( receipt . Status ) } if receipt . Logs == nil { fields [ \"logs\" ] = [] * types . Log {} } if receipt . ContractAddress != ( common . Address {}) { fields [ \"contractAddress\" ] = receipt . ContractAddress } return fields , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getunclebyblockhashandindex","text":"GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned.","title":"eth_getUncleByBlockHashAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_10","text":"Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_33","text":"*RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_33","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleByBlockHashAndIndex\", \"params\": [<blockHash>, <index>]}' Javascript Console 1 eth . getUncleByBlockHashAndIndex ( blockHash , index ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * BlockChainAPI ) GetUncleByBlockHashAndIndex ( ctx context . Context , blockHash common . Hash , index hexutil . Uint ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByHash ( ctx , blockHash ) if block != nil { uncles := block . Uncles () if index >= hexutil . Uint ( len ( uncles )) { log . Debug ( \"Requested uncle not found\" , \"number\" , block . Number (), \"hash\" , blockHash , \"index\" , index ) return nil , nil } block = types . NewBlockWithHeader ( uncles [ index ]) return s . rpcMarshalBlock ( ctx , block , false , false ) } return nil , err } // GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true // all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getunclebyblocknumberandindex","text":"GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true all transactions in the block are returned in full detail, otherwise only the transaction hash is returned.","title":"eth_getUncleByBlockNumberAndIndex"},{"location":"JSON-RPC-API/modules/eth/#params-2_11","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: index hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_34","text":"*RPCMarshalBlockT Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 - additionalProperties: `false` - properties: - baseFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - error: - type: `string` - extraData: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - gasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasUsed: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - logsBloom: - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxItems: `256` - minItems: `256` - type: `array` - miner: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - mixHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - nonce: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - parentHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - receiptsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - sha3Uncles: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - size: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - stateRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - timestamp: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - totalDifficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - transactions: - items: - additionalProperties: `true` - type: `array` - transactionsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - uncles: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - withdrawals: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - amount: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - index: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - validatorIndex: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: `object` - type: `array` - withdrawalsRoot: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 { \"additionalProperties\": false, \"properties\": { \"baseFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"error\": { \"type\": \"string\" }, \"extraData\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"gasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasUsed\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"logsBloom\": { \"items\": { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxItems\": 256, \"minItems\": 256, \"type\": \"array\" }, \"miner\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"mixHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"parentHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"receiptsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"sha3Uncles\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"size\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"stateRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"timestamp\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"totalDifficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"transactions\": { \"items\": { \"additionalProperties\": true }, \"type\": \"array\" }, \"transactionsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"uncles\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"withdrawals\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"amount\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"index\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"validatorIndex\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"withdrawalsRoot\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_34","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleByBlockNumberAndIndex\", \"params\": [<blockNr>, <index>]}' Javascript Console 1 eth . getUncleByBlockNumberAndIndex ( blockNr , index ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * BlockChainAPI ) GetUncleByBlockNumberAndIndex ( ctx context . Context , blockNr rpc . BlockNumber , index hexutil . Uint ) ( * RPCMarshalBlockT , error ) { block , err := s . b . BlockByNumber ( ctx , blockNr ) if block != nil { uncles := block . Uncles () if index >= hexutil . Uint ( len ( uncles )) { log . Debug ( \"Requested uncle not found\" , \"number\" , blockNr , \"hash\" , block . Hash (), \"index\" , index ) return nil , nil } block = types . NewBlockWithHeader ( uncles [ index ]) return s . rpcMarshalBlock ( ctx , block , false , false ) } return nil , err } // GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true // all transactions in the block are returned in full detail, otherwise only the transaction hash is returned. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getunclecountbyblockhash","text":"GetUncleCountByBlockHash returns number of uncles in the block for the given block hash","title":"eth_getUncleCountByBlockHash"},{"location":"JSON-RPC-API/modules/eth/#params-1_11","text":"Parameters must be given by position . 1: blockHash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_35","text":"*hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_35","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleCountByBlockHash\", \"params\": [<blockHash>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleCountByBlockHash\", \"params\": [<blockHash>]}' Javascript Console 1 eth . getUncleCountByBlockHash ( blockHash ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetUncleCountByBlockHash ( ctx context . Context , blockHash common . Hash ) * hexutil . Uint { if block , _ := s . b . BlockByHash ( ctx , blockHash ); block != nil { n := hexutil . Uint ( len ( block . Uncles ())) return & n } return nil } // GetUncleCountByBlockHash returns number of uncles in the block for the given block hash View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getunclecountbyblocknumber","text":"GetUncleCountByBlockNumber returns number of uncles in the block for the given block number","title":"eth_getUncleCountByBlockNumber"},{"location":"JSON-RPC-API/modules/eth/#params-1_12","text":"Parameters must be given by position . 1: blockNr rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_36","text":"*hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_36","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getUncleCountByBlockNumber\", \"params\": [<blockNr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getUncleCountByBlockNumber\", \"params\": [<blockNr>]}' Javascript Console 1 eth . getUncleCountByBlockNumber ( blockNr ); Source code 1 2 3 4 5 6 7 func ( s * BlockChainAPI ) GetUncleCountByBlockNumber ( ctx context . Context , blockNr rpc . BlockNumber ) * hexutil . Uint { if block , _ := s . b . BlockByNumber ( ctx , blockNr ); block != nil { n := hexutil . Uint ( len ( block . Uncles ())) return & n } return nil } // GetUncleCountByBlockNumber returns number of uncles in the block for the given block number View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_getwork","text":"GetWork returns a work package for external miner. The work package consists of 3 strings: result [ 0 ] - 32 bytes hex encoded current block header pow - hash result [ 1 ] - 32 bytes hex encoded seed hash used for DAG result [ 2 ] - 32 bytes hex encoded boundary condition ( \"target\" ) , 2 ^ 256 / difficulty result [ 3 ] - hex encoded block number","title":"eth_getWork"},{"location":"JSON-RPC-API/modules/eth/#params-0_7","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_37","text":"num4string [4]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - items: - type: string - maxItems: `4` - minItems: `4` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"items\": [ { \"type\": [ \"string\" ] } ], \"maxItems\": 4, \"minItems\": 4, \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_37","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_getWork\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getWork\", \"params\": []}' Javascript Console 1 eth . getWork (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) GetWork () ([ 4 ] string , error ) { if api . ethash . remote == nil { return [ 4 ] string {}, errors . New ( \"not supported\" ) } var ( workCh = make ( chan [ 4 ] string , 1 ) errc = make ( chan error , 1 ) ) select { case api . ethash . remote . fetchWorkCh <- & sealWork { errc : errc , res : workCh }: case <- api . ethash . remote . exitCh : return [ 4 ] string {}, errEthashStopped } select { case work := <- workCh : return work , nil case err := <- errc : return [ 4 ] string {}, err } } // GetWork returns a work package for external miner. // // The work package consists of 3 strings: // // result[0] - 32 bytes hex encoded current block header pow-hash // result[1] - 32 bytes hex encoded seed hash used for DAG // result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty // result[3] - hex encoded block number View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_hashrate","text":"Hashrate returns the POW hashrate.","title":"eth_hashrate"},{"location":"JSON-RPC-API/modules/eth/#params-0_8","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_38","text":"hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_38","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_hashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_hashrate\", \"params\": []}' Javascript Console 1 eth . hashrate (); Source code 1 2 3 func ( api * EthereumAPI ) Hashrate () hexutil . Uint64 { return hexutil . Uint64 ( api . e . Miner (). Hashrate ()) } // Hashrate returns the POW hashrate. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_logs","text":"Logs creates a subscription that fires for all new log that match the given filter criteria.","title":"eth_logs"},{"location":"JSON-RPC-API/modules/eth/#params-1_13","text":"Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_39","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_39","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"logs\", <crit>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 func ( api * FilterAPI ) Logs ( ctx context . Context , crit FilterCriteria ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } var ( rpcSub = notifier . CreateSubscription () matchedLogs = make ( chan [ // Logs creates a subscription that fires for all new log that match the given filter criteria. ] * types . Log ) ) logsSub , err := api . events . SubscribeLogs ( ethereum . FilterQuery ( crit ), matchedLogs ) if err != nil { return nil , err } go func () { for { select { case logs := <- matchedLogs : for _ , log := range logs { log := log notifier . Notify ( rpcSub . ID , & log ) } case <- rpcSub . Err (): logsSub . Unsubscribe () return case <- notifier . Closed (): logsSub . Unsubscribe () return } } }() return rpcSub , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_maxpriorityfeepergas","text":"MaxPriorityFeePerGas returns a suggestion for a gas tip cap for dynamic fee transactions.","title":"eth_maxPriorityFeePerGas"},{"location":"JSON-RPC-API/modules/eth/#params-0_9","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_40","text":"*hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_40","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_maxPriorityFeePerGas\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_maxPriorityFeePerGas\", \"params\": []}' Javascript Console 1 eth . maxPriorityFeePerGas (); Source code 1 2 3 4 5 6 7 func ( s * EthereumAPI ) MaxPriorityFeePerGas ( ctx context . Context ) ( * hexutil . Big , error ) { tipcap , err := s . b . SuggestGasTipCap ( ctx ) if err != nil { return nil , err } return ( * hexutil . Big )( tipcap ), err } // MaxPriorityFeePerGas returns a suggestion for a gas tip cap for dynamic fee transactions. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_mining","text":"Mining returns an indication if this node is currently mining.","title":"eth_mining"},{"location":"JSON-RPC-API/modules/eth/#params-0_10","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_41","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_41","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_mining\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_mining\", \"params\": []}' Javascript Console 1 eth . mining (); Source code 1 2 3 func ( api * EthereumAPI ) Mining () bool { return api . e . IsMining () } // Mining returns an indication if this node is currently mining. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newblockfilter","text":"NewBlockFilter creates a filter that fetches blocks that are imported into the chain. It is part of the filter package since polling goes with eth_getFilterChanges.","title":"eth_newBlockFilter"},{"location":"JSON-RPC-API/modules/eth/#params-0_11","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_42","text":"rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_42","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newBlockFilter\", \"params\": []}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) NewBlockFilter () rpc . ID { var ( headers = make ( chan * types . Header ) headerSub = api . events . SubscribeNewHeads ( headers ) ) api . filtersMu . Lock () api . filters [ headerSub . ID ] = & filter { typ : BlocksSubscription , deadline : time . NewTimer ( api . timeout ), hashes : make ([ // NewBlockFilter creates a filter that fetches blocks that are imported into the chain. // It is part of the filter package since polling goes with eth_getFilterChanges. ] common . Hash , 0 ), s : headerSub } api . filtersMu . Unlock () go func () { for { select { case h := <- headers : api . filtersMu . Lock () if f , found := api . filters [ headerSub . ID ]; found { f . hashes = append ( f . hashes , h . Hash ()) } api . filtersMu . Unlock () case <- headerSub . Err (): api . filtersMu . Lock () delete ( api . filters , headerSub . ID ) api . filtersMu . Unlock () return } } }() return headerSub . ID } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newfilter","text":"NewFilter creates a new filter and returns the filter id. It can be used to retrieve logs when the state changes. This method cannot be used to fetch logs that are already stored in the state. Default criteria for the from and to block are \u201clatest\u201d. Using \u201clatest\u201d as block number will return logs for mined blocks. Using \u201cpending\u201d as block number returns logs for not yet mined (pending) blocks. In case logs are removed (chain reorg) previously returned logs are returned again but with the removed property set to true. In case \u201cfromBlock\u201d > \u201ctoBlock\u201d an error is returned.","title":"eth_newFilter"},{"location":"JSON-RPC-API/modules/eth/#params-1_14","text":"Parameters must be given by position . 1: crit FilterCriteria Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 - additionalProperties: `false` - properties: - Addresses: - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - BlockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - FromBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - ToBlock: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Topics: - items: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `array` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 { \"additionalProperties\": false, \"properties\": { \"Addresses\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"BlockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"FromBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"ToBlock\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Topics\": { \"items\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" }, \"type\": \"array\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_43","text":"rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_43","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newFilter\", \"params\": [<crit>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 func ( api * FilterAPI ) NewFilter ( crit FilterCriteria ) ( rpc . ID , error ) { logs := make ( chan [ // NewFilter creates a new filter and returns the filter id. It can be // used to retrieve logs when the state changes. This method cannot be // used to fetch logs that are already stored in the state. // // Default criteria for the from and to block are \"latest\". // Using \"latest\" as block number will return logs for mined blocks. // Using \"pending\" as block number returns logs for not yet mined (pending) blocks. // In case logs are removed (chain reorg) previously returned logs are returned // again but with the removed property set to true. // // In case \"fromBlock\" > \"toBlock\" an error is returned. ] * types . Log ) logsSub , err := api . events . SubscribeLogs ( ethereum . FilterQuery ( crit ), logs ) if err != nil { return \"\" , err } api . filtersMu . Lock () api . filters [ logsSub . ID ] = & filter { typ : LogsSubscription , crit : crit , deadline : time . NewTimer ( api . timeout ), logs : make ([] * types . Log , 0 ), s : logsSub } api . filtersMu . Unlock () go func () { for { select { case l := <- logs : api . filtersMu . Lock () if f , found := api . filters [ logsSub . ID ]; found { f . logs = append ( f . logs , l ... ) } api . filtersMu . Unlock () case <- logsSub . Err (): api . filtersMu . Lock () delete ( api . filters , logsSub . ID ) api . filtersMu . Unlock () return } } }() return logsSub . ID , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newheads","text":"NewHeads send a notification each time a new (header) block is appended to the chain.","title":"eth_newHeads"},{"location":"JSON-RPC-API/modules/eth/#params-0_12","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_44","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_44","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newHeads\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * FilterAPI ) NewHeads ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { headers := make ( chan * types . Header ) headersSub := api . events . SubscribeNewHeads ( headers ) for { select { case h := <- headers : notifier . Notify ( rpcSub . ID , h ) case <- rpcSub . Err (): headersSub . Unsubscribe () return case <- notifier . Closed (): headersSub . Unsubscribe () return } } }() return rpcSub , nil } // NewHeads send a notification each time a new (header) block is appended to the chain. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newpendingtransactionfilter","text":"NewPendingTransactionFilter creates a filter that fetches pending transactions as transactions enter the pending state. It is part of the filter package because this filter can be used through the eth_getFilterChanges polling method that is also used for log filters.","title":"eth_newPendingTransactionFilter"},{"location":"JSON-RPC-API/modules/eth/#params-1_15","text":"Parameters must be given by position . 1: fullTx *bool Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_45","text":"rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_45","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newPendingTransactionFilter\", \"params\": [<fullTx>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 func ( api * FilterAPI ) NewPendingTransactionFilter ( fullTx * bool ) rpc . ID { var ( pendingTxs = make ( chan [ // NewPendingTransactionFilter creates a filter that fetches pending transactions // as transactions enter the pending state. // // It is part of the filter package because this filter can be used through the // `eth_getFilterChanges` polling method that is also used for log filters. ] * types . Transaction ) pendingTxSub = api . events . SubscribePendingTxs ( pendingTxs ) ) api . filtersMu . Lock () api . filters [ pendingTxSub . ID ] = & filter { typ : PendingTransactionsSubscription , fullTx : fullTx != nil && * fullTx , deadline : time . NewTimer ( api . timeout ), txs : make ([] * types . Transaction , 0 ), s : pendingTxSub } api . filtersMu . Unlock () go func () { for { select { case pTx := <- pendingTxs : api . filtersMu . Lock () if f , found := api . filters [ pendingTxSub . ID ]; found { f . txs = append ( f . txs , pTx ... ) } api . filtersMu . Unlock () case <- pendingTxSub . Err (): api . filtersMu . Lock () delete ( api . filters , pendingTxSub . ID ) api . filtersMu . Unlock () return } } }() return pendingTxSub . ID } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newpendingtransactions","text":"NewPendingTransactions creates a subscription that is triggered each time a transaction enters the transaction pool. If fullTx is true the full tx is sent to the client, otherwise the hash is sent.","title":"eth_newPendingTransactions"},{"location":"JSON-RPC-API/modules/eth/#params-1_16","text":"Parameters must be given by position . 1: fullTx *bool Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_46","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_46","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newPendingTransactions\", <fullTx>]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( api * FilterAPI ) NewPendingTransactions ( ctx context . Context , fullTx * bool ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { txs := make ( chan [ // NewPendingTransactions creates a subscription that is triggered each time a // transaction enters the transaction pool. If fullTx is true the full tx is // sent to the client, otherwise the hash is sent. ] * types . Transaction , 128 ) pendingTxSub := api . events . SubscribePendingTxs ( txs ) chainConfig := api . sys . backend . ChainConfig () for { select { case txs := <- txs : latest := api . sys . backend . CurrentHeader () for _ , tx := range txs { if fullTx != nil && * fullTx { rpcTx := ethapi . NewRPCPendingTransaction ( tx , latest , chainConfig ) notifier . Notify ( rpcSub . ID , rpcTx ) } else { notifier . Notify ( rpcSub . ID , tx . Hash ()) } } case <- rpcSub . Err (): pendingTxSub . Unsubscribe () return case <- notifier . Closed (): pendingTxSub . Unsubscribe () return } } }() return rpcSub , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newsideblockfilter","text":"NewSideBlockFilter creates a filter that fetches blocks that are imported into the chain with a non-canonical status. It is part of the filter package since polling goes with eth_getFilterChanges.","title":"eth_newSideBlockFilter"},{"location":"JSON-RPC-API/modules/eth/#params-0_13","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_47","text":"rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_47","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_newSideBlockFilter\", \"params\": []}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( api * FilterAPI ) NewSideBlockFilter () rpc . ID { var ( headers = make ( chan * types . Header ) headerSub = api . events . SubscribeNewSideHeads ( headers ) ) api . filtersMu . Lock () api . filters [ headerSub . ID ] = & filter { typ : SideBlocksSubscription , deadline : time . NewTimer ( api . timeout ), hashes : make ([ // NewSideBlockFilter creates a filter that fetches blocks that are imported into the chain with a non-canonical status. // It is part of the filter package since polling goes with eth_getFilterChanges. ] common . Hash , 0 ), s : headerSub } api . filtersMu . Unlock () go func () { for { select { case h := <- headers : api . filtersMu . Lock () if f , found := api . filters [ headerSub . ID ]; found { f . hashes = append ( f . hashes , h . Hash ()) } api . filtersMu . Unlock () case <- headerSub . Err (): api . filtersMu . Lock () delete ( api . filters , headerSub . ID ) api . filtersMu . Unlock () return } } }() return headerSub . ID } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_newsideheads","text":"NewSideHeads send a notification each time a new non-canonical (header) block is written to the database.","title":"eth_newSideHeads"},{"location":"JSON-RPC-API/modules/eth/#params-0_14","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_48","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_48","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newSideHeads\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * FilterAPI ) NewSideHeads ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { headers := make ( chan * types . Header ) headersSub := api . events . SubscribeNewSideHeads ( headers ) for { select { case h := <- headers : notifier . Notify ( rpcSub . ID , h ) case <- rpcSub . Err (): headersSub . Unsubscribe () return case <- notifier . Closed (): headersSub . Unsubscribe () return } } }() return rpcSub , nil } // NewSideHeads send a notification each time a new non-canonical (header) block is written to the database. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_pendingtransactions","text":"PendingTransactions returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.","title":"eth_pendingTransactions"},{"location":"JSON-RPC-API/modules/eth/#params-0_15","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_49","text":"RPCTransaction []*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_49","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_pendingTransactions\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_pendingTransactions\", \"params\": []}' Javascript Console 1 eth . pendingTransactions (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( s * TransactionAPI ) PendingTransactions () ([ // PendingTransactions returns the transactions that are in the transaction pool // and have a from address that is one of the accounts this node manages. ] * RPCTransaction , error ) { pending , err := s . b . GetPoolTransactions () if err != nil { return nil , err } accounts := make ( map [ common . Address ] struct {}) for _ , wallet := range s . b . AccountManager (). Wallets () { for _ , account := range wallet . Accounts () { accounts [ account . Address ] = struct {}{} } } curHeader := s . b . CurrentHeader () transactions := make ([] * RPCTransaction , 0 , len ( pending )) for _ , tx := range pending { from , _ := types . Sender ( s . signer , tx ) if _ , exists := accounts [ from ]; exists { transactions = append ( transactions , NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ())) } } return transactions , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_resend","text":"Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.","title":"eth_resend"},{"location":"JSON-RPC-API/modules/eth/#params-3_4","text":"Parameters must be given by position . 1: sendArgs TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: gasPrice *hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 3: gasLimit *hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_50","text":"common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_50","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_resend\", \"params\": [<sendArgs>, <gasPrice>, <gasLimit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_resend\", \"params\": [<sendArgs>, <gasPrice>, <gasLimit>]}' Javascript Console 1 eth . resend ( sendArgs , gasPrice , gasLimit ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 func ( s * TransactionAPI ) Resend ( ctx context . Context , sendArgs TransactionArgs , gasPrice * hexutil . Big , gasLimit * hexutil . Uint64 ) ( common . Hash , error ) { if sendArgs . Nonce == nil { return common . Hash {}, errors . New ( \"missing transaction nonce in transaction spec\" ) } if err := sendArgs . setDefaults ( ctx , s . b ); err != nil { return common . Hash {}, err } matchTx := sendArgs . toTransaction () var price = matchTx . GasPrice () if gasPrice != nil { price = gasPrice . ToInt () } var gas = matchTx . Gas () if gasLimit != nil { gas = uint64 ( * gasLimit ) } if err := checkTxFee ( price , gas , s . b . RPCTxFeeCap ()); err != nil { return common . Hash {}, err } pending , err := s . b . GetPoolTransactions () if err != nil { return common . Hash {}, err } for _ , p := // Resend accepts an existing transaction and a new gas price and limit. It will remove // the given transaction from the pool and reinsert it with the new gas price and limit. // Before replacing the old transaction, ensure the _new_ transaction fee is reasonable. range pending { wantSigHash := s . signer . Hash ( matchTx ) pFrom , err := types . Sender ( s . signer , p ) if err == nil && pFrom == sendArgs . from () && s . signer . Hash ( p ) == wantSigHash { if gasPrice != nil && ( * big . Int )( gasPrice ). Sign () != 0 { sendArgs . GasPrice = gasPrice } if gasLimit != nil && * gasLimit != 0 { sendArgs . Gas = gasLimit } signedTx , err := s . sign ( sendArgs . from (), sendArgs . toTransaction ()) if err != nil { return common . Hash {}, err } if err = s . b . SendTx ( ctx , signedTx ); err != nil { return common . Hash {}, err } return signedTx . Hash (), nil } } return common . Hash {}, fmt . Errorf ( \"transaction %#x not found\" , matchTx . Hash ()) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_sendrawtransaction","text":"SendRawTransaction will add the signed transaction to the transaction pool. The sender is responsible for signing the transaction and using the correct nonce.","title":"eth_sendRawTransaction"},{"location":"JSON-RPC-API/modules/eth/#params-1_17","text":"Parameters must be given by position . 1: input hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_51","text":"common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_51","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sendRawTransaction\", \"params\": [<input>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sendRawTransaction\", \"params\": [<input>]}' Javascript Console 1 eth . sendRawTransaction ( input ); Source code 1 2 3 4 5 6 7 8 func ( s * TransactionAPI ) SendRawTransaction ( ctx context . Context , input hexutil . Bytes ) ( common . Hash , error ) { tx := new ( types . Transaction ) if err := tx . UnmarshalBinary ( input ); err != nil { return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , tx ) } // SendRawTransaction will add the signed transaction to the transaction pool. // The sender is responsible for signing the transaction and using the correct nonce. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_sendtransaction","text":"SendTransaction creates a transaction for the given argument, sign it and submit it to the transaction pool.","title":"eth_sendTransaction"},{"location":"JSON-RPC-API/modules/eth/#params-1_18","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_52","text":"common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_52","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sendTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sendTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . sendTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func ( s * TransactionAPI ) SendTransaction ( ctx context . Context , args TransactionArgs ) ( common . Hash , error ) { account := accounts . Account { Address : args . from ()} wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return common . Hash {}, err } if args . Nonce == nil { s . nonceLock . LockAddr ( args . from ()) defer s . nonceLock . UnlockAddr ( args . from ()) } if err := args . setDefaults ( ctx , s . b ); err != nil { return common . Hash {}, err } tx := args . toTransaction () signed , err := wallet . SignTx ( account , tx , s . b . ChainConfig (). GetChainID ()) if err != nil { return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , signed ) } // SendTransaction creates a transaction for the given argument, sign it and submit it to the // transaction pool. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_sign","text":"Sign calculates an ECDSA signature for: keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d + len(message) + message). Note, the produced signature conforms to the secp256k1 curve R, S and V values, where the V value will be 27 or 28 for legacy reasons. The account associated with addr must be unlocked. https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign","title":"eth_sign"},{"location":"JSON-RPC-API/modules/eth/#params-2_12","text":"Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_53","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_53","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_sign\", \"params\": [<addr>, <data>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_sign\", \"params\": [<addr>, <data>]}' Javascript Console 1 eth . sign ( addr , data ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func ( s * TransactionAPI ) Sign ( addr common . Address , data hexutil . Bytes ) ( hexutil . Bytes , error ) { account := accounts . Account { Address : addr } wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return nil , err } signature , err := wallet . SignText ( account , data ) if err == nil { signature [ 64 ] += 27 } return signature , err } // Sign calculates an ECDSA signature for: // keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message). // // Note, the produced signature conforms to the secp256k1 curve R, S and V values, // where the V value will be 27 or 28 for legacy reasons. // // The account associated with addr must be unlocked. // // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_signtransaction","text":"SignTransaction will sign the given transaction with the from account. The node needs to have the private key of the account corresponding with the given from address and it needs to be unlocked.","title":"eth_signTransaction"},{"location":"JSON-RPC-API/modules/eth/#params-1_19","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_54","text":"*SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_54","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_signTransaction\", \"params\": [<args>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_signTransaction\", \"params\": [<args>]}' Javascript Console 1 eth . signTransaction ( args ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ( s * TransactionAPI ) SignTransaction ( ctx context . Context , args TransactionArgs ) ( * SignTransactionResult , error ) { if args . Gas == nil { return nil , errors . New ( \"gas not specified\" ) } if args . GasPrice == nil && ( args . MaxPriorityFeePerGas == nil || args . MaxFeePerGas == nil ) { return nil , errors . New ( \"missing gasPrice or maxFeePerGas/maxPriorityFeePerGas\" ) } if args . Nonce == nil { return nil , errors . New ( \"nonce not specified\" ) } if err := args . setDefaults ( ctx , s . b ); err != nil { return nil , err } tx := args . toTransaction () if err := checkTxFee ( tx . GasPrice (), tx . Gas (), s . b . RPCTxFeeCap ()); err != nil { return nil , err } signed , err := s . sign ( args . from (), tx ) if err != nil { return nil , err } data , err := signed . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , signed }, nil } // SignTransaction will sign the given transaction with the from account. // The node needs to have the private key of the account corresponding with // the given from address and it needs to be unlocked. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_submithashrate","text":"SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which must be unique between nodes.","title":"eth_submitHashrate"},{"location":"JSON-RPC-API/modules/eth/#params-2_13","text":"Parameters must be given by position . 1: rate hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } 2: id common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_55","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_55","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_submitHashrate\", \"params\": [<rate>, <id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_submitHashrate\", \"params\": [<rate>, <id>]}' Javascript Console 1 eth . submitHashrate ( rate , id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func ( api * API ) SubmitHashrate ( rate hexutil . Uint64 , id common . Hash ) bool { if api . ethash . remote == nil { return false } var done = make ( chan struct {}, 1 ) select { case api . ethash . remote . submitRateCh <- & hashrate { done : done , rate : uint64 ( rate ), id : id }: case <- api . ethash . remote . exitCh : return false } <- done return true } // SubmitHashrate can be used for remote miners to submit their hash rate. // This enables the node to report the combined hash rate of all miners // which submit work through this node. // // It accepts the miner hash rate and an identifier which must be unique // between nodes. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_submitwork","text":"SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was accepted. Note either an invalid solution, a stale work a non-existent work will return false.","title":"eth_submitWork"},{"location":"JSON-RPC-API/modules/eth/#params-3_5","text":"Parameters must be given by position . 1: nonce types.BlockNonce Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: digest common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/eth/#result_56","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_56","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Javascript Console 1 eth . submitWork ( nonce , hash , digest ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( api * API ) SubmitWork ( nonce types . BlockNonce , hash , digest common . Hash ) bool { if api . ethash . remote == nil { return false } var errc = make ( chan error , 1 ) select { case api . ethash . remote . submitWorkCh <- & mineResult { nonce : nonce , mixDigest : digest , hash : hash , errc : errc }: case <- api . ethash . remote . exitCh : return false } err := <- errc return err == nil } // SubmitWork can be used by external miner to submit their POW solution. // It returns an indication if the work was accepted. // Note either an invalid solution, a stale work a non-existent work will return false. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_subscribe","text":"Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections.","title":"eth_subscribe"},{"location":"JSON-RPC-API/modules/eth/#params-2_14","text":"Parameters must be given by position . 1: subscriptionName RPCEthSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - oneOf: - description: `Fires a notification each time a new header is appended to the chain, including chain reorganizations.` - enum: newHeads - type: string - description: `Fires a notification each time a new header is appended to the non-canonical (side) chain, including chain reorganizations.` - enum: newSideHeads - type: string - description: `Returns logs that are included in new imported blocks and match the given filter criteria.` - enum: logs - type: string - description: `Returns the hash for all transactions that are added to the pending state and are signed with a key that is available in the node.` - enum: newPendingTransactions - type: string - description: `Indicates when the node starts or stops synchronizing. The result can either be a boolean indicating that the synchronization has started (true), finished (false) or an object with various progress indicators.` - enum: syncing - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"oneOf\": [ { \"description\": \"Fires a notification each time a new header is appended to the chain, including chain reorganizations.\", \"enum\": [ \"newHeads\" ], \"type\": [ \"string\" ] }, { \"description\": \"Fires a notification each time a new header is appended to the non-canonical (side) chain, including chain reorganizations.\", \"enum\": [ \"newSideHeads\" ], \"type\": [ \"string\" ] }, { \"description\": \"Returns logs that are included in new imported blocks and match the given filter criteria.\", \"enum\": [ \"logs\" ], \"type\": [ \"string\" ] }, { \"description\": \"Returns the hash for all transactions that are added to the pending state and are signed with a key that is available in the node.\", \"enum\": [ \"newPendingTransactions\" ], \"type\": [ \"string\" ] }, { \"description\": \"Indicates when the node starts or stops synchronizing. The result can either be a boolean indicating that the synchronization has started (true), finished (false) or an object with various progress indicators.\", \"enum\": [ \"syncing\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No","title":"Params (2)"},{"location":"JSON-RPC-API/modules/eth/#result_57","text":"subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_57","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCEthSubscription ) Subscribe ( subscriptionName RPCEthSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_syncing","text":"Syncing provides information when this nodes starts synchronising with the Ethereum network and when it\u2019s finished.","title":"eth_syncing"},{"location":"JSON-RPC-API/modules/eth/#params-0_16","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_58","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_58","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"syncing\"]}' Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ( api * DownloaderAPI ) Syncing ( ctx context . Context ) ( * rpc . Subscription , error ) { notifier , supported := rpc . NotifierFromContext ( ctx ) if ! supported { return & rpc . Subscription {}, rpc . ErrNotificationsUnsupported } rpcSub := notifier . CreateSubscription () go func () { statuses := make ( chan interface {}) sub := api . SubscribeSyncStatus ( statuses ) for { select { case status := <- statuses : notifier . Notify ( rpcSub . ID , status ) case <- rpcSub . Err (): sub . Unsubscribe () return case <- notifier . Closed (): sub . Unsubscribe () return } } }() return rpcSub , nil } // Syncing provides information when this nodes starts synchronising with the Ethereum network and when it's finished. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_syncing_1","text":"Syncing returns false in case the node is currently not syncing with the network. It can be up-to-date or has not yet received the latest block headers from its pears. In case it is synchronizing: - startingBlock: block number this node started to synchronize from - currentBlock: block number this node is currently importing - highestBlock: block number of the highest block header this node has received from peers - pulledStates: number of state entries processed until now - knownStates: number of known state entries that still need to be pulled","title":"eth_syncing"},{"location":"JSON-RPC-API/modules/eth/#params-0_17","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/eth/#result_59","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_59","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_syncing\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_syncing\", \"params\": []}' Javascript Console 1 eth . syncing (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * EthereumAPI ) Syncing () ( interface {}, error ) { progress := s . b . SyncProgress () if progress . CurrentBlock >= progress . HighestBlock { return false , nil } return map // Syncing returns false in case the node is currently not syncing with the network. It can be up-to-date or has not // yet received the latest block headers from its pears. In case it is synchronizing: // - startingBlock: block number this node started to synchronize from // - currentBlock: block number this node is currently importing // - highestBlock: block number of the highest block header this node has received from peers // - pulledStates: number of state entries processed until now // - knownStates: number of known state entries that still need to be pulled [ string ] interface {}{ \"startingBlock\" : hexutil . Uint64 ( progress . StartingBlock ), \"currentBlock\" : hexutil . Uint64 ( progress . CurrentBlock ), \"highestBlock\" : hexutil . Uint64 ( progress . HighestBlock ), \"syncedAccounts\" : hexutil . Uint64 ( progress . SyncedAccounts ), \"syncedAccountBytes\" : hexutil . Uint64 ( progress . SyncedAccountBytes ), \"syncedBytecodes\" : hexutil . Uint64 ( progress . SyncedBytecodes ), \"syncedBytecodeBytes\" : hexutil . Uint64 ( progress . SyncedBytecodeBytes ), \"syncedStorage\" : hexutil . Uint64 ( progress . SyncedStorage ), \"syncedStorageBytes\" : hexutil . Uint64 ( progress . SyncedStorageBytes ), \"healedTrienodes\" : hexutil . Uint64 ( progress . HealedTrienodes ), \"healedTrienodeBytes\" : hexutil . Uint64 ( progress . HealedTrienodeBytes ), \"healedBytecodes\" : hexutil . Uint64 ( progress . HealedBytecodes ), \"healedBytecodeBytes\" : hexutil . Uint64 ( progress . HealedBytecodeBytes ), \"healingTrienodes\" : hexutil . Uint64 ( progress . HealingTrienodes ), \"healingBytecode\" : hexutil . Uint64 ( progress . HealingBytecode )}, nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_uninstallfilter","text":"UninstallFilter removes the filter with the given filter id.","title":"eth_uninstallFilter"},{"location":"JSON-RPC-API/modules/eth/#params-1_20","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_60","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_60","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_uninstallFilter\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_uninstallFilter\", \"params\": [<id>]}' Javascript Console 1 eth . uninstallFilter ( id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 func ( api * FilterAPI ) UninstallFilter ( id rpc . ID ) bool { api . filtersMu . Lock () f , found := api . filters [ id ] if found { delete ( api . filters , id ) } api . filtersMu . Unlock () if found { f . s . Unsubscribe () } return found } // UninstallFilter removes the filter with the given filter id. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/eth/#eth_unsubscribe","text":"Unsubscribe terminates an existing subscription by ID.","title":"eth_unsubscribe"},{"location":"JSON-RPC-API/modules/eth/#params-1_21","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/eth/#result_61","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/eth/#client-method-invocation-examples_61","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"eth_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 eth . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCEthSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/ethash/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 ethash_getHashrate \u00b6 GetHashrate returns the current hashrate for local CPU miner and remote miner. Params (0) \u00b6 None Result \u00b6 uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_getHashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_getHashrate\", \"params\": []}' Javascript Console 1 ethash . getHashrate (); Source code 1 2 3 func ( api * API ) GetHashrate () uint64 { return uint64 ( api . ethash . Hashrate ()) } // GetHashrate returns the current hashrate for local CPU miner and remote miner. View on GitHub \u2192 ethash_getWork \u00b6 GetWork returns a work package for external miner. The work package consists of 3 strings: result [ 0 ] - 32 bytes hex encoded current block header pow - hash result [ 1 ] - 32 bytes hex encoded seed hash used for DAG result [ 2 ] - 32 bytes hex encoded boundary condition ( \"target\" ) , 2 ^ 256 / difficulty result [ 3 ] - hex encoded block number Params (0) \u00b6 None Result \u00b6 num4string [4]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - items: - type: string - maxItems: `4` - minItems: `4` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"items\": [ { \"type\": [ \"string\" ] } ], \"maxItems\": 4, \"minItems\": 4, \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_getWork\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_getWork\", \"params\": []}' Javascript Console 1 ethash . getWork (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) GetWork () ([ 4 ] string , error ) { if api . ethash . remote == nil { return [ 4 ] string {}, errors . New ( \"not supported\" ) } var ( workCh = make ( chan [ 4 ] string , 1 ) errc = make ( chan error , 1 ) ) select { case api . ethash . remote . fetchWorkCh <- & sealWork { errc : errc , res : workCh }: case <- api . ethash . remote . exitCh : return [ 4 ] string {}, errEthashStopped } select { case work := <- workCh : return work , nil case err := <- errc : return [ 4 ] string {}, err } } // GetWork returns a work package for external miner. // // The work package consists of 3 strings: // // result[0] - 32 bytes hex encoded current block header pow-hash // result[1] - 32 bytes hex encoded seed hash used for DAG // result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty // result[3] - hex encoded block number View on GitHub \u2192 ethash_submitHashrate \u00b6 SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which must be unique between nodes. Params (2) \u00b6 Parameters must be given by position . 1: rate hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } 2: id common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_submitHashrate\", \"params\": [<rate>, <id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_submitHashrate\", \"params\": [<rate>, <id>]}' Javascript Console 1 ethash . submitHashrate ( rate , id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func ( api * API ) SubmitHashrate ( rate hexutil . Uint64 , id common . Hash ) bool { if api . ethash . remote == nil { return false } var done = make ( chan struct {}, 1 ) select { case api . ethash . remote . submitRateCh <- & hashrate { done : done , rate : uint64 ( rate ), id : id }: case <- api . ethash . remote . exitCh : return false } <- done return true } // SubmitHashrate can be used for remote miners to submit their hash rate. // This enables the node to report the combined hash rate of all miners // which submit work through this node. // // It accepts the miner hash rate and an identifier which must be unique // between nodes. View on GitHub \u2192 ethash_submitWork \u00b6 SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was accepted. Note either an invalid solution, a stale work a non-existent work will return false. Params (3) \u00b6 Parameters must be given by position . 1: nonce types.BlockNonce Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: digest common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Javascript Console 1 ethash . submitWork ( nonce , hash , digest ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( api * API ) SubmitWork ( nonce types . BlockNonce , hash , digest common . Hash ) bool { if api . ethash . remote == nil { return false } var errc = make ( chan error , 1 ) select { case api . ethash . remote . submitWorkCh <- & mineResult { nonce : nonce , mixDigest : digest , hash : hash , errc : errc }: case <- api . ethash . remote . exitCh : return false } err := <- errc return err == nil } // SubmitWork can be used by external miner to submit their POW solution. // It returns an indication if the work was accepted. // Note either an invalid solution, a stale work a non-existent work will return false. View on GitHub \u2192","title":"Ethash"},{"location":"JSON-RPC-API/modules/ethash/#ethash_gethashrate","text":"GetHashrate returns the current hashrate for local CPU miner and remote miner.","title":"ethash_getHashrate"},{"location":"JSON-RPC-API/modules/ethash/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/ethash/#result","text":"uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/ethash/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_getHashrate\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_getHashrate\", \"params\": []}' Javascript Console 1 ethash . getHashrate (); Source code 1 2 3 func ( api * API ) GetHashrate () uint64 { return uint64 ( api . ethash . Hashrate ()) } // GetHashrate returns the current hashrate for local CPU miner and remote miner. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/ethash/#ethash_getwork","text":"GetWork returns a work package for external miner. The work package consists of 3 strings: result [ 0 ] - 32 bytes hex encoded current block header pow - hash result [ 1 ] - 32 bytes hex encoded seed hash used for DAG result [ 2 ] - 32 bytes hex encoded boundary condition ( \"target\" ) , 2 ^ 256 / difficulty result [ 3 ] - hex encoded block number","title":"ethash_getWork"},{"location":"JSON-RPC-API/modules/ethash/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/ethash/#result_1","text":"num4string [4]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - items: - type: string - maxItems: `4` - minItems: `4` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"items\": [ { \"type\": [ \"string\" ] } ], \"maxItems\": 4, \"minItems\": 4, \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/ethash/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_getWork\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_getWork\", \"params\": []}' Javascript Console 1 ethash . getWork (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func ( api * API ) GetWork () ([ 4 ] string , error ) { if api . ethash . remote == nil { return [ 4 ] string {}, errors . New ( \"not supported\" ) } var ( workCh = make ( chan [ 4 ] string , 1 ) errc = make ( chan error , 1 ) ) select { case api . ethash . remote . fetchWorkCh <- & sealWork { errc : errc , res : workCh }: case <- api . ethash . remote . exitCh : return [ 4 ] string {}, errEthashStopped } select { case work := <- workCh : return work , nil case err := <- errc : return [ 4 ] string {}, err } } // GetWork returns a work package for external miner. // // The work package consists of 3 strings: // // result[0] - 32 bytes hex encoded current block header pow-hash // result[1] - 32 bytes hex encoded seed hash used for DAG // result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty // result[3] - hex encoded block number View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/ethash/#ethash_submithashrate","text":"SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which must be unique between nodes.","title":"ethash_submitHashrate"},{"location":"JSON-RPC-API/modules/ethash/#params-2","text":"Parameters must be given by position . 1: rate hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } 2: id common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/ethash/#result_2","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/ethash/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_submitHashrate\", \"params\": [<rate>, <id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_submitHashrate\", \"params\": [<rate>, <id>]}' Javascript Console 1 ethash . submitHashrate ( rate , id ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func ( api * API ) SubmitHashrate ( rate hexutil . Uint64 , id common . Hash ) bool { if api . ethash . remote == nil { return false } var done = make ( chan struct {}, 1 ) select { case api . ethash . remote . submitRateCh <- & hashrate { done : done , rate : uint64 ( rate ), id : id }: case <- api . ethash . remote . exitCh : return false } <- done return true } // SubmitHashrate can be used for remote miners to submit their hash rate. // This enables the node to report the combined hash rate of all miners // which submit work through this node. // // It accepts the miner hash rate and an identifier which must be unique // between nodes. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/ethash/#ethash_submitwork","text":"SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was accepted. Note either an invalid solution, a stale work a non-existent work will return false.","title":"ethash_submitWork"},{"location":"JSON-RPC-API/modules/ethash/#params-3","text":"Parameters must be given by position . 1: nonce types.BlockNonce Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } 2: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: digest common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/ethash/#result_3","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/ethash/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"ethash_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"ethash_submitWork\", \"params\": [<nonce>, <hash>, <digest>]}' Javascript Console 1 ethash . submitWork ( nonce , hash , digest ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( api * API ) SubmitWork ( nonce types . BlockNonce , hash , digest common . Hash ) bool { if api . ethash . remote == nil { return false } var errc = make ( chan error , 1 ) select { case api . ethash . remote . submitWorkCh <- & mineResult { nonce : nonce , mixDigest : digest , hash : hash , errc : errc }: case <- api . ethash . remote . exitCh : return false } err := <- errc return err == nil } // SubmitWork can be used by external miner to submit their POW solution. // It returns an indication if the work was accepted. // Note either an invalid solution, a stale work a non-existent work will return false. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 miner_setEtherbase \u00b6 SetEtherbase sets the etherbase of the miner. Params (1) \u00b6 Parameters must be given by position . 1: etherbase common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setEtherbase\", \"params\": [<etherbase>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setEtherbase\", \"params\": [<etherbase>]}' Javascript Console 1 miner . setEtherbase ( etherbase ); Source code 1 2 3 4 func ( api * MinerAPI ) SetEtherbase ( etherbase common . Address ) bool { api . e . SetEtherbase ( etherbase ) return true } // SetEtherbase sets the etherbase of the miner. View on GitHub \u2192 miner_setExtra \u00b6 SetExtra sets the extra data string that is included when this miner mines a block. Params (1) \u00b6 Parameters must be given by position . 1: extra string Required: \u2713 Yes Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setExtra\", \"params\": [<extra>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setExtra\", \"params\": [<extra>]}' Javascript Console 1 miner . setExtra ( extra ); Source code 1 2 3 4 5 6 7 func ( api * MinerAPI ) SetExtra ( extra string ) ( bool , error ) { if err := api . e . Miner (). SetExtra ([ // SetExtra sets the extra data string that is included when this miner mines a block. ] byte ( extra )); err != nil { return false , err } return true , nil } View on GitHub \u2192 miner_setGasLimit \u00b6 SetGasLimit sets the gaslimit to target towards during mining. Params (1) \u00b6 Parameters must be given by position . 1: gasLimit hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setGasLimit\", \"params\": [<gasLimit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setGasLimit\", \"params\": [<gasLimit>]}' Javascript Console 1 miner . setGasLimit ( gasLimit ); Source code 1 2 3 4 func ( api * MinerAPI ) SetGasLimit ( gasLimit hexutil . Uint64 ) bool { api . e . Miner (). SetGasCeil ( uint64 ( gasLimit )) return true } // SetGasLimit sets the gaslimit to target towards during mining. View on GitHub \u2192 miner_setGasPrice \u00b6 SetGasPrice sets the minimum accepted gas price for the miner. Params (1) \u00b6 Parameters must be given by position . 1: gasPrice hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setGasPrice\", \"params\": [<gasPrice>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setGasPrice\", \"params\": [<gasPrice>]}' Javascript Console 1 miner . setGasPrice ( gasPrice ); Source code 1 2 3 4 5 6 7 func ( api * MinerAPI ) SetGasPrice ( gasPrice hexutil . Big ) bool { api . e . lock . Lock () api . e . gasPrice = ( * big . Int )( & gasPrice ) api . e . lock . Unlock () api . e . txPool . SetGasTip (( * big . Int )( & gasPrice )) return true } // SetGasPrice sets the minimum accepted gas price for the miner. View on GitHub \u2192 miner_setRecommitInterval \u00b6 SetRecommitInterval updates the interval for miner sealing work recommitting. Params (1) \u00b6 Parameters must be given by position . 1: interval int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setRecommitInterval\", \"params\": [<interval>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setRecommitInterval\", \"params\": [<interval>]}' Javascript Console 1 miner . setRecommitInterval ( interval ); Source code 1 2 3 func ( api * MinerAPI ) SetRecommitInterval ( interval int ) { api . e . Miner (). SetRecommitInterval ( time . Duration ( interval ) * time . Millisecond ) } // SetRecommitInterval updates the interval for miner sealing work recommitting. View on GitHub \u2192 miner_start \u00b6 Start starts the miner with the given number of threads. If threads is nil, the number of workers started is equal to the number of logical CPUs that are usable by this process. If mining is already running, this method adjust the number of threads allowed to use and updates the minimum price required by the transaction pool. Params (1) \u00b6 Parameters must be given by position . 1: threads *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_start\", \"params\": [<threads>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_start\", \"params\": [<threads>]}' Javascript Console 1 miner . start ( threads ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * MinerAPI ) Start ( threads * int ) error { if threads == nil { return api . e . StartMining ( runtime . NumCPU ()) } return api . e . StartMining ( * threads ) } // Start starts the miner with the given number of threads. If threads is nil, // the number of workers started is equal to the number of logical CPUs that are // usable by this process. If mining is already running, this method adjust the // number of threads allowed to use and updates the minimum price required by the // transaction pool. View on GitHub \u2192 miner_stop \u00b6 Stop terminates the miner, both at the consensus engine level as well as at the block creation level. Params (0) \u00b6 None Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_stop\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_stop\", \"params\": []}' Javascript Console 1 miner . stop (); Source code 1 2 3 4 func ( api * MinerAPI ) Stop () { api . e . StopMining () } // Stop terminates the miner, both at the consensus engine level as well as at // the block creation level. View on GitHub \u2192","title":"Miner"},{"location":"JSON-RPC-API/modules/miner/#miner_setetherbase","text":"SetEtherbase sets the etherbase of the miner.","title":"miner_setEtherbase"},{"location":"JSON-RPC-API/modules/miner/#params-1","text":"Parameters must be given by position . 1: etherbase common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setEtherbase\", \"params\": [<etherbase>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setEtherbase\", \"params\": [<etherbase>]}' Javascript Console 1 miner . setEtherbase ( etherbase ); Source code 1 2 3 4 func ( api * MinerAPI ) SetEtherbase ( etherbase common . Address ) bool { api . e . SetEtherbase ( etherbase ) return true } // SetEtherbase sets the etherbase of the miner. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_setextra","text":"SetExtra sets the extra data string that is included when this miner mines a block.","title":"miner_setExtra"},{"location":"JSON-RPC-API/modules/miner/#params-1_1","text":"Parameters must be given by position . 1: extra string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result_1","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setExtra\", \"params\": [<extra>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setExtra\", \"params\": [<extra>]}' Javascript Console 1 miner . setExtra ( extra ); Source code 1 2 3 4 5 6 7 func ( api * MinerAPI ) SetExtra ( extra string ) ( bool , error ) { if err := api . e . Miner (). SetExtra ([ // SetExtra sets the extra data string that is included when this miner mines a block. ] byte ( extra )); err != nil { return false , err } return true , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_setgaslimit","text":"SetGasLimit sets the gaslimit to target towards during mining.","title":"miner_setGasLimit"},{"location":"JSON-RPC-API/modules/miner/#params-1_2","text":"Parameters must be given by position . 1: gasLimit hexutil.Uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result_2","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setGasLimit\", \"params\": [<gasLimit>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setGasLimit\", \"params\": [<gasLimit>]}' Javascript Console 1 miner . setGasLimit ( gasLimit ); Source code 1 2 3 4 func ( api * MinerAPI ) SetGasLimit ( gasLimit hexutil . Uint64 ) bool { api . e . Miner (). SetGasCeil ( uint64 ( gasLimit )) return true } // SetGasLimit sets the gaslimit to target towards during mining. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_setgasprice","text":"SetGasPrice sets the minimum accepted gas price for the miner.","title":"miner_setGasPrice"},{"location":"JSON-RPC-API/modules/miner/#params-1_3","text":"Parameters must be given by position . 1: gasPrice hexutil.Big Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result_3","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setGasPrice\", \"params\": [<gasPrice>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setGasPrice\", \"params\": [<gasPrice>]}' Javascript Console 1 miner . setGasPrice ( gasPrice ); Source code 1 2 3 4 5 6 7 func ( api * MinerAPI ) SetGasPrice ( gasPrice hexutil . Big ) bool { api . e . lock . Lock () api . e . gasPrice = ( * big . Int )( & gasPrice ) api . e . lock . Unlock () api . e . txPool . SetGasTip (( * big . Int )( & gasPrice )) return true } // SetGasPrice sets the minimum accepted gas price for the miner. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_setrecommitinterval","text":"SetRecommitInterval updates the interval for miner sealing work recommitting.","title":"miner_setRecommitInterval"},{"location":"JSON-RPC-API/modules/miner/#params-1_4","text":"Parameters must be given by position . 1: interval int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result_4","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_4","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_setRecommitInterval\", \"params\": [<interval>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_setRecommitInterval\", \"params\": [<interval>]}' Javascript Console 1 miner . setRecommitInterval ( interval ); Source code 1 2 3 func ( api * MinerAPI ) SetRecommitInterval ( interval int ) { api . e . Miner (). SetRecommitInterval ( time . Duration ( interval ) * time . Millisecond ) } // SetRecommitInterval updates the interval for miner sealing work recommitting. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_start","text":"Start starts the miner with the given number of threads. If threads is nil, the number of workers started is equal to the number of logical CPUs that are usable by this process. If mining is already running, this method adjust the number of threads allowed to use and updates the minimum price required by the transaction pool.","title":"miner_start"},{"location":"JSON-RPC-API/modules/miner/#params-1_5","text":"Parameters must be given by position . 1: threads *int Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/miner/#result_5","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_start\", \"params\": [<threads>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_start\", \"params\": [<threads>]}' Javascript Console 1 miner . start ( threads ); Source code 1 2 3 4 5 6 7 8 9 10 func ( api * MinerAPI ) Start ( threads * int ) error { if threads == nil { return api . e . StartMining ( runtime . NumCPU ()) } return api . e . StartMining ( * threads ) } // Start starts the miner with the given number of threads. If threads is nil, // the number of workers started is equal to the number of logical CPUs that are // usable by this process. If mining is already running, this method adjust the // number of threads allowed to use and updates the minimum price required by the // transaction pool. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/miner/#miner_stop","text":"Stop terminates the miner, both at the consensus engine level as well as at the block creation level.","title":"miner_stop"},{"location":"JSON-RPC-API/modules/miner/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/miner/#result_6","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/miner/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"miner_stop\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"miner_stop\", \"params\": []}' Javascript Console 1 miner . stop (); Source code 1 2 3 4 func ( api * MinerAPI ) Stop () { api . e . StopMining () } // Stop terminates the miner, both at the consensus engine level as well as at // the block creation level. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/net/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 net_listening \u00b6 Listening returns an indication if the node is listening for network connections. Params (0) \u00b6 None Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_listening\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_listening\", \"params\": []}' Javascript Console 1 net . listening (); Source code 1 2 3 func ( s * NetAPI ) Listening () bool { return true } // Listening returns an indication if the node is listening for network connections. View on GitHub \u2192 net_peerCount \u00b6 PeerCount returns the number of connected peers Params (0) \u00b6 None Result \u00b6 hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_peerCount\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_peerCount\", \"params\": []}' Javascript Console 1 net . peerCount (); Source code 1 2 3 func ( s * NetAPI ) PeerCount () hexutil . Uint { return hexutil . Uint ( s . net . PeerCount ()) } // PeerCount returns the number of connected peers View on GitHub \u2192 net_version \u00b6 Version returns the current ethereum protocol version. Params (0) \u00b6 None Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_version\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_version\", \"params\": []}' Javascript Console 1 net . version (); Source code 1 2 3 func ( s * NetAPI ) Version () string { return fmt . Sprintf ( \"%d\" , s . networkVersion ) } // Version returns the current ethereum protocol version. View on GitHub \u2192","title":"Net"},{"location":"JSON-RPC-API/modules/net/#net_listening","text":"Listening returns an indication if the node is listening for network connections.","title":"net_listening"},{"location":"JSON-RPC-API/modules/net/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/net/#result","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/net/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_listening\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_listening\", \"params\": []}' Javascript Console 1 net . listening (); Source code 1 2 3 func ( s * NetAPI ) Listening () bool { return true } // Listening returns an indication if the node is listening for network connections. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/net/#net_peercount","text":"PeerCount returns the number of connected peers","title":"net_peerCount"},{"location":"JSON-RPC-API/modules/net/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/net/#result_1","text":"hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/net/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_peerCount\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_peerCount\", \"params\": []}' Javascript Console 1 net . peerCount (); Source code 1 2 3 func ( s * NetAPI ) PeerCount () hexutil . Uint { return hexutil . Uint ( s . net . PeerCount ()) } // PeerCount returns the number of connected peers View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/net/#net_version","text":"Version returns the current ethereum protocol version.","title":"net_version"},{"location":"JSON-RPC-API/modules/net/#params-0_2","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/net/#result_2","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/net/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"net_version\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"net_version\", \"params\": []}' Javascript Console 1 net . version (); Source code 1 2 3 func ( s * NetAPI ) Version () string { return fmt . Sprintf ( \"%d\" , s . networkVersion ) } // Version returns the current ethereum protocol version. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 personal_deriveAccount \u00b6 DeriveAccount requests an HD wallet to derive a new account, optionally pinning it for later reuse. Params (3) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes 2: path string Required: \u2713 Yes 3: pin *bool Required: \u2713 Yes Result \u00b6 accounts.Account Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - url: - additionalProperties: `false` - properties: - Path: - type: `string` - Scheme: - type: `string` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"url\": { \"additionalProperties\": false, \"properties\": { \"Path\": { \"type\": \"string\" }, \"Scheme\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_deriveAccount\", \"params\": [<url>, <path>, <pin>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_deriveAccount\", \"params\": [<url>, <path>, <pin>]}' Javascript Console 1 personal . deriveAccount ( url , path , pin ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * PersonalAccountAPI ) DeriveAccount ( url string , path string , pin * bool ) ( accounts . Account , error ) { wallet , err := s . am . Wallet ( url ) if err != nil { return accounts . Account {}, err } derivPath , err := accounts . ParseDerivationPath ( path ) if err != nil { return accounts . Account {}, err } if pin == nil { pin = new ( bool ) } return wallet . Derive ( derivPath , * pin ) } // DeriveAccount requests an HD wallet to derive a new account, optionally pinning // it for later reuse. View on GitHub \u2192 personal_ecRecover \u00b6 EcRecover returns the address for the account that was used to create the signature. Note, this function is compatible with eth_sign and personal_sign. As such it recovers the address of: hash = keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d${message length}${message}) addr = ecrecover(hash, signature) Note, the signature must conform to the secp256k1 curve R, S and V values, where the V value must be 27 or 28 for legacy reasons. https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover Params (2) \u00b6 Parameters must be given by position . 1: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: sig hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Result \u00b6 common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_ecRecover\", \"params\": [<data>, <sig>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_ecRecover\", \"params\": [<data>, <sig>]}' Javascript Console 1 personal . ecRecover ( data , sig ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( s * PersonalAccountAPI ) EcRecover ( ctx context . Context , data , sig hexutil . Bytes ) ( common . Address , error ) { if len ( sig ) != crypto . SignatureLength { return common . Address {}, fmt . Errorf ( \"signature must be %d bytes long\" , crypto . SignatureLength ) } if sig [ crypto . RecoveryIDOffset ] != 27 && sig [ crypto . RecoveryIDOffset ] != 28 { return common . Address {}, errors . New ( \"invalid Ethereum signature (V is not 27 or 28)\" ) } sig [ crypto . RecoveryIDOffset ] -= 27 rpk , err := crypto . SigToPub ( accounts . TextHash ( data ), sig ) if err != nil { return common . Address {}, err } return crypto . PubkeyToAddress ( * rpk ), nil } // EcRecover returns the address for the account that was used to create the signature. // Note, this function is compatible with eth_sign and personal_sign. As such it recovers // the address of: // hash = keccak256(\"\\x19Ethereum Signed Message:\\n\"${message length}${message}) // addr = ecrecover(hash, signature) // // Note, the signature must conform to the secp256k1 curve R, S and V values, where // the V value must be 27 or 28 for legacy reasons. // // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover View on GitHub \u2192 personal_importRawKey \u00b6 ImportRawKey stores the given hex encoded ECDSA key into the key directory, encrypting it with the passphrase. Params (2) \u00b6 Parameters must be given by position . 1: privkey string Required: \u2713 Yes 2: password string Required: \u2713 Yes Result \u00b6 common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_importRawKey\", \"params\": [<privkey>, <password>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_importRawKey\", \"params\": [<privkey>, <password>]}' Javascript Console 1 personal . importRawKey ( privkey , password ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) ImportRawKey ( privkey string , password string ) ( common . Address , error ) { key , err := crypto . HexToECDSA ( privkey ) if err != nil { return common . Address {}, err } ks , err := fetchKeystore ( s . am ) if err != nil { return common . Address {}, err } acc , err := ks . ImportECDSA ( key , password ) return acc . Address , err } // ImportRawKey stores the given hex encoded ECDSA key into the key directory, // encrypting it with the passphrase. View on GitHub \u2192 personal_initializeWallet \u00b6 InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key. Params (1) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_initializeWallet\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_initializeWallet\", \"params\": [<url>]}' Javascript Console 1 personal . initializeWallet ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( s * PersonalAccountAPI ) InitializeWallet ( ctx context . Context , url string ) ( string , error ) { wallet , err := s . am . Wallet ( url ) if err != nil { return \"\" , err } entropy , err := bip39 . NewEntropy ( 256 ) if err != nil { return \"\" , err } mnemonic , err := bip39 . NewMnemonic ( entropy ) if err != nil { return \"\" , err } seed := bip39 . NewSeed ( mnemonic , \"\" ) switch wallet := wallet .( // InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key. type ) { case * scwallet . Wallet : return mnemonic , wallet . Initialize ( seed ) default : return \"\" , errors . New ( \"specified wallet does not support initialization\" ) } } View on GitHub \u2192 personal_listAccounts \u00b6 ListAccounts will return a list of addresses for accounts this node manages. Params (0) \u00b6 None Result \u00b6 commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_listAccounts\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_listAccounts\", \"params\": []}' Javascript Console 1 personal . listAccounts (); Source code 1 2 3 4 func ( s * PersonalAccountAPI ) ListAccounts () [ // ListAccounts will return a list of addresses for accounts this node manages. ] common . Address { return s . am . Accounts () } View on GitHub \u2192 personal_listWallets \u00b6 ListWallets will return a list of wallets this node manages. Params (0) \u00b6 None Result \u00b6 rawWallet []rawWallet Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 - items: - additionalProperties: `false` - properties: - accounts: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - url: - additionalProperties: `false` - properties: - Path: - type: `string` - Scheme: - type: `string` - type: `object` - type: `object` - type: `array` - failure: - type: `string` - status: - type: `string` - url: - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"url\": { \"additionalProperties\": false, \"properties\": { \"Path\": { \"type\": \"string\" }, \"Scheme\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"failure\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" }, \"url\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_listWallets\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_listWallets\", \"params\": []}' Javascript Console 1 personal . listWallets (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) ListWallets () [ // ListWallets will return a list of wallets this node manages. ] rawWallet { wallets := make ([] rawWallet , 0 ) for _ , wallet := range s . am . Wallets () { status , failure := wallet . Status () raw := rawWallet { URL : wallet . URL (). String (), Status : status , Accounts : wallet . Accounts ()} if failure != nil { raw . Failure = failure . Error () } wallets = append ( wallets , raw ) } return wallets } View on GitHub \u2192 personal_lockAccount \u00b6 LockAccount will lock the account associated with the given address when it\u2019s unlocked. Params (1) \u00b6 Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_lockAccount\", \"params\": [<addr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_lockAccount\", \"params\": [<addr>]}' Javascript Console 1 personal . lockAccount ( addr ); Source code 1 2 3 4 5 6 func ( s * PersonalAccountAPI ) LockAccount ( addr common . Address ) bool { if ks , err := fetchKeystore ( s . am ); err == nil { return ks . Lock ( addr ) == nil } return false } // LockAccount will lock the account associated with the given address when it's unlocked. View on GitHub \u2192 personal_newAccount \u00b6 NewAccount will create a new account and returns the address for the new account. Params (1) \u00b6 Parameters must be given by position . 1: password string Required: \u2713 Yes Result \u00b6 common.AddressEIP55 Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string - maxItems: `20` - minItems: `20` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"items\": [ { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } ], \"maxItems\": 20, \"minItems\": 20, \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_newAccount\", \"params\": [<password>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_newAccount\", \"params\": [<password>]}' Javascript Console 1 personal . newAccount ( password ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * PersonalAccountAPI ) NewAccount ( password string ) ( common . AddressEIP55 , error ) { ks , err := fetchKeystore ( s . am ) if err != nil { return common . AddressEIP55 {}, err } acc , err := ks . NewAccount ( password ) if err == nil { addrEIP55 := common . AddressEIP55 ( acc . Address ) log . Info ( \"Your new key was generated\" , \"address\" , addrEIP55 . String ()) log . Warn ( \"Please backup your key file!\" , \"path\" , acc . URL . Path ) log . Warn ( \"Please remember your password!\" ) return addrEIP55 , nil } return common . AddressEIP55 {}, err } // NewAccount will create a new account and returns the address for the new account. View on GitHub \u2192 personal_openWallet \u00b6 OpenWallet initiates a hardware wallet opening procedure, establishing a USB connection and attempting to authenticate via the provided passphrase. Note, the method may return an extra challenge requiring a second open (e.g. the Trezor PIN matrix challenge). Params (2) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes 2: passphrase *string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_openWallet\", \"params\": [<url>, <passphrase>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_openWallet\", \"params\": [<url>, <passphrase>]}' Javascript Console 1 personal . openWallet ( url , passphrase ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * PersonalAccountAPI ) OpenWallet ( url string , passphrase * string ) error { wallet , err := s . am . Wallet ( url ) if err != nil { return err } pass := \"\" if passphrase != nil { pass = * passphrase } return wallet . Open ( pass ) } // OpenWallet initiates a hardware wallet opening procedure, establishing a USB // connection and attempting to authenticate via the provided passphrase. Note, // the method may return an extra challenge requiring a second open (e.g. the // Trezor PIN matrix challenge). View on GitHub \u2192 personal_sendTransaction \u00b6 SendTransaction will create a transaction from the given arguments and tries to sign it with the key associated with args.From. If the given passwd isn\u2019t able to decrypt the key it fails. Params (2) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: passwd string Required: \u2713 Yes Result \u00b6 common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_sendTransaction\", \"params\": [<args>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_sendTransaction\", \"params\": [<args>, <passwd>]}' Javascript Console 1 personal . sendTransaction ( args , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * PersonalAccountAPI ) SendTransaction ( ctx context . Context , args TransactionArgs , passwd string ) ( common . Hash , error ) { if args . Nonce == nil { s . nonceLock . LockAddr ( args . from ()) defer s . nonceLock . UnlockAddr ( args . from ()) } signed , err := s . signTransaction ( ctx , & args , passwd ) if err != nil { log . Warn ( \"Failed transaction send attempt\" , \"from\" , args . from (), \"to\" , args . To , \"value\" , args . Value . ToInt (), \"err\" , err ) return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , signed ) } // SendTransaction will create a transaction from the given arguments and // tries to sign it with the key associated with args.From. If the given // passwd isn't able to decrypt the key it fails. View on GitHub \u2192 personal_sign \u00b6 Sign calculates an Ethereum ECDSA signature for: keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d + len(message) + message)) Note, the produced signature conforms to the secp256k1 curve R, S and V values, where the V value will be 27 or 28 for legacy reasons. The key used to calculate the signature is decrypted with the given password. https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign Params (3) \u00b6 Parameters must be given by position . 1: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: passwd string Required: \u2713 Yes Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_sign\", \"params\": [<data>, <addr>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_sign\", \"params\": [<data>, <addr>, <passwd>]}' Javascript Console 1 personal . sign ( data , addr , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( s * PersonalAccountAPI ) Sign ( ctx context . Context , data hexutil . Bytes , addr common . Address , passwd string ) ( hexutil . Bytes , error ) { account := accounts . Account { Address : addr } wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return nil , err } signature , err := wallet . SignTextWithPassphrase ( account , passwd , data ) if err != nil { log . Warn ( \"Failed data sign attempt\" , \"address\" , addr , \"err\" , err ) return nil , err } signature [ crypto . RecoveryIDOffset ] += 27 return signature , nil } // Sign calculates an Ethereum ECDSA signature for: // keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message)) // // Note, the produced signature conforms to the secp256k1 curve R, S and V values, // where the V value will be 27 or 28 for legacy reasons. // // The key used to calculate the signature is decrypted with the given password. // // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign View on GitHub \u2192 personal_signTransaction \u00b6 SignTransaction will create a transaction from the given arguments and tries to sign it with the key associated with args.From. If the given passwd isn\u2019t able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast to other nodes Params (2) \u00b6 Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: passwd string Required: \u2713 Yes Result \u00b6 *SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_signTransaction\", \"params\": [<args>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_signTransaction\", \"params\": [<args>, <passwd>]}' Javascript Console 1 personal . signTransaction ( args , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func ( s * PersonalAccountAPI ) SignTransaction ( ctx context . Context , args TransactionArgs , passwd string ) ( * SignTransactionResult , error ) { if args . From == nil { return nil , errors . New ( \"sender not specified\" ) } if args . Gas == nil { return nil , errors . New ( \"gas not specified\" ) } if args . GasPrice == nil && ( args . MaxFeePerGas == nil || args . MaxPriorityFeePerGas == nil ) { return nil , errors . New ( \"missing gasPrice or maxFeePerGas/maxPriorityFeePerGas\" ) } if args . Nonce == nil { return nil , errors . New ( \"nonce not specified\" ) } tx := args . toTransaction () if err := checkTxFee ( tx . GasPrice (), tx . Gas (), s . b . RPCTxFeeCap ()); err != nil { return nil , err } signed , err := s . signTransaction ( ctx , & args , passwd ) if err != nil { log . Warn ( \"Failed transaction sign attempt\" , \"from\" , args . from (), \"to\" , args . To , \"value\" , args . Value . ToInt (), \"err\" , err ) return nil , err } data , err := signed . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , signed }, nil } // SignTransaction will create a transaction from the given arguments and // tries to sign it with the key associated with args.From. If the given passwd isn't // able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast // to other nodes View on GitHub \u2192 personal_unlockAccount \u00b6 UnlockAccount will unlock the account associated with the given address with the given password for duration seconds. If duration is nil it will use a default of 300 seconds. It returns an indication if the account was unlocked. Params (3) \u00b6 Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: password string Required: \u2713 Yes 3: duration *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } Result \u00b6 bool Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_unlockAccount\", \"params\": [<addr>, <password>, <duration>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_unlockAccount\", \"params\": [<addr>, <password>, <duration>]}' Javascript Console 1 personal . unlockAccount ( addr , password , duration ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( s * PersonalAccountAPI ) UnlockAccount ( ctx context . Context , addr common . Address , password string , duration * uint64 ) ( bool , error ) { if s . b . ExtRPCEnabled () && ! s . b . AccountManager (). Config (). InsecureUnlockAllowed { return false , errors . New ( \"account unlock with HTTP access is forbidden\" ) } const max = uint64 ( time . Duration ( math . MaxInt64 ) / time . Second ) var d time . Duration if duration == nil { d = 300 * time . Second } else if * duration > max { return false , errors . New ( \"unlock duration too large\" ) } else { d = time . Duration ( * duration ) * time . Second } ks , err := fetchKeystore ( s . am ) if err != nil { return false , err } err = ks . TimedUnlock ( accounts . Account { Address : addr }, password , d ) if err != nil { log . Warn ( \"Failed account unlock attempt\" , \"address\" , addr , \"err\" , err ) } return err == nil , err } // UnlockAccount will unlock the account associated with the given address with // the given password for duration seconds. If duration is nil it will use a // default of 300 seconds. It returns an indication if the account was unlocked. View on GitHub \u2192 personal_unpair \u00b6 Unpair deletes a pairing between wallet and geth. Params (2) \u00b6 Parameters must be given by position . 1: url string Required: \u2713 Yes 2: pin string Required: \u2713 Yes Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_unpair\", \"params\": [<url>, <pin>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_unpair\", \"params\": [<url>, <pin>]}' Javascript Console 1 personal . unpair ( url , pin ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) Unpair ( ctx context . Context , url string , pin string ) error { wallet , err := s . am . Wallet ( url ) if err != nil { return err } switch wallet := wallet .( // Unpair deletes a pairing between wallet and geth. type ) { case * scwallet . Wallet : return wallet . Unpair ([] byte ( pin )) default : return errors . New ( \"specified wallet does not support pairing\" ) } } View on GitHub \u2192","title":"Personal"},{"location":"JSON-RPC-API/modules/personal/#personal_deriveaccount","text":"DeriveAccount requests an HD wallet to derive a new account, optionally pinning it for later reuse.","title":"personal_deriveAccount"},{"location":"JSON-RPC-API/modules/personal/#params-3","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes 2: path string Required: \u2713 Yes 3: pin *bool Required: \u2713 Yes","title":"Params (3)"},{"location":"JSON-RPC-API/modules/personal/#result","text":"accounts.Account Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - url: - additionalProperties: `false` - properties: - Path: - type: `string` - Scheme: - type: `string` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"url\": { \"additionalProperties\": false, \"properties\": { \"Path\": { \"type\": \"string\" }, \"Scheme\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_deriveAccount\", \"params\": [<url>, <path>, <pin>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_deriveAccount\", \"params\": [<url>, <path>, <pin>]}' Javascript Console 1 personal . deriveAccount ( url , path , pin ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * PersonalAccountAPI ) DeriveAccount ( url string , path string , pin * bool ) ( accounts . Account , error ) { wallet , err := s . am . Wallet ( url ) if err != nil { return accounts . Account {}, err } derivPath , err := accounts . ParseDerivationPath ( path ) if err != nil { return accounts . Account {}, err } if pin == nil { pin = new ( bool ) } return wallet . Derive ( derivPath , * pin ) } // DeriveAccount requests an HD wallet to derive a new account, optionally pinning // it for later reuse. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_ecrecover","text":"EcRecover returns the address for the account that was used to create the signature. Note, this function is compatible with eth_sign and personal_sign. As such it recovers the address of: hash = keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d${message length}${message}) addr = ecrecover(hash, signature) Note, the signature must conform to the secp256k1 curve R, S and V values, where the V value must be 27 or 28 for legacy reasons. https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover","title":"personal_ecRecover"},{"location":"JSON-RPC-API/modules/personal/#params-2","text":"Parameters must be given by position . 1: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: sig hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_1","text":"common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_ecRecover\", \"params\": [<data>, <sig>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_ecRecover\", \"params\": [<data>, <sig>]}' Javascript Console 1 personal . ecRecover ( data , sig ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func ( s * PersonalAccountAPI ) EcRecover ( ctx context . Context , data , sig hexutil . Bytes ) ( common . Address , error ) { if len ( sig ) != crypto . SignatureLength { return common . Address {}, fmt . Errorf ( \"signature must be %d bytes long\" , crypto . SignatureLength ) } if sig [ crypto . RecoveryIDOffset ] != 27 && sig [ crypto . RecoveryIDOffset ] != 28 { return common . Address {}, errors . New ( \"invalid Ethereum signature (V is not 27 or 28)\" ) } sig [ crypto . RecoveryIDOffset ] -= 27 rpk , err := crypto . SigToPub ( accounts . TextHash ( data ), sig ) if err != nil { return common . Address {}, err } return crypto . PubkeyToAddress ( * rpk ), nil } // EcRecover returns the address for the account that was used to create the signature. // Note, this function is compatible with eth_sign and personal_sign. As such it recovers // the address of: // hash = keccak256(\"\\x19Ethereum Signed Message:\\n\"${message length}${message}) // addr = ecrecover(hash, signature) // // Note, the signature must conform to the secp256k1 curve R, S and V values, where // the V value must be 27 or 28 for legacy reasons. // // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_importrawkey","text":"ImportRawKey stores the given hex encoded ECDSA key into the key directory, encrypting it with the passphrase.","title":"personal_importRawKey"},{"location":"JSON-RPC-API/modules/personal/#params-2_1","text":"Parameters must be given by position . 1: privkey string Required: \u2713 Yes 2: password string Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_2","text":"common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_importRawKey\", \"params\": [<privkey>, <password>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_importRawKey\", \"params\": [<privkey>, <password>]}' Javascript Console 1 personal . importRawKey ( privkey , password ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) ImportRawKey ( privkey string , password string ) ( common . Address , error ) { key , err := crypto . HexToECDSA ( privkey ) if err != nil { return common . Address {}, err } ks , err := fetchKeystore ( s . am ) if err != nil { return common . Address {}, err } acc , err := ks . ImportECDSA ( key , password ) return acc . Address , err } // ImportRawKey stores the given hex encoded ECDSA key into the key directory, // encrypting it with the passphrase. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_initializewallet","text":"InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key.","title":"personal_initializeWallet"},{"location":"JSON-RPC-API/modules/personal/#params-1","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/personal/#result_3","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_initializeWallet\", \"params\": [<url>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_initializeWallet\", \"params\": [<url>]}' Javascript Console 1 personal . initializeWallet ( url ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( s * PersonalAccountAPI ) InitializeWallet ( ctx context . Context , url string ) ( string , error ) { wallet , err := s . am . Wallet ( url ) if err != nil { return \"\" , err } entropy , err := bip39 . NewEntropy ( 256 ) if err != nil { return \"\" , err } mnemonic , err := bip39 . NewMnemonic ( entropy ) if err != nil { return \"\" , err } seed := bip39 . NewSeed ( mnemonic , \"\" ) switch wallet := wallet .( // InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key. type ) { case * scwallet . Wallet : return mnemonic , wallet . Initialize ( seed ) default : return \"\" , errors . New ( \"specified wallet does not support initialization\" ) } } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_listaccounts","text":"ListAccounts will return a list of addresses for accounts this node manages.","title":"personal_listAccounts"},{"location":"JSON-RPC-API/modules/personal/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/personal/#result_4","text":"commonAddress []common.Address Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - items: - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"items\": [ { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_4","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_listAccounts\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_listAccounts\", \"params\": []}' Javascript Console 1 personal . listAccounts (); Source code 1 2 3 4 func ( s * PersonalAccountAPI ) ListAccounts () [ // ListAccounts will return a list of addresses for accounts this node manages. ] common . Address { return s . am . Accounts () } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_listwallets","text":"ListWallets will return a list of wallets this node manages.","title":"personal_listWallets"},{"location":"JSON-RPC-API/modules/personal/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/personal/#result_5","text":"rawWallet []rawWallet Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 - items: - additionalProperties: `false` - properties: - accounts: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - url: - additionalProperties: `false` - properties: - Path: - type: `string` - Scheme: - type: `string` - type: `object` - type: `object` - type: `array` - failure: - type: `string` - status: - type: `string` - url: - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accounts\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"url\": { \"additionalProperties\": false, \"properties\": { \"Path\": { \"type\": \"string\" }, \"Scheme\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"failure\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" }, \"url\": { \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_listWallets\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_listWallets\", \"params\": []}' Javascript Console 1 personal . listWallets (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) ListWallets () [ // ListWallets will return a list of wallets this node manages. ] rawWallet { wallets := make ([] rawWallet , 0 ) for _ , wallet := range s . am . Wallets () { status , failure := wallet . Status () raw := rawWallet { URL : wallet . URL (). String (), Status : status , Accounts : wallet . Accounts ()} if failure != nil { raw . Failure = failure . Error () } wallets = append ( wallets , raw ) } return wallets } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_lockaccount","text":"LockAccount will lock the account associated with the given address when it\u2019s unlocked.","title":"personal_lockAccount"},{"location":"JSON-RPC-API/modules/personal/#params-1_1","text":"Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/personal/#result_6","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_lockAccount\", \"params\": [<addr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_lockAccount\", \"params\": [<addr>]}' Javascript Console 1 personal . lockAccount ( addr ); Source code 1 2 3 4 5 6 func ( s * PersonalAccountAPI ) LockAccount ( addr common . Address ) bool { if ks , err := fetchKeystore ( s . am ); err == nil { return ks . Lock ( addr ) == nil } return false } // LockAccount will lock the account associated with the given address when it's unlocked. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_newaccount","text":"NewAccount will create a new account and returns the address for the new account.","title":"personal_newAccount"},{"location":"JSON-RPC-API/modules/personal/#params-1_2","text":"Parameters must be given by position . 1: password string Required: \u2713 Yes","title":"Params (1)"},{"location":"JSON-RPC-API/modules/personal/#result_7","text":"common.AddressEIP55 Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 - items: - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string - maxItems: `20` - minItems: `20` - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"items\": [ { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] } ], \"maxItems\": 20, \"minItems\": 20, \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_7","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_newAccount\", \"params\": [<password>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_newAccount\", \"params\": [<password>]}' Javascript Console 1 personal . newAccount ( password ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * PersonalAccountAPI ) NewAccount ( password string ) ( common . AddressEIP55 , error ) { ks , err := fetchKeystore ( s . am ) if err != nil { return common . AddressEIP55 {}, err } acc , err := ks . NewAccount ( password ) if err == nil { addrEIP55 := common . AddressEIP55 ( acc . Address ) log . Info ( \"Your new key was generated\" , \"address\" , addrEIP55 . String ()) log . Warn ( \"Please backup your key file!\" , \"path\" , acc . URL . Path ) log . Warn ( \"Please remember your password!\" ) return addrEIP55 , nil } return common . AddressEIP55 {}, err } // NewAccount will create a new account and returns the address for the new account. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_openwallet","text":"OpenWallet initiates a hardware wallet opening procedure, establishing a USB connection and attempting to authenticate via the provided passphrase. Note, the method may return an extra challenge requiring a second open (e.g. the Trezor PIN matrix challenge).","title":"personal_openWallet"},{"location":"JSON-RPC-API/modules/personal/#params-2_2","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes 2: passphrase *string Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_8","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_8","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_openWallet\", \"params\": [<url>, <passphrase>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_openWallet\", \"params\": [<url>, <passphrase>]}' Javascript Console 1 personal . openWallet ( url , passphrase ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * PersonalAccountAPI ) OpenWallet ( url string , passphrase * string ) error { wallet , err := s . am . Wallet ( url ) if err != nil { return err } pass := \"\" if passphrase != nil { pass = * passphrase } return wallet . Open ( pass ) } // OpenWallet initiates a hardware wallet opening procedure, establishing a USB // connection and attempting to authenticate via the provided passphrase. Note, // the method may return an extra challenge requiring a second open (e.g. the // Trezor PIN matrix challenge). View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_sendtransaction","text":"SendTransaction will create a transaction from the given arguments and tries to sign it with the key associated with args.From. If the given passwd isn\u2019t able to decrypt the key it fails.","title":"personal_sendTransaction"},{"location":"JSON-RPC-API/modules/personal/#params-2_3","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: passwd string Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_9","text":"common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_9","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_sendTransaction\", \"params\": [<args>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_sendTransaction\", \"params\": [<args>, <passwd>]}' Javascript Console 1 personal . sendTransaction ( args , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func ( s * PersonalAccountAPI ) SendTransaction ( ctx context . Context , args TransactionArgs , passwd string ) ( common . Hash , error ) { if args . Nonce == nil { s . nonceLock . LockAddr ( args . from ()) defer s . nonceLock . UnlockAddr ( args . from ()) } signed , err := s . signTransaction ( ctx , & args , passwd ) if err != nil { log . Warn ( \"Failed transaction send attempt\" , \"from\" , args . from (), \"to\" , args . To , \"value\" , args . Value . ToInt (), \"err\" , err ) return common . Hash {}, err } return SubmitTransaction ( ctx , s . b , signed ) } // SendTransaction will create a transaction from the given arguments and // tries to sign it with the key associated with args.From. If the given // passwd isn't able to decrypt the key it fails. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_sign","text":"Sign calculates an Ethereum ECDSA signature for: keccak256(\u201c\\x19Ethereum Signed Message:\\n\u201d + len(message) + message)) Note, the produced signature conforms to the secp256k1 curve R, S and V values, where the V value will be 27 or 28 for legacy reasons. The key used to calculate the signature is decrypted with the given password. https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign","title":"personal_sign"},{"location":"JSON-RPC-API/modules/personal/#params-3_1","text":"Parameters must be given by position . 1: data hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } 2: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 3: passwd string Required: \u2713 Yes","title":"Params (3)"},{"location":"JSON-RPC-API/modules/personal/#result_10","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_10","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_sign\", \"params\": [<data>, <addr>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_sign\", \"params\": [<data>, <addr>, <passwd>]}' Javascript Console 1 personal . sign ( data , addr , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( s * PersonalAccountAPI ) Sign ( ctx context . Context , data hexutil . Bytes , addr common . Address , passwd string ) ( hexutil . Bytes , error ) { account := accounts . Account { Address : addr } wallet , err := s . b . AccountManager (). Find ( account ) if err != nil { return nil , err } signature , err := wallet . SignTextWithPassphrase ( account , passwd , data ) if err != nil { log . Warn ( \"Failed data sign attempt\" , \"address\" , addr , \"err\" , err ) return nil , err } signature [ crypto . RecoveryIDOffset ] += 27 return signature , nil } // Sign calculates an Ethereum ECDSA signature for: // keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message)) // // Note, the produced signature conforms to the secp256k1 curve R, S and V values, // where the V value will be 27 or 28 for legacy reasons. // // The key used to calculate the signature is decrypted with the given password. // // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_signtransaction","text":"SignTransaction will create a transaction from the given arguments and tries to sign it with the key associated with args.From. If the given passwd isn\u2019t able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast to other nodes","title":"personal_signTransaction"},{"location":"JSON-RPC-API/modules/personal/#params-2_4","text":"Parameters must be given by position . 1: args TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: passwd string Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_11","text":"*SignTransactionResult Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 - additionalProperties: `false` - properties: - raw: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - tx: - additionalProperties: `false` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"additionalProperties\": false, \"properties\": { \"raw\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"tx\": { \"additionalProperties\": false, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_11","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_signTransaction\", \"params\": [<args>, <passwd>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_signTransaction\", \"params\": [<args>, <passwd>]}' Javascript Console 1 personal . signTransaction ( args , passwd ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func ( s * PersonalAccountAPI ) SignTransaction ( ctx context . Context , args TransactionArgs , passwd string ) ( * SignTransactionResult , error ) { if args . From == nil { return nil , errors . New ( \"sender not specified\" ) } if args . Gas == nil { return nil , errors . New ( \"gas not specified\" ) } if args . GasPrice == nil && ( args . MaxFeePerGas == nil || args . MaxPriorityFeePerGas == nil ) { return nil , errors . New ( \"missing gasPrice or maxFeePerGas/maxPriorityFeePerGas\" ) } if args . Nonce == nil { return nil , errors . New ( \"nonce not specified\" ) } tx := args . toTransaction () if err := checkTxFee ( tx . GasPrice (), tx . Gas (), s . b . RPCTxFeeCap ()); err != nil { return nil , err } signed , err := s . signTransaction ( ctx , & args , passwd ) if err != nil { log . Warn ( \"Failed transaction sign attempt\" , \"from\" , args . from (), \"to\" , args . To , \"value\" , args . Value . ToInt (), \"err\" , err ) return nil , err } data , err := signed . MarshalBinary () if err != nil { return nil , err } return & SignTransactionResult { data , signed }, nil } // SignTransaction will create a transaction from the given arguments and // tries to sign it with the key associated with args.From. If the given passwd isn't // able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast // to other nodes View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_unlockaccount","text":"UnlockAccount will unlock the account associated with the given address with the given password for duration seconds. If duration is nil it will use a default of 300 seconds. It returns an indication if the account was unlocked.","title":"personal_unlockAccount"},{"location":"JSON-RPC-API/modules/personal/#params-3_2","text":"Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: password string Required: \u2713 Yes 3: duration *uint64 Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of the integer` - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of the integer\", \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": [ \"string\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/personal/#result_12","text":"bool Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_12","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_unlockAccount\", \"params\": [<addr>, <password>, <duration>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_unlockAccount\", \"params\": [<addr>, <password>, <duration>]}' Javascript Console 1 personal . unlockAccount ( addr , password , duration ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func ( s * PersonalAccountAPI ) UnlockAccount ( ctx context . Context , addr common . Address , password string , duration * uint64 ) ( bool , error ) { if s . b . ExtRPCEnabled () && ! s . b . AccountManager (). Config (). InsecureUnlockAllowed { return false , errors . New ( \"account unlock with HTTP access is forbidden\" ) } const max = uint64 ( time . Duration ( math . MaxInt64 ) / time . Second ) var d time . Duration if duration == nil { d = 300 * time . Second } else if * duration > max { return false , errors . New ( \"unlock duration too large\" ) } else { d = time . Duration ( * duration ) * time . Second } ks , err := fetchKeystore ( s . am ) if err != nil { return false , err } err = ks . TimedUnlock ( accounts . Account { Address : addr }, password , d ) if err != nil { log . Warn ( \"Failed account unlock attempt\" , \"address\" , addr , \"err\" , err ) } return err == nil , err } // UnlockAccount will unlock the account associated with the given address with // the given password for duration seconds. If duration is nil it will use a // default of 300 seconds. It returns an indication if the account was unlocked. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/personal/#personal_unpair","text":"Unpair deletes a pairing between wallet and geth.","title":"personal_unpair"},{"location":"JSON-RPC-API/modules/personal/#params-2_5","text":"Parameters must be given by position . 1: url string Required: \u2713 Yes 2: pin string Required: \u2713 Yes","title":"Params (2)"},{"location":"JSON-RPC-API/modules/personal/#result_13","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/personal/#client-method-invocation-examples_13","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"personal_unpair\", \"params\": [<url>, <pin>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"personal_unpair\", \"params\": [<url>, <pin>]}' Javascript Console 1 personal . unpair ( url , pin ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 func ( s * PersonalAccountAPI ) Unpair ( ctx context . Context , url string , pin string ) error { wallet , err := s . am . Wallet ( url ) if err != nil { return err } switch wallet := wallet .( // Unpair deletes a pairing between wallet and geth. type ) { case * scwallet . Wallet : return wallet . Unpair ([] byte ( pin )) default : return errors . New ( \"specified wallet does not support pairing\" ) } } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 trace_block \u00b6 Block returns the structured logs created during the execution of EVM and returns them as a JSON object. The correct name will be TraceBlockByNumber, though we want to be compatible with Parity trace module. Params (2) \u00b6 Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface []interface{} Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - additionalProperties: `true` - type: array Raw 1 2 3 4 5 6 7 8 9 10 { \"items\": [ { \"additionalProperties\": true } ], \"type\": [ \"array\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_block\", \"params\": [<number>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_block\", \"params\": [<number>, <config>]}' Javascript Console 1 trace . block ( number , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 func ( api * TraceAPI ) Block ( ctx context . Context , number rpc . BlockNumber , config * TraceConfig ) ([ // Block returns the structured logs created during the execution of // EVM and returns them as a JSON object. // The correct name will be TraceBlockByNumber, though we want to be compatible with Parity trace module. ] interface {}, error ) { config = setTraceConfigDefaultTracer ( config ) block , err := api . debugAPI . blockByNumber ( ctx , number ) if err != nil { return nil , err } traceResults , err := api . debugAPI . traceBlock ( ctx , block , config ) if err != nil { return nil , err } traceReward , err := api . traceBlockReward ( ctx , block , config ) if err != nil { return nil , err } traceUncleRewards , err := api . traceBlockUncleRewards ( ctx , block , config ) if err != nil { return nil , err } results := [] interface {}{} for _ , result := range traceResults { if result . Error != \"\" { return nil , errors . New ( result . Error ) } var tmp interface {} if err := json . Unmarshal ( result . Result .( json . RawMessage ), & tmp ); err != nil { return nil , err } if * config . Tracer == \"stateDiffTracer\" { results = append ( results , tmp ) } else { results = append ( results , tmp .([] interface {}) ... ) } } results = append ( results , traceReward ) for _ , uncleReward := range traceUncleRewards { results = append ( results , uncleReward ) } return results , nil } View on GitHub \u2192 trace_call \u00b6 Call lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block. Params (3) \u00b6 Parameters must be given by position . 1: args ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_call\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_call\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Javascript Console 1 trace . call ( args , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 func ( api * TraceAPI ) Call ( ctx context . Context , args ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { config = setTraceCallConfigDefaultTracer ( config ) res , err := api . debugAPI . TraceCall ( ctx , args , blockNrOrHash , config ) if err != nil { return nil , err } traceConfig := getTraceConfigFromTraceCallConfig ( config ) return decorateResponse ( res , traceConfig ) } // Call lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. View on GitHub \u2192 trace_callMany \u00b6 CallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block. Params (3) \u00b6 Parameters must be given by position . 1: txs []ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_callMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_callMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Javascript Console 1 trace . callMany ( txs , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 func ( api * TraceAPI ) CallMany ( ctx context . Context , txs [ // CallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. ] ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { config = setTraceCallConfigDefaultTracer ( config ) return api . debugAPI . TraceCallMany ( ctx , txs , blockNrOrHash , config ) } View on GitHub \u2192 trace_filter \u00b6 Filter configures a new tracer according to the provided configuration, and executes all the transactions contained within. The return value will be one item per transaction, dependent on the requested tracer. Params (2) \u00b6 Parameters must be given by position . 1: args TraceFilterArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - additionalProperties: `false` - properties: - after: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - count: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - fromAddress: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - fromBlock: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - toAddress: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - toBlock: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 { \"additionalProperties\": false, \"properties\": { \"after\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"count\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"fromAddress\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"fromBlock\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"toAddress\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"toBlock\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 *rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_subscribe\", \"params\": [\"filter\", <args>, <config>]}' Source code 1 2 3 4 5 6 7 8 func ( api * TraceAPI ) Filter ( ctx context . Context , args TraceFilterArgs , config * TraceConfig ) ( * rpc . Subscription , error ) { config = setTraceConfigDefaultTracer ( config ) start := rpc . BlockNumber ( args . FromBlock ) end := rpc . BlockNumber ( args . ToBlock ) return api . debugAPI . TraceChain ( ctx , start , end , config ) } // Filter configures a new tracer according to the provided configuration, and // executes all the transactions contained within. The return value will be one item // per transaction, dependent on the requested tracer. View on GitHub \u2192 trace_subscribe \u00b6 Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. Params (2) \u00b6 Parameters must be given by position . 1: subscriptionName RPCTraceSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - oneOf: - description: `Returns transaction traces for the filtered addresses within a range of blocks.` - enum: filter - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"oneOf\": [ { \"description\": \"Returns transaction traces for the filtered addresses within a range of blocks.\", \"enum\": [ \"filter\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No Result \u00b6 subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCTraceSubscription ) Subscribe ( subscriptionName RPCTraceSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192 trace_transaction \u00b6 Transaction returns the structured logs created during the execution of EVM and returns them as a JSON object. Params (2) \u00b6 Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] } Result \u00b6 interface interface{} Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_transaction\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_transaction\", \"params\": [<hash>, <config>]}' Javascript Console 1 trace . transaction ( hash , config ); Source code 1 2 3 4 5 func ( api * TraceAPI ) Transaction ( ctx context . Context , hash common . Hash , config * TraceConfig ) ( interface {}, error ) { config = setTraceConfigDefaultTracer ( config ) return api . debugAPI . TraceTransaction ( ctx , hash , config ) } // Transaction returns the structured logs created during the execution of EVM // and returns them as a JSON object. View on GitHub \u2192 trace_unsubscribe \u00b6 Unsubscribe terminates an existing subscription by ID. Params (1) \u00b6 Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] } Result \u00b6 None Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 trace . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCTraceSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192","title":"Trace"},{"location":"JSON-RPC-API/modules/trace/#trace_block","text":"Block returns the structured logs created during the execution of EVM and returns them as a JSON object. The correct name will be TraceBlockByNumber, though we want to be compatible with Parity trace module.","title":"trace_block"},{"location":"JSON-RPC-API/modules/trace/#params-2","text":"Parameters must be given by position . 1: number rpc.BlockNumber Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - oneOf: - description: `The block height description` - enum: earliest, latest, pending - title: `blockNumberTag` - type: string - description: `Hex representation of a uint64` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: string - title: `blockNumberIdentifier` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"oneOf\": [ { \"description\": \"The block height description\", \"enum\": [ \"earliest\", \"latest\", \"pending\" ], \"title\": \"blockNumberTag\", \"type\": [ \"string\" ] }, { \"description\": \"Hex representation of a uint64\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": [ \"string\" ] } ], \"title\": \"blockNumberIdentifier\" } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/trace/#result","text":"interface []interface{} Required: \u2713 Yes Schema 1 2 3 4 5 6 - items: - additionalProperties: `true` - type: array Raw 1 2 3 4 5 6 7 8 9 10 { \"items\": [ { \"additionalProperties\": true } ], \"type\": [ \"array\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_block\", \"params\": [<number>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_block\", \"params\": [<number>, <config>]}' Javascript Console 1 trace . block ( number , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 func ( api * TraceAPI ) Block ( ctx context . Context , number rpc . BlockNumber , config * TraceConfig ) ([ // Block returns the structured logs created during the execution of // EVM and returns them as a JSON object. // The correct name will be TraceBlockByNumber, though we want to be compatible with Parity trace module. ] interface {}, error ) { config = setTraceConfigDefaultTracer ( config ) block , err := api . debugAPI . blockByNumber ( ctx , number ) if err != nil { return nil , err } traceResults , err := api . debugAPI . traceBlock ( ctx , block , config ) if err != nil { return nil , err } traceReward , err := api . traceBlockReward ( ctx , block , config ) if err != nil { return nil , err } traceUncleRewards , err := api . traceBlockUncleRewards ( ctx , block , config ) if err != nil { return nil , err } results := [] interface {}{} for _ , result := range traceResults { if result . Error != \"\" { return nil , errors . New ( result . Error ) } var tmp interface {} if err := json . Unmarshal ( result . Result .( json . RawMessage ), & tmp ); err != nil { return nil , err } if * config . Tracer == \"stateDiffTracer\" { results = append ( results , tmp ) } else { results = append ( results , tmp .([] interface {}) ... ) } } results = append ( results , traceReward ) for _ , uncleReward := range traceUncleRewards { results = append ( results , uncleReward ) } return results , nil } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_call","text":"Call lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block.","title":"trace_call"},{"location":"JSON-RPC-API/modules/trace/#params-3","text":"Parameters must be given by position . 1: args ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/trace/#result_1","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_call\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_call\", \"params\": [<args>, <blockNrOrHash>, <config>]}' Javascript Console 1 trace . call ( args , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 8 9 10 11 func ( api * TraceAPI ) Call ( ctx context . Context , args ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { config = setTraceCallConfigDefaultTracer ( config ) res , err := api . debugAPI . TraceCall ( ctx , args , blockNrOrHash , config ) if err != nil { return nil , err } traceConfig := getTraceConfigFromTraceCallConfig ( config ) return decorateResponse ( res , traceConfig ) } // Call lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_callmany","text":"CallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM if the given transaction was added on top of the provided block and returns them as a JSON object. You can provide -2 as a block number to trace on top of the pending block.","title":"trace_callMany"},{"location":"JSON-RPC-API/modules/trace/#params-3_1","text":"Parameters must be given by position . 1: txs []ethapi.TransactionArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 - items: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - data: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - type: object - type: array Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 { \"items\": [ { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"data\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } ], \"type\": [ \"array\" ] } 2: blockNrOrHash rpc.BlockNumberOrHash Required: \u2713 Yes 3: config *TraceCallConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 - additionalProperties: `false` - properties: - BlockOverrides: - additionalProperties: `false` - properties: - BaseFee: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Coinbase: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Difficulty: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - GasLimit: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - Number: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Random: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - Time: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - StateOverrides: - patternProperties: - .*: - additionalProperties: `false` - properties: - balance: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - code: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - state: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - stateDiff: - patternProperties: - .*: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `object` - type: `object` - type: `object` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"additionalProperties\": false, \"properties\": { \"BlockOverrides\": { \"additionalProperties\": false, \"properties\": { \"BaseFee\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Coinbase\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Difficulty\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"GasLimit\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"Number\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Random\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"Time\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" }, \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"StateOverrides\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"balance\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"code\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"state\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" }, \"stateDiff\": { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (3)"},{"location":"JSON-RPC-API/modules/trace/#result_2","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_callMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_callMany\", \"params\": [<txs>, <blockNrOrHash>, <config>]}' Javascript Console 1 trace . callMany ( txs , blockNrOrHash , config ); Source code 1 2 3 4 5 6 7 func ( api * TraceAPI ) CallMany ( ctx context . Context , txs [ // CallMany lets you trace a given eth_call. It collects the structured logs created during the execution of EVM // if the given transaction was added on top of the provided block and returns them as a JSON object. // You can provide -2 as a block number to trace on top of the pending block. ] ethapi . TransactionArgs , blockNrOrHash rpc . BlockNumberOrHash , config * TraceCallConfig ) ( interface {}, error ) { config = setTraceCallConfigDefaultTracer ( config ) return api . debugAPI . TraceCallMany ( ctx , txs , blockNrOrHash , config ) } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_filter","text":"Filter configures a new tracer according to the provided configuration, and executes all the transactions contained within. The return value will be one item per transaction, dependent on the requested tracer.","title":"trace_filter"},{"location":"JSON-RPC-API/modules/trace/#params-2_1","text":"Parameters must be given by position . 1: args TraceFilterArgs Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - additionalProperties: `false` - properties: - after: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - count: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - fromAddress: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - fromBlock: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - toAddress: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - toBlock: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 { \"additionalProperties\": false, \"properties\": { \"after\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"count\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"fromAddress\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"fromBlock\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"toAddress\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"toBlock\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/trace/#result_3","text":"*rpc.Subscription Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_3","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_subscribe\", \"params\": [\"filter\", <args>, <config>]}' Source code 1 2 3 4 5 6 7 8 func ( api * TraceAPI ) Filter ( ctx context . Context , args TraceFilterArgs , config * TraceConfig ) ( * rpc . Subscription , error ) { config = setTraceConfigDefaultTracer ( config ) start := rpc . BlockNumber ( args . FromBlock ) end := rpc . BlockNumber ( args . ToBlock ) return api . debugAPI . TraceChain ( ctx , start , end , config ) } // Filter configures a new tracer according to the provided configuration, and // executes all the transactions contained within. The return value will be one item // per transaction, dependent on the requested tracer. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_subscribe","text":"Subscribe creates a subscription to an event channel. Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections.","title":"trace_subscribe"},{"location":"JSON-RPC-API/modules/trace/#params-2_2","text":"Parameters must be given by position . 1: subscriptionName RPCTraceSubscriptionParamsName Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 - oneOf: - description: `Returns transaction traces for the filtered addresses within a range of blocks.` - enum: filter - type: string - title: `subscriptionName` Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"oneOf\": [ { \"description\": \"Returns transaction traces for the filtered addresses within a range of blocks.\", \"enum\": [ \"filter\" ], \"type\": [ \"string\" ] } ], \"title\": \"subscriptionName\" } 2: subscriptionOptions interface{} Required: No","title":"Params (2)"},{"location":"JSON-RPC-API/modules/trace/#result_4","text":"subscriptionID rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_4","text":"Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_subscribe\", \"params\": [<subscriptionName>, <subscriptionOptions>]}' Source code 1 2 3 4 func ( sub * RPCTraceSubscription ) Subscribe ( subscriptionName RPCTraceSubscriptionParamsName , subscriptionOptions interface {}) ( subscriptionID rpc . ID , err error ) { return } // Subscribe creates a subscription to an event channel. // Subscriptions are not available over HTTP; they are only available over WS, IPC, and Process connections. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_transaction","text":"Transaction returns the structured logs created during the execution of EVM and returns them as a JSON object.","title":"trace_transaction"},{"location":"JSON-RPC-API/modules/trace/#params-2_3","text":"Parameters must be given by position . 1: hash common.Hash Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } 2: config *TraceConfig Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 - additionalProperties: `false` - properties: - Debug: - type: `boolean` - DisableStack: - type: `boolean` - DisableStorage: - type: `boolean` - EnableMemory: - type: `boolean` - EnableReturnData: - type: `boolean` - Limit: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - NestedTraceOutput: - type: `boolean` - Reexec: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - Timeout: - type: `string` - Tracer: - type: `string` - TracerConfig: - media: - binaryEncoding: `base64` - type: `string` - overrides: - additionalProperties: `true` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"additionalProperties\": false, \"properties\": { \"Debug\": { \"type\": \"boolean\" }, \"DisableStack\": { \"type\": \"boolean\" }, \"DisableStorage\": { \"type\": \"boolean\" }, \"EnableMemory\": { \"type\": \"boolean\" }, \"EnableReturnData\": { \"type\": \"boolean\" }, \"Limit\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"NestedTraceOutput\": { \"type\": \"boolean\" }, \"Reexec\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"Timeout\": { \"type\": \"string\" }, \"Tracer\": { \"type\": \"string\" }, \"TracerConfig\": { \"media\": { \"binaryEncoding\": \"base64\" }, \"type\": \"string\" }, \"overrides\": { \"additionalProperties\": true } }, \"type\": [ \"object\" ] }","title":"Params (2)"},{"location":"JSON-RPC-API/modules/trace/#result_5","text":"interface interface{} Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_5","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_transaction\", \"params\": [<hash>, <config>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_transaction\", \"params\": [<hash>, <config>]}' Javascript Console 1 trace . transaction ( hash , config ); Source code 1 2 3 4 5 func ( api * TraceAPI ) Transaction ( ctx context . Context , hash common . Hash , config * TraceConfig ) ( interface {}, error ) { config = setTraceConfigDefaultTracer ( config ) return api . debugAPI . TraceTransaction ( ctx , hash , config ) } // Transaction returns the structured logs created during the execution of EVM // and returns them as a JSON object. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/trace/#trace_unsubscribe","text":"Unsubscribe terminates an existing subscription by ID.","title":"trace_unsubscribe"},{"location":"JSON-RPC-API/modules/trace/#params-1","text":"Parameters must be given by position . 1: id rpc.ID Required: \u2713 Yes Schema 1 2 3 - description: `Subscription identifier` - title: `subscriptionID` - type: string Raw 1 2 3 4 5 6 7 { \"description\": \"Subscription identifier\", \"title\": \"subscriptionID\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/trace/#result_6","text":"None","title":"Result"},{"location":"JSON-RPC-API/modules/trace/#client-method-invocation-examples_6","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"trace_unsubscribe\", \"params\": [<id>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"trace_unsubscribe\", \"params\": [<id>]}' Javascript Console 1 trace . unsubscribe ( id ); Source code 1 2 3 func ( sub * RPCTraceSubscription ) Unsubscribe ( id rpc . ID ) error { return nil } // Unsubscribe terminates an existing subscription by ID. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/txpool/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 txpool_content \u00b6 Content returns the transactions contained within the transaction pool. Params (0) \u00b6 None Result \u00b6 mapstringmapstringmapstringRPCTransaction map[string]map[string]map[string]*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 - patternProperties: - .*: - patternProperties: - .*: - patternProperties: - .*: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_content\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_content\", \"params\": []}' Javascript Console 1 txpool . content (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func ( s * TxPoolAPI ) Content () map // Content returns the transactions contained within the transaction pool. [ string ] map [ string ] map [ string ] * RPCTransaction { content := map [ string ] map [ string ] map [ string ] * RPCTransaction { \"pending\" : make ( map [ string ] map [ string ] * RPCTransaction ), \"queued\" : make ( map [ string ] map [ string ] * RPCTransaction )} pending , queue := s . b . TxPoolContent () curHeader := s . b . CurrentHeader () for account , txs := range pending { dump := make ( map [ string ] * RPCTransaction ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"pending\" ][ account . Hex ()] = dump } for account , txs := range queue { dump := make ( map [ string ] * RPCTransaction ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"queued\" ][ account . Hex ()] = dump } return content } View on GitHub \u2192 txpool_contentFrom \u00b6 ContentFrom returns the transactions contained within the transaction pool. Params (1) \u00b6 Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] } Result \u00b6 mapstringmapstringRPCTransaction map[string]map[string]*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 - patternProperties: - .*: - patternProperties: - .*: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_contentFrom\", \"params\": [<addr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_contentFrom\", \"params\": [<addr>]}' Javascript Console 1 txpool . contentFrom ( addr ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * TxPoolAPI ) ContentFrom ( addr common . Address ) map // ContentFrom returns the transactions contained within the transaction pool. [ string ] map [ string ] * RPCTransaction { content := make ( map [ string ] map [ string ] * RPCTransaction , 2 ) pending , queue := s . b . TxPoolContentFrom ( addr ) curHeader := s . b . CurrentHeader () dump := make ( map [ string ] * RPCTransaction , len ( pending )) for _ , tx := range pending { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"pending\" ] = dump dump = make ( map [ string ] * RPCTransaction , len ( queue )) for _ , tx := range queue { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"queued\" ] = dump return content } View on GitHub \u2192 txpool_inspect \u00b6 Inspect retrieves the content of the transaction pool and flattens it into an easily inspectable list. Params (0) \u00b6 None Result \u00b6 mapstringmapstringmapstringstring map[string]map[string]map[string]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - patternProperties: - .*: - patternProperties: - .*: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_inspect\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_inspect\", \"params\": []}' Javascript Console 1 txpool . inspect (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func ( s * TxPoolAPI ) Inspect () map // Inspect retrieves the content of the transaction pool and flattens it into an // easily inspectable list. [ string ] map [ string ] map [ string ] string { content := map [ string ] map [ string ] map [ string ] string { \"pending\" : make ( map [ string ] map [ string ] string ), \"queued\" : make ( map [ string ] map [ string ] string )} pending , queue := s . b . TxPoolContent () var format = func ( tx * types . Transaction ) string { if to := tx . To (); to != nil { return fmt . Sprintf ( \"%s: %v wei + %v gas \u00d7 %v wei\" , tx . To (). Hex (), tx . Value (), tx . Gas (), tx . GasPrice ()) } return fmt . Sprintf ( \"contract creation: %v wei + %v gas \u00d7 %v wei\" , tx . Value (), tx . Gas (), tx . GasPrice ()) } for account , txs := // Define a formatter to flatten a transaction into a string range pending { dump := make ( map [ string ] string ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = format ( tx ) } content [ \"pending\" ][ account . Hex ()] = dump } for account , txs := range queue { dump := make ( map [ string ] string ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = format ( tx ) } content [ \"queued\" ][ account . Hex ()] = dump } return content } View on GitHub \u2192 txpool_status \u00b6 Status returns the number of pending and queued transaction in the pool. Params (0) \u00b6 None Result \u00b6 mapstringhexutilUint map[string]hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - patternProperties: - .*: - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": \"string\" } }, \"type\": [ \"object\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_status\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_status\", \"params\": []}' Javascript Console 1 txpool . status (); Source code 1 2 3 4 5 func ( s * TxPoolAPI ) Status () map // Status returns the number of pending and queued transaction in the pool. [ string ] hexutil . Uint { pending , queue := s . b . Stats () return map [ string ] hexutil . Uint { \"pending\" : hexutil . Uint ( pending ), \"queued\" : hexutil . Uint ( queue )} } View on GitHub \u2192","title":"Txpool"},{"location":"JSON-RPC-API/modules/txpool/#txpool_content","text":"Content returns the transactions contained within the transaction pool.","title":"txpool_content"},{"location":"JSON-RPC-API/modules/txpool/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/txpool/#result","text":"mapstringmapstringmapstringRPCTransaction map[string]map[string]map[string]*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 - patternProperties: - .*: - patternProperties: - .*: - patternProperties: - .*: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/txpool/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_content\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_content\", \"params\": []}' Javascript Console 1 txpool . content (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func ( s * TxPoolAPI ) Content () map // Content returns the transactions contained within the transaction pool. [ string ] map [ string ] map [ string ] * RPCTransaction { content := map [ string ] map [ string ] map [ string ] * RPCTransaction { \"pending\" : make ( map [ string ] map [ string ] * RPCTransaction ), \"queued\" : make ( map [ string ] map [ string ] * RPCTransaction )} pending , queue := s . b . TxPoolContent () curHeader := s . b . CurrentHeader () for account , txs := range pending { dump := make ( map [ string ] * RPCTransaction ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"pending\" ][ account . Hex ()] = dump } for account , txs := range queue { dump := make ( map [ string ] * RPCTransaction ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"queued\" ][ account . Hex ()] = dump } return content } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/txpool/#txpool_contentfrom","text":"ContentFrom returns the transactions contained within the transaction pool.","title":"txpool_contentFrom"},{"location":"JSON-RPC-API/modules/txpool/#params-1","text":"Parameters must be given by position . 1: addr common.Address Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of a Keccak 256 hash POINTER` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of a Keccak 256 hash POINTER\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/txpool/#result_1","text":"mapstringmapstringRPCTransaction map[string]map[string]*RPCTransaction Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 - patternProperties: - .*: - patternProperties: - .*: - additionalProperties: `false` - properties: - accessList: - items: - additionalProperties: `false` - properties: - address: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - storageKeys: - items: - description: `Hex representation of a Keccak 256 hash` - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - type: `array` - type: `object` - type: `array` - blockHash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - blockNumber: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - chainId: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - from: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - gas: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - gasPrice: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - hash: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - input: - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: `string` - maxFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - maxPriorityFeePerGas: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - nonce: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - r: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - s: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - to: - pattern: `^0x[a-fA-F\\d]{64}$` - title: `keccak` - type: `string` - transactionIndex: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - v: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - value: - pattern: `^0x[a-fA-F0-9]+$` - title: `integer` - type: `string` - yParity: - pattern: `^0x([a-fA-F\\d])+$` - title: `uint64` - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"additionalProperties\": false, \"properties\": { \"accessList\": { \"items\": { \"additionalProperties\": false, \"properties\": { \"address\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"storageKeys\": { \"items\": { \"description\": \"Hex representation of a Keccak 256 hash\", \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"type\": \"array\" } }, \"type\": \"object\" }, \"type\": \"array\" }, \"blockHash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"blockNumber\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"chainId\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"from\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"gas\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"gasPrice\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"hash\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"input\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": \"string\" }, \"maxFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"maxPriorityFeePerGas\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"nonce\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"r\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"s\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"to\": { \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\", \"title\": \"keccak\", \"type\": \"string\" }, \"transactionIndex\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"type\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" }, \"v\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"value\": { \"pattern\": \"^0x[a-fA-F0-9]+$\", \"title\": \"integer\", \"type\": \"string\" }, \"yParity\": { \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint64\", \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/txpool/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_contentFrom\", \"params\": [<addr>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_contentFrom\", \"params\": [<addr>]}' Javascript Console 1 txpool . contentFrom ( addr ); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func ( s * TxPoolAPI ) ContentFrom ( addr common . Address ) map // ContentFrom returns the transactions contained within the transaction pool. [ string ] map [ string ] * RPCTransaction { content := make ( map [ string ] map [ string ] * RPCTransaction , 2 ) pending , queue := s . b . TxPoolContentFrom ( addr ) curHeader := s . b . CurrentHeader () dump := make ( map [ string ] * RPCTransaction , len ( pending )) for _ , tx := range pending { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"pending\" ] = dump dump = make ( map [ string ] * RPCTransaction , len ( queue )) for _ , tx := range queue { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = NewRPCPendingTransaction ( tx , curHeader , s . b . ChainConfig ()) } content [ \"queued\" ] = dump return content } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/txpool/#txpool_inspect","text":"Inspect retrieves the content of the transaction pool and flattens it into an easily inspectable list.","title":"txpool_inspect"},{"location":"JSON-RPC-API/modules/txpool/#params-0_1","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/txpool/#result_2","text":"mapstringmapstringmapstringstring map[string]map[string]map[string]string Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - patternProperties: - .*: - patternProperties: - .*: - patternProperties: - .*: - type: `string` - type: `object` - type: `object` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"patternProperties\": { \".*\": { \"type\": \"string\" } }, \"type\": \"object\" } }, \"type\": \"object\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/txpool/#client-method-invocation-examples_2","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_inspect\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_inspect\", \"params\": []}' Javascript Console 1 txpool . inspect (); Source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func ( s * TxPoolAPI ) Inspect () map // Inspect retrieves the content of the transaction pool and flattens it into an // easily inspectable list. [ string ] map [ string ] map [ string ] string { content := map [ string ] map [ string ] map [ string ] string { \"pending\" : make ( map [ string ] map [ string ] string ), \"queued\" : make ( map [ string ] map [ string ] string )} pending , queue := s . b . TxPoolContent () var format = func ( tx * types . Transaction ) string { if to := tx . To (); to != nil { return fmt . Sprintf ( \"%s: %v wei + %v gas \u00d7 %v wei\" , tx . To (). Hex (), tx . Value (), tx . Gas (), tx . GasPrice ()) } return fmt . Sprintf ( \"contract creation: %v wei + %v gas \u00d7 %v wei\" , tx . Value (), tx . Gas (), tx . GasPrice ()) } for account , txs := // Define a formatter to flatten a transaction into a string range pending { dump := make ( map [ string ] string ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = format ( tx ) } content [ \"pending\" ][ account . Hex ()] = dump } for account , txs := range queue { dump := make ( map [ string ] string ) for _ , tx := range txs { dump [ fmt . Sprintf ( \"%d\" , tx . Nonce ())] = format ( tx ) } content [ \"queued\" ][ account . Hex ()] = dump } return content } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/txpool/#txpool_status","text":"Status returns the number of pending and queued transaction in the pool.","title":"txpool_status"},{"location":"JSON-RPC-API/modules/txpool/#params-0_2","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/txpool/#result_3","text":"mapstringhexutilUint map[string]hexutil.Uint Required: \u2713 Yes Schema 1 2 3 4 5 6 7 8 9 - patternProperties: - .*: - description: `Hex representation of a uint` - pattern: `^0x([a-fA-F\\d])+$` - title: `uint` - type: `string` - type: object Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"patternProperties\": { \".*\": { \"description\": \"Hex representation of a uint\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"uint\", \"type\": \"string\" } }, \"type\": [ \"object\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/txpool/#client-method-invocation-examples_3","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"txpool_status\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"txpool_status\", \"params\": []}' Javascript Console 1 txpool . status (); Source code 1 2 3 4 5 func ( s * TxPoolAPI ) Status () map // Status returns the number of pending and queued transaction in the pool. [ string ] hexutil . Uint { pending , queue := s . b . Stats () return map [ string ] hexutil . Uint { \"pending\" : hexutil . Uint ( pending ), \"queued\" : hexutil . Uint ( queue )} } View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/web3/","text":"Entity Version Source 1.12.14-unstable/generated-at:2023-09-04T08:02:34-06:00 OpenRPC 1.2.6 web3_clientVersion \u00b6 ClientVersion returns the node name Params (0) \u00b6 None Result \u00b6 string Required: \u2713 Yes Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"web3_clientVersion\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_clientVersion\", \"params\": []}' Javascript Console 1 web3 . clientVersion (); Source code 1 2 3 func ( s * web3API ) ClientVersion () string { return s . stack . Server (). Name } // ClientVersion returns the node name View on GitHub \u2192 web3_sha3 \u00b6 Sha3 applies the ethereum sha3 implementation on the input. It assumes the input is hex encoded. Params (1) \u00b6 Parameters must be given by position . 1: input hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Result \u00b6 hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] } Client Method Invocation Examples \u00b6 Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"web3_sha3\", \"params\": [<input>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_sha3\", \"params\": [<input>]}' Javascript Console 1 web3 . sha3 ( input ); Source code 1 2 3 4 func ( s * web3API ) Sha3 ( input hexutil . Bytes ) hexutil . Bytes { return crypto . Keccak256 ( input ) } // Sha3 applies the ethereum sha3 implementation on the input. // It assumes the input is hex encoded. View on GitHub \u2192","title":"Web3"},{"location":"JSON-RPC-API/modules/web3/#web3_clientversion","text":"ClientVersion returns the node name","title":"web3_clientVersion"},{"location":"JSON-RPC-API/modules/web3/#params-0","text":"None","title":"Params (0)"},{"location":"JSON-RPC-API/modules/web3/#result","text":"string Required: \u2713 Yes","title":"Result"},{"location":"JSON-RPC-API/modules/web3/#client-method-invocation-examples","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"web3_clientVersion\", \"params\": []}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_clientVersion\", \"params\": []}' Javascript Console 1 web3 . clientVersion (); Source code 1 2 3 func ( s * web3API ) ClientVersion () string { return s . stack . Server (). Name } // ClientVersion returns the node name View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"JSON-RPC-API/modules/web3/#web3_sha3","text":"Sha3 applies the ethereum sha3 implementation on the input. It assumes the input is hex encoded.","title":"web3_sha3"},{"location":"JSON-RPC-API/modules/web3/#params-1","text":"Parameters must be given by position . 1: input hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Params (1)"},{"location":"JSON-RPC-API/modules/web3/#result_1","text":"hexutil.Bytes Required: \u2713 Yes Schema 1 2 3 4 - description: `Hex representation of some bytes` - pattern: `^0x([a-fA-F\\d])+$` - title: `dataWord` - type: string Raw 1 2 3 4 5 6 7 8 { \"description\": \"Hex representation of some bytes\", \"pattern\": \"^0x([a-fA-F\\\\d])+$\", \"title\": \"dataWord\", \"type\": [ \"string\" ] }","title":"Result"},{"location":"JSON-RPC-API/modules/web3/#client-method-invocation-examples_1","text":"Shell HTTP 1 curl -X POST -H \"Content-Type: application/json\" http://localhost:8545 --data '{\"jsonrpc\": \"2.0\", \"id\": 42, \"method\": \"web3_sha3\", \"params\": [<input>]}' Shell WebSocket 1 wscat -c ws://localhost:8546 -x '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_sha3\", \"params\": [<input>]}' Javascript Console 1 web3 . sha3 ( input ); Source code 1 2 3 4 func ( s * web3API ) Sha3 ( input hexutil . Bytes ) hexutil . Bytes { return crypto . Keccak256 ( input ) } // Sha3 applies the ethereum sha3 implementation on the input. // It assumes the input is hex encoded. View on GitHub \u2192","title":"Client Method Invocation Examples"},{"location":"core/","text":"Core-Geth \u00b6 CoreGeth is sponsored by and maintained with the leadership of ETC Labs with an obvious core intention of stewarding the Ethereum Classic opinion that the reversion of transactions in inconvenient situations shouldn\u2019t be permissible. But the spirit of the project intends to reach beyond Ethereum and Ethereum Classic, and indeed to reimagine an EVM node software that approaches the EVM-based protocols as technology that can \u2013 and should \u2013 be generalizable. While CoreGeth inherits from and exposes complete feature parity with Ethereum Foundation\u2019s ethereum/go-ethereum , there are quite few things that make CoreGeth unique. Additional Features \u00b6 CoreGeth maintainers are regular contributors upstream , but not all CoreGeth features are practicable or accepted there. The following categories document features specific to CoreGeth that ethereum/go-ethereum can\u2019t, or won\u2019t, implement. Extended RPC API \u00b6 Comprehensive RPC API Service Discovery \u00b6 CoreGeth features a synthetic build/+runtime service discovery API, allowing you to get a well structured description of all available methods, their parameters, and results. RPC Service Documentation For complete documentation of the available JSON RPC APIs, please see the JSON RPC API page . Additional methods and options \u00b6 Available trace_block and trace_transaction RPC API congruent to the OpenEthereum API (including a 1000x performance improvement vs. go-ethereum\u2019s trace_transaction in some cases). TODO: Talk more about this! And examples! Added debug_removePendingTransaction API method ( #203 ) Comprehensive service discovery with OpenRPC through method rpc.discover . EVMCv7 Support \u00b6 EVMCv7 support allows use with external EVMs (including EWASM). See Running Geth with an External VM for more information. Remote Store for Ancient Chaindata \u00b6 Remote freezer, store your ancient data on Amazon S3 or Storj. TODO : Talk more about this, provide examples. Extended CLI \u00b6 --eth.protocols configures eth/x protocol prioritization, eg. 65,64,63 . Developer Features: Tools \u00b6 A developer mode --dev.pow able to mock Proof-of-Work block schemas and production at representative Poisson intervals. --dev.poisson configures Poisson intervals for block emission Chain configuration acceptance of OpenEthereum and go-ethereum chain configuration files (and the extensibility to support any chain configuration schema). At the code level, a 1:1 EIP/ECIP specification to implementation pattern; disentangling Ethereum Foundation hard fork opinions from code. This yields more readable code, more precise naming and conceptual representation, more testable code, and a massive step toward Ethereum as a generalizeable technology. copydb will default to a sane fallback value if no parameter is passed for the second <ancient/path> argument. The faucet command supports an --attach option allowing the program to reference an already-running node instance (assuming it has an available RPC API) instead of restricting the faucet to a dedicated light client. Likewise, a --syncmode=[full|fast|light] option is provided for networks where LES support may be lacking. Risk Management \u00b6 Public chaindata regression testing run at each push to master . Extended Improvement Proposal Support (EIP, ECIP, *IP) \u00b6 Myriad additional ECIP support: ECBP1100 (aka MESS, an \u201cartificial finality\u201d gadget) ECIP1099 (DAG growth limit) ECIP1014 (defuse difficulty bomb), etc. Out-of-the-box support for Ethereum Classic. Chain configs are selected as ./build/bin/geth --<chain> . For a list of supported networks and their CLI options, use ./build/bin/geth --help . Divergent Design \u00b6 How CoreGeth is built differently than ethereum/go-ethereum. Developer Features: Code \u00b6 One of CoreGeth\u2019s most significant divergences from ethereum/go-ethereum at the code level is a reimagining (read: massive overhaul ) of the ChainConfig data type and its methods. At ethereum/go-ethereum the ChainConfig makes protocol-facing feature activation decisions as follows: 1 2 3 4 5 blockNumber := big . NewInt ( 0 ) config := params . MainnetChainConfig if config . IsByzantium ( blockNumber ) { // do a special thing for post-Byzantium chains } This, for the uninitiated developer, raises some questions: - What\u2019s Byzantium? - Which of the nine distinct Byzantium upgrades is this implementing? - Does feature Byzantium.X depend on also having Byzantium.Y activated? The developers of ethereum/go-ethereum have made this architectural decision because ethereum/go-ethereum is only designed and intended to support one chain: Ethereum . From this perspective, configurability presents a risk rather than a desirable feature. While a hardcoded feature-group pattern (ie hardfork upgrades ) in some ways mitigates a risk of \u201cmovable parts,\u201d and undesirable or unintended feature interactions, it also presents a massive hurdle for extensibility. A metaphor Consider the metaphor of the wiring the electrical circuits of a house. With ethereum/go-ethereum\u2019s design, the television, the kitchen lights, the garbage disposal, and the garage door are all controlled by the same switch. If you want to watch TV, you also have to have the kitchen lights on, the garbage disposal running, and the garage door open. For an electrician whose only concern is meeting the arbitrary specifications of an eccentric customer who demands that their house work in this very strange way (forever), hard-installing these devices on the same circuit makes sense. The electrician commits to only serving one customer with this house, and the customer commits to their wiring preference. But, for anyone else looking at this house, the design is absurd. Another home-owner may want to use a TV and a garage door in their own designs, but maybe don\u2019t want them to be codependent. Building the feature of a garbage disposal as being inextricable from a TV \u2013 from the perspective of a technologist (or consumer products designer, or anyone interested in these technologies as generalizeable things, rather than details of an eccentric house) \u2013 this arbitrary feature-bundling is patently absurd. This is an Ethereum-as-technology perspective versus an Ethereum-as-network perspective, and reimagining a home where you can have the kitchen lights on without also turning the TV on is one of the things CoreGeth does. This same code as above, in CoreGeth, would look as follows: 1 2 3 4 5 blockNumber := big . NewInt ( 0 ) config := params . MainnetChainConfig if config . IsEnabled ( config . EIP658Transition , blockNumber ) { // do a special thing for post-EIP658 chains } Interface Reference The complete interface pattern for supported feature methods can be found here: https://github.com/etclabscore/core-geth/blob/master/params/types/ctypes/configurator_iface.go The implicit feature-group Byzantium is deconstructed into its composite features, using EIPs and ECIP specifications as conceptual delineations as well as naming patterns. This makes the implementation of Improvement Proposal specifications referencable and readily testable. You can look up the implementation of EIP658 and see directly how it modifies transaction encoding, without having to disambiguate its implementation from state trie cleaning, gas repricing, opcode additions, block reward changes, or difficulty adjustments. You can test block reward modifications without also having to test difficulty adjustments (\u2026 and state root differences, and \u2026). Configuration Data Types Not only does CoreGeth\u2019s interface pattern provide descriptive, articulate code; it also allows for the support of arbitrary configuration data types ; CoreGeth supports configuration via ethereum/go-ethereum\u2019s genesis data structure (eg. geth dumpgenesis genesis.json ) as well as OpenEthereum\u2019s JSON configuration schema. Extending support for any other configuration schema is likewise possible. As should be obvious by now, this also allows selective feature adoption for configurations that don\u2019t want to bundle changes exactly like the Ethereum Foundation has. For example, without this decomposition, Ethereum Classic would have had to accept and (re)implement the Difficulty Bomb and reduce block rewards in order to adopt a change to the RLP encoding of transaction receipts change :exploding_head: Limitations \u00b6 Things ethereum/go-ethereum can or will do that CoreGeth won\u2019t, or doesn\u2019t by default. A huge and diverse number of default pipeline-delivered build targets. This is a defaults and configuration sanity challenge for CoreGeth. We\u2019re vastly outnumbered by ethereum/go-ethereum maintainers and contributors, and ensuring proper delivery of a whole bunch of diverse artifacts is beyond our capacity. With that said, just because CoreGeth doesn\u2019t provide artifacts for a given architecture or OS doesn\u2019t mean it can\u2019t. If ethereum/go-ethereum can build and package for it, then with some elbow grease, CoreGeth can too. The puppeth CLI program has been removed . This is a \u201cwizard\u201d-style interactive program that helps beginners configure chain and network settings. Trim absolute file paths during build. As of a somewhat-recent Go version, go build provides a -trim flag which reduces the size of the binaries and anonymizes the build environment. This was removed because stripping file paths caused automatic service discovery features to break (they depend, in part, on source file path availability for build-time AST and runtime reflection).","title":"About"},{"location":"core/#core-geth","text":"CoreGeth is sponsored by and maintained with the leadership of ETC Labs with an obvious core intention of stewarding the Ethereum Classic opinion that the reversion of transactions in inconvenient situations shouldn\u2019t be permissible. But the spirit of the project intends to reach beyond Ethereum and Ethereum Classic, and indeed to reimagine an EVM node software that approaches the EVM-based protocols as technology that can \u2013 and should \u2013 be generalizable. While CoreGeth inherits from and exposes complete feature parity with Ethereum Foundation\u2019s ethereum/go-ethereum , there are quite few things that make CoreGeth unique.","title":"Core-Geth"},{"location":"core/#additional-features","text":"CoreGeth maintainers are regular contributors upstream , but not all CoreGeth features are practicable or accepted there. The following categories document features specific to CoreGeth that ethereum/go-ethereum can\u2019t, or won\u2019t, implement.","title":"Additional Features"},{"location":"core/#extended-rpc-api","text":"","title":"Extended RPC API"},{"location":"core/#comprehensive-rpc-api-service-discovery","text":"CoreGeth features a synthetic build/+runtime service discovery API, allowing you to get a well structured description of all available methods, their parameters, and results. RPC Service Documentation For complete documentation of the available JSON RPC APIs, please see the JSON RPC API page .","title":"Comprehensive RPC API Service Discovery"},{"location":"core/#additional-methods-and-options","text":"Available trace_block and trace_transaction RPC API congruent to the OpenEthereum API (including a 1000x performance improvement vs. go-ethereum\u2019s trace_transaction in some cases). TODO: Talk more about this! And examples! Added debug_removePendingTransaction API method ( #203 ) Comprehensive service discovery with OpenRPC through method rpc.discover .","title":"Additional methods and options"},{"location":"core/#evmcv7-support","text":"EVMCv7 support allows use with external EVMs (including EWASM). See Running Geth with an External VM for more information.","title":"EVMCv7 Support"},{"location":"core/#remote-store-for-ancient-chaindata","text":"Remote freezer, store your ancient data on Amazon S3 or Storj. TODO : Talk more about this, provide examples.","title":"Remote Store for Ancient Chaindata"},{"location":"core/#extended-cli","text":"--eth.protocols configures eth/x protocol prioritization, eg. 65,64,63 .","title":"Extended CLI"},{"location":"core/#developer-features-tools","text":"A developer mode --dev.pow able to mock Proof-of-Work block schemas and production at representative Poisson intervals. --dev.poisson configures Poisson intervals for block emission Chain configuration acceptance of OpenEthereum and go-ethereum chain configuration files (and the extensibility to support any chain configuration schema). At the code level, a 1:1 EIP/ECIP specification to implementation pattern; disentangling Ethereum Foundation hard fork opinions from code. This yields more readable code, more precise naming and conceptual representation, more testable code, and a massive step toward Ethereum as a generalizeable technology. copydb will default to a sane fallback value if no parameter is passed for the second <ancient/path> argument. The faucet command supports an --attach option allowing the program to reference an already-running node instance (assuming it has an available RPC API) instead of restricting the faucet to a dedicated light client. Likewise, a --syncmode=[full|fast|light] option is provided for networks where LES support may be lacking.","title":"Developer Features: Tools"},{"location":"core/#risk-management","text":"Public chaindata regression testing run at each push to master .","title":"Risk Management"},{"location":"core/#extended-improvement-proposal-support-eip-ecip-ip","text":"Myriad additional ECIP support: ECBP1100 (aka MESS, an \u201cartificial finality\u201d gadget) ECIP1099 (DAG growth limit) ECIP1014 (defuse difficulty bomb), etc. Out-of-the-box support for Ethereum Classic. Chain configs are selected as ./build/bin/geth --<chain> . For a list of supported networks and their CLI options, use ./build/bin/geth --help .","title":"Extended Improvement Proposal Support (EIP, ECIP, *IP)"},{"location":"core/#divergent-design","text":"How CoreGeth is built differently than ethereum/go-ethereum.","title":"Divergent Design"},{"location":"core/#developer-features-code","text":"One of CoreGeth\u2019s most significant divergences from ethereum/go-ethereum at the code level is a reimagining (read: massive overhaul ) of the ChainConfig data type and its methods. At ethereum/go-ethereum the ChainConfig makes protocol-facing feature activation decisions as follows: 1 2 3 4 5 blockNumber := big . NewInt ( 0 ) config := params . MainnetChainConfig if config . IsByzantium ( blockNumber ) { // do a special thing for post-Byzantium chains } This, for the uninitiated developer, raises some questions: - What\u2019s Byzantium? - Which of the nine distinct Byzantium upgrades is this implementing? - Does feature Byzantium.X depend on also having Byzantium.Y activated? The developers of ethereum/go-ethereum have made this architectural decision because ethereum/go-ethereum is only designed and intended to support one chain: Ethereum . From this perspective, configurability presents a risk rather than a desirable feature. While a hardcoded feature-group pattern (ie hardfork upgrades ) in some ways mitigates a risk of \u201cmovable parts,\u201d and undesirable or unintended feature interactions, it also presents a massive hurdle for extensibility. A metaphor Consider the metaphor of the wiring the electrical circuits of a house. With ethereum/go-ethereum\u2019s design, the television, the kitchen lights, the garbage disposal, and the garage door are all controlled by the same switch. If you want to watch TV, you also have to have the kitchen lights on, the garbage disposal running, and the garage door open. For an electrician whose only concern is meeting the arbitrary specifications of an eccentric customer who demands that their house work in this very strange way (forever), hard-installing these devices on the same circuit makes sense. The electrician commits to only serving one customer with this house, and the customer commits to their wiring preference. But, for anyone else looking at this house, the design is absurd. Another home-owner may want to use a TV and a garage door in their own designs, but maybe don\u2019t want them to be codependent. Building the feature of a garbage disposal as being inextricable from a TV \u2013 from the perspective of a technologist (or consumer products designer, or anyone interested in these technologies as generalizeable things, rather than details of an eccentric house) \u2013 this arbitrary feature-bundling is patently absurd. This is an Ethereum-as-technology perspective versus an Ethereum-as-network perspective, and reimagining a home where you can have the kitchen lights on without also turning the TV on is one of the things CoreGeth does. This same code as above, in CoreGeth, would look as follows: 1 2 3 4 5 blockNumber := big . NewInt ( 0 ) config := params . MainnetChainConfig if config . IsEnabled ( config . EIP658Transition , blockNumber ) { // do a special thing for post-EIP658 chains } Interface Reference The complete interface pattern for supported feature methods can be found here: https://github.com/etclabscore/core-geth/blob/master/params/types/ctypes/configurator_iface.go The implicit feature-group Byzantium is deconstructed into its composite features, using EIPs and ECIP specifications as conceptual delineations as well as naming patterns. This makes the implementation of Improvement Proposal specifications referencable and readily testable. You can look up the implementation of EIP658 and see directly how it modifies transaction encoding, without having to disambiguate its implementation from state trie cleaning, gas repricing, opcode additions, block reward changes, or difficulty adjustments. You can test block reward modifications without also having to test difficulty adjustments (\u2026 and state root differences, and \u2026). Configuration Data Types Not only does CoreGeth\u2019s interface pattern provide descriptive, articulate code; it also allows for the support of arbitrary configuration data types ; CoreGeth supports configuration via ethereum/go-ethereum\u2019s genesis data structure (eg. geth dumpgenesis genesis.json ) as well as OpenEthereum\u2019s JSON configuration schema. Extending support for any other configuration schema is likewise possible. As should be obvious by now, this also allows selective feature adoption for configurations that don\u2019t want to bundle changes exactly like the Ethereum Foundation has. For example, without this decomposition, Ethereum Classic would have had to accept and (re)implement the Difficulty Bomb and reduce block rewards in order to adopt a change to the RLP encoding of transaction receipts change :exploding_head:","title":"Developer Features: Code"},{"location":"core/#limitations","text":"Things ethereum/go-ethereum can or will do that CoreGeth won\u2019t, or doesn\u2019t by default. A huge and diverse number of default pipeline-delivered build targets. This is a defaults and configuration sanity challenge for CoreGeth. We\u2019re vastly outnumbered by ethereum/go-ethereum maintainers and contributors, and ensuring proper delivery of a whole bunch of diverse artifacts is beyond our capacity. With that said, just because CoreGeth doesn\u2019t provide artifacts for a given architecture or OS doesn\u2019t mean it can\u2019t. If ethereum/go-ethereum can build and package for it, then with some elbow grease, CoreGeth can too. The puppeth CLI program has been removed . This is a \u201cwizard\u201d-style interactive program that helps beginners configure chain and network settings. Trim absolute file paths during build. As of a somewhat-recent Go version, go build provides a -trim flag which reduces the size of the binaries and anonymizes the build environment. This was removed because stripping file paths caused automatic service discovery features to break (they depend, in part, on source file path availability for build-time AST and runtime reflection).","title":"Limitations"},{"location":"core/alltools/","text":"Executables \u00b6 The core-geth project comes with several wrappers/executables found in the cmd directory, and which, with make all , will be built to ./build/bin/ . Command Description geth Our main Ethereum Classic CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. geth --help and the CLI page for command line options. abigen Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain Ethereum contract ABIs with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our Native DApps wiki page for details. bootnode Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks. evm Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. evm --code 60ff60ff --debug ). gethrpctest Developer utility tool to support the ethereum/rpc-test test suite which validates baseline conformity to the Ethereum JSON RPC specs. Please see the test suite\u2019s readme for details. rlpdump Developer utility tool to convert binary RLP ( Recursive Length Prefix ) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. rlpdump --hex CE0183FFFFFFC4C304050583616263 ).","title":"Included Tools"},{"location":"core/alltools/#executables","text":"The core-geth project comes with several wrappers/executables found in the cmd directory, and which, with make all , will be built to ./build/bin/ . Command Description geth Our main Ethereum Classic CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. geth --help and the CLI page for command line options. abigen Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain Ethereum contract ABIs with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our Native DApps wiki page for details. bootnode Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks. evm Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. evm --code 60ff60ff --debug ). gethrpctest Developer utility tool to support the ethereum/rpc-test test suite which validates baseline conformity to the Ethereum JSON RPC specs. Please see the test suite\u2019s readme for details. rlpdump Developer utility tool to convert binary RLP ( Recursive Length Prefix ) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. rlpdump --hex CE0183FFFFFFC4C304050583616263 ).","title":"Executables"},{"location":"core/evmc/","text":"Running Geth with an External VM \u00b6 Geth supports the EVMC VM connector API Version 7 as an experimental feature. This interface provides support for external EVM and EWASM interpreters. External interpreters can be configured on the command line via a --vm. -prefixed flag for normal instantiation, and --evmc. for testing. 1 2 --vm.evm value External EVM configuration (default = built-in interpreter) --vm.ewasm value External ewasm configuration (default = built-in interpreter) Provided to these flags should be EWASM and EVM shared object libraries, as follows: --vm.ewasm=<path/to/interpreter.so --vm.evm=<path/to/interpreter.so Testing EVMC Support \u00b6 This implementation may be tested by following the command defined in the Makefile as evmc-test , which tests the implementation against both of these mentioned EWASM libraries against the /tests/ StateTest suite. These tests run exclusively via Github Actions, configured at .github/workflows/evmc.yml . Discussion: Customizing EVMC Configuration \u00b6 While core-geth supports highly granular EIP/ECIP/xIP chain feature configuration (ie fork feature configs), EVMC does not. EVMC only supports the Fork configurations supported by ethereum/go-ethereum (eg. Byzantium, Constantinople, &c). Thus, the implementation at core-geth of EVMC requires a somewhat arbitrary mapping of granular features as keys toggling entire Ethereum fork configurations. The following code snippet, taken from ./core/vm/evmc.go , handles this translation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // getRevision translates ChainConfig's HF block information into EVMC revision. func getRevision ( env * EVM ) evmc . Revision { n := env . BlockNumber conf := env . ChainConfig () switch { // This is an example of choosing to use an \"abstracted\" idea // about chain config, where I'm choosing to prioritize \"indicative\" features // as identifiers for Fork-Feature-Groups. Note that this is very different // than using Feature-complete sets to assert \"did Forkage.\" case conf . IsEnabled ( conf . GetEIP1884Transition , n ): return evmc . Istanbul case conf . IsEnabled ( conf . GetEIP1283DisableTransition , n ): return evmc . Petersburg case conf . IsEnabled ( conf . GetEIP145Transition , n ): return evmc . Constantinople case conf . IsEnabled ( conf . GetEIP198Transition , n ): return evmc . Byzantium case conf . IsEnabled ( conf . GetEIP155Transition , n ): return evmc . SpuriousDragon case conf . IsEnabled ( conf . GetEIP150Transition , n ): return evmc . TangerineWhistle case conf . IsEnabled ( conf . GetEIP7Transition , n ): return evmc . Homestead default : return evmc . Frontier } } As you can see, individual features, like EIP1884, are translated as proxy signifiers for entire fork configurations (in this case, an Istanbul-featured VM revision). This approach, rather than requiring a complete set of the compositional features for any of these given Ethereum forks, trades a descriptive 1:1 mapping for application flexibility. Pursuing a necessarily complete feature-set -> fork map would presume chain features that are not necessarily relevant to the virtual machine, like block reward configurations, or difficulty configurations, for example. This approach allows applications to use advanced opcodes with the fewest number of incidental restrictions. This approach is not without risk or nuance however; without a solid understanding of customizations here, experiments in customization can result in foot shooting.","title":"Running Geth with an External VM"},{"location":"core/evmc/#running-geth-with-an-external-vm","text":"Geth supports the EVMC VM connector API Version 7 as an experimental feature. This interface provides support for external EVM and EWASM interpreters. External interpreters can be configured on the command line via a --vm. -prefixed flag for normal instantiation, and --evmc. for testing. 1 2 --vm.evm value External EVM configuration (default = built-in interpreter) --vm.ewasm value External ewasm configuration (default = built-in interpreter) Provided to these flags should be EWASM and EVM shared object libraries, as follows: --vm.ewasm=<path/to/interpreter.so --vm.evm=<path/to/interpreter.so","title":"Running Geth with an External VM"},{"location":"core/evmc/#testing-evmc-support","text":"This implementation may be tested by following the command defined in the Makefile as evmc-test , which tests the implementation against both of these mentioned EWASM libraries against the /tests/ StateTest suite. These tests run exclusively via Github Actions, configured at .github/workflows/evmc.yml .","title":"Testing EVMC Support"},{"location":"core/evmc/#discussion-customizing-evmc-configuration","text":"While core-geth supports highly granular EIP/ECIP/xIP chain feature configuration (ie fork feature configs), EVMC does not. EVMC only supports the Fork configurations supported by ethereum/go-ethereum (eg. Byzantium, Constantinople, &c). Thus, the implementation at core-geth of EVMC requires a somewhat arbitrary mapping of granular features as keys toggling entire Ethereum fork configurations. The following code snippet, taken from ./core/vm/evmc.go , handles this translation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // getRevision translates ChainConfig's HF block information into EVMC revision. func getRevision ( env * EVM ) evmc . Revision { n := env . BlockNumber conf := env . ChainConfig () switch { // This is an example of choosing to use an \"abstracted\" idea // about chain config, where I'm choosing to prioritize \"indicative\" features // as identifiers for Fork-Feature-Groups. Note that this is very different // than using Feature-complete sets to assert \"did Forkage.\" case conf . IsEnabled ( conf . GetEIP1884Transition , n ): return evmc . Istanbul case conf . IsEnabled ( conf . GetEIP1283DisableTransition , n ): return evmc . Petersburg case conf . IsEnabled ( conf . GetEIP145Transition , n ): return evmc . Constantinople case conf . IsEnabled ( conf . GetEIP198Transition , n ): return evmc . Byzantium case conf . IsEnabled ( conf . GetEIP155Transition , n ): return evmc . SpuriousDragon case conf . IsEnabled ( conf . GetEIP150Transition , n ): return evmc . TangerineWhistle case conf . IsEnabled ( conf . GetEIP7Transition , n ): return evmc . Homestead default : return evmc . Frontier } } As you can see, individual features, like EIP1884, are translated as proxy signifiers for entire fork configurations (in this case, an Istanbul-featured VM revision). This approach, rather than requiring a complete set of the compositional features for any of these given Ethereum forks, trades a descriptive 1:1 mapping for application flexibility. Pursuing a necessarily complete feature-set -> fork map would presume chain features that are not necessarily relevant to the virtual machine, like block reward configurations, or difficulty configurations, for example. This approach allows applications to use advanced opcodes with the fewest number of incidental restrictions. This approach is not without risk or nuance however; without a solid understanding of customizations here, experiments in customization can result in foot shooting.","title":"Discussion: Customizing EVMC Configuration"},{"location":"developers/add-network/","text":"Adding a Network to Core-Geth \u00b6 CoreGeth currently supports a handful of networks out of the box, and can readily be configured to support others. This guide will show you how to add a network to CoreGeth. For the context of this tutorial, I\u2019m going to use AlphaBeta Coin as the name of my new network. - AlphaBeta Coin (ABC) will use Proof-of-Work for block issuance, namely ETHash. (Just like Ethereum.) - AlphaBeta Coin will have some arbitrary pre-mine funds allocated to a single address. - AlphaBeta Coin will have the \u201cIstanbul\u201d (aka \u201cETC\u2019s Phoenix\u201d) protocol upgrades and EVM features activated from genesis (the very first block (number 0 )). Define the configuration. \u00b6 A branch docs/_tutorial-add-network is provided to illustrate the code necessary to define implement basic core-geth support for a new network. A full diff comparing this branch against its base v1.11.22 can be seen on the Github web UI here . Overall, the files touched include: 1 2 3 4 5 6 > git --no-pager diff --name-only v1.11.22 params/bootnodes_abc.go params/config_abc.go params/config_abc_test.go params/example_abc_test.go params/genesis_abc.go Once the skeleton provided by docs/_tutorial-add-network is done it\u2019s time to put the configuration into action. We can now pursue two paths: Use the JSON configuration to initialize a chaindata database and start our node(s), and/or Expose the configuration as a core-geth default through geth \u2019s CLI flags via --abc . This tutorial won\u2019t cover (2) (yet). Initialize geth\u2019s database from the JSON configuration. \u00b6 Build geth . 1 > make geth Create a file containing the JSON encoding of ABC network\u2019s configuration (JSON data taken from the example test above). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 > cat <<EOF > abc_genesis.json { \"config\": { \"networkId\": 4269, \"chainId\": 4269, \"eip2FBlock\": 0, \"eip7FBlock\": 0, \"eip150Block\": 0, \"eip155Block\": 0, \"eip160Block\": 0, \"eip161FBlock\": 0, \"eip170FBlock\": 0, \"eip100FBlock\": 0, \"eip140FBlock\": 0, \"eip198FBlock\": 0, \"eip211FBlock\": 0, \"eip212FBlock\": 0, \"eip213FBlock\": 0, \"eip214FBlock\": 0, \"eip658FBlock\": 0, \"eip145FBlock\": 0, \"eip1014FBlock\": 0, \"eip1052FBlock\": 0, \"eip152FBlock\": 0, \"eip1108FBlock\": 0, \"eip1344FBlock\": 0, \"eip1884FBlock\": 0, \"eip2028FBlock\": 0, \"eip2200FBlock\": 0, \"disposalBlock\": 0, \"ethash\": {}, \"requireBlockHashes\": {} }, \"nonce\": \"0x0\", \"timestamp\": \"0x6048d57c\", \"extraData\": \"0x42\", \"gasLimit\": \"0x2fefd8\", \"difficulty\": \"0x20000\", \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"coinbase\": \"0x0000000000000000000000000000000000000000\", \"alloc\": { \"366ae7da62294427c764870bd2a460d7ded29d30\": { \"balance\": \"0x2a\" } }, \"number\": \"0x0\", \"gasUsed\": \"0x0\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\" } EOF Initialize geth with this configuration (using a custom data directory). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ./build/bin/geth --datadir=./abc-datadir init abc_genesis.json INFO [03-10|09:00:25.710] Maximum peer count ETH=50 LES=0 total=50 INFO [03-10|09:00:25.710] Smartcard socket not found, disabling err=\"stat /run/pcscd/pcscd.comm: no such file or directory\" INFO [03-10|09:00:25.711] Set global gas cap cap=25000000 INFO [03-10|09:00:25.711] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata cache=16.00MiB handles=16 INFO [03-10|09:00:25.728] Writing custom genesis block INFO [03-10|09:00:25.729] Persisted trie from memory database nodes=1 size=139.00B time=\"178.942\u00b5s\" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B INFO [03-10|09:00:25.729] Wrote custom genesis block OK config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:00:25.730] Successfully wrote genesis state database=chaindata hash=\"5f32ce\u20261fe582\" INFO [03-10|09:00:25.730] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/lightchaindata cache=16.00MiB handles=16 INFO [03-10|09:00:25.746] Writing custom genesis block INFO [03-10|09:00:25.747] Persisted trie from memory database nodes=1 size=139.00B time=\"91.084\u00b5s\" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B INFO [03-10|09:00:25.748] Wrote custom genesis block OK config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:00:25.749] Successfully wrote genesis state database=lightchaindata hash=\"5f32ce\u20261fe582\" Start geth, reusing our initialized database. Since geth won\u2019t have default bootnodes for this configuration (only available when using CLI flags), we\u2019ll need to use geth\u2019s --bootnodes flag. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ./build/bin/geth --datadir=./abc-datadir --bootnodes=enode://3e12c4c633157ae52e7e05c168f4b1aa91685a36ba33a0901aa8a83cfeb84c3633226e3dd2eaf59bfc83492139e1d68918bf5b60ba93e2deaedb4e6a2ded5d32@42.152.120.98:30303 INFO [03-10|09:07:52.762] Starting Geth on Ethereum mainnet... INFO [03-10|09:07:52.762] Bumping default cache on mainnet provided=1024 updated=4096 INFO [03-10|09:07:52.763] Maximum peer count ETH=50 LES=0 total=50 INFO [03-10|09:07:52.763] Smartcard socket not found, disabling err=\"stat /run/pcscd/pcscd.comm: no such file or directory\" INFO [03-10|09:07:52.764] Set global gas cap cap=25000000 INFO [03-10|09:07:52.764] Allocated trie memory caches clean=1023.00MiB dirty=1024.00MiB INFO [03-10|09:07:52.765] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata cache=2.00GiB handles=524288 INFO [03-10|09:07:52.853] Opened ancient database database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata/ancient INFO [03-10|09:07:52.854] Found stored genesis block config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:07:52.854] Found non-defaulty stored config, using it. INFO [03-10|09:07:52.854] Initialised chain configuration config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:07:52.854] Disk storage enabled for ethash caches dir=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/ethash count=3 INFO [03-10|09:07:52.854] Disk storage enabled for ethash DAGs dir=/home/ia/.ethash count=2 INFO [03-10|09:07:52.854] Initialising Ethereum protocol versions=\"[65 64 63]\" network=1 dbversion=8 INFO [03-10|09:07:52.855] Loaded most recent local header number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded most recent local full block number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded most recent local fast block number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded local transaction journal transactions=0 dropped=0 INFO [03-10|09:07:52.856] Regenerated local transaction journal transactions=0 accounts=0 INFO [03-10|09:07:52.877] Allocated fast sync bloom size=2.00GiB INFO [03-10|09:07:52.878] Initialized fast sync bloom items=1 errorrate=0.000 elapsed=\"520.228\u00b5s\" INFO [03-10|09:07:52.879] Starting peer-to-peer node instance=CoreGeth/v1.11.22-stable-72df266d/linux-amd64/go1.16 INFO [03-10|09:07:52.898] New local node record seq=3 id=0a86440c3ab5e22c ip=127.0.0.1 udp=30303 tcp=30303 INFO [03-10|09:07:52.899] Started P2P networking self=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@127.0.0.1:30303 INFO [03-10|09:07:52.900] IPC endpoint opened url=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth.ipc INFO [03-10|09:07:52.905] Mapped network port proto=udp extport=30303 intport=30303 interface=NAT-PMP(192.168.86.1) INFO [03-10|09:07:52.909] Mapped network port proto=tcp extport=30303 intport=30303 interface=NAT-PMP(192.168.86.1) INFO [03-10|09:07:54.403] New local node record seq=4 id=0a86440c3ab5e22c ip=75.134.144.252 udp=30303 tcp=30303 INFO [03-10|09:08:06.969] Looking for peers peercount=0 tried=5 static=0 Establish a network. \u00b6 In order to establish your network, you\u2019ll want to make sure you have a bootnode available that new nodes coming online can use to query for their peers. Set up a bootnode. \u00b6 Initialize the bootnode\u2019s database and get its self-reported enode value. 1 2 3 4 ./build/bin/geth --datadir=./abc-datadir init abc_genesis.json 2>/dev/null ./build/bin/geth --datadir=./abc-datadir --exec 'admin.nodeInfo.enode' console \"enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303\" This ( enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 ) will be the bootnode enode value for the other nodes. Then turn the bootnode on. 1 ./build/bin/geth --datadir=./abc-datadir Start up a few nodes. \u00b6 1 2 3 ./build/bin/geth --datadir=./abc-datadir-1 init abc_genesis.json ./build/bin/geth --datadir=./abc-datadir-2 init abc_genesis.json ./build/bin/geth --datadir=./abc-datadir-3 init abc_genesis.json 1 ./build/bin/geth --datadir=./abc-datadir-1 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 1 ./build/bin/geth --datadir=./abc-datadir-2 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 1 ./build/bin/geth --datadir=./abc-datadir-3 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303","title":"Adding a Network to Core-Geth"},{"location":"developers/add-network/#adding-a-network-to-core-geth","text":"CoreGeth currently supports a handful of networks out of the box, and can readily be configured to support others. This guide will show you how to add a network to CoreGeth. For the context of this tutorial, I\u2019m going to use AlphaBeta Coin as the name of my new network. - AlphaBeta Coin (ABC) will use Proof-of-Work for block issuance, namely ETHash. (Just like Ethereum.) - AlphaBeta Coin will have some arbitrary pre-mine funds allocated to a single address. - AlphaBeta Coin will have the \u201cIstanbul\u201d (aka \u201cETC\u2019s Phoenix\u201d) protocol upgrades and EVM features activated from genesis (the very first block (number 0 )).","title":"Adding a Network to Core-Geth"},{"location":"developers/add-network/#define-the-configuration","text":"A branch docs/_tutorial-add-network is provided to illustrate the code necessary to define implement basic core-geth support for a new network. A full diff comparing this branch against its base v1.11.22 can be seen on the Github web UI here . Overall, the files touched include: 1 2 3 4 5 6 > git --no-pager diff --name-only v1.11.22 params/bootnodes_abc.go params/config_abc.go params/config_abc_test.go params/example_abc_test.go params/genesis_abc.go Once the skeleton provided by docs/_tutorial-add-network is done it\u2019s time to put the configuration into action. We can now pursue two paths: Use the JSON configuration to initialize a chaindata database and start our node(s), and/or Expose the configuration as a core-geth default through geth \u2019s CLI flags via --abc . This tutorial won\u2019t cover (2) (yet).","title":"Define the configuration."},{"location":"developers/add-network/#initialize-geths-database-from-the-json-configuration","text":"Build geth . 1 > make geth Create a file containing the JSON encoding of ABC network\u2019s configuration (JSON data taken from the example test above). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 > cat <<EOF > abc_genesis.json { \"config\": { \"networkId\": 4269, \"chainId\": 4269, \"eip2FBlock\": 0, \"eip7FBlock\": 0, \"eip150Block\": 0, \"eip155Block\": 0, \"eip160Block\": 0, \"eip161FBlock\": 0, \"eip170FBlock\": 0, \"eip100FBlock\": 0, \"eip140FBlock\": 0, \"eip198FBlock\": 0, \"eip211FBlock\": 0, \"eip212FBlock\": 0, \"eip213FBlock\": 0, \"eip214FBlock\": 0, \"eip658FBlock\": 0, \"eip145FBlock\": 0, \"eip1014FBlock\": 0, \"eip1052FBlock\": 0, \"eip152FBlock\": 0, \"eip1108FBlock\": 0, \"eip1344FBlock\": 0, \"eip1884FBlock\": 0, \"eip2028FBlock\": 0, \"eip2200FBlock\": 0, \"disposalBlock\": 0, \"ethash\": {}, \"requireBlockHashes\": {} }, \"nonce\": \"0x0\", \"timestamp\": \"0x6048d57c\", \"extraData\": \"0x42\", \"gasLimit\": \"0x2fefd8\", \"difficulty\": \"0x20000\", \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"coinbase\": \"0x0000000000000000000000000000000000000000\", \"alloc\": { \"366ae7da62294427c764870bd2a460d7ded29d30\": { \"balance\": \"0x2a\" } }, \"number\": \"0x0\", \"gasUsed\": \"0x0\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\" } EOF Initialize geth with this configuration (using a custom data directory). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ./build/bin/geth --datadir=./abc-datadir init abc_genesis.json INFO [03-10|09:00:25.710] Maximum peer count ETH=50 LES=0 total=50 INFO [03-10|09:00:25.710] Smartcard socket not found, disabling err=\"stat /run/pcscd/pcscd.comm: no such file or directory\" INFO [03-10|09:00:25.711] Set global gas cap cap=25000000 INFO [03-10|09:00:25.711] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata cache=16.00MiB handles=16 INFO [03-10|09:00:25.728] Writing custom genesis block INFO [03-10|09:00:25.729] Persisted trie from memory database nodes=1 size=139.00B time=\"178.942\u00b5s\" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B INFO [03-10|09:00:25.729] Wrote custom genesis block OK config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:00:25.730] Successfully wrote genesis state database=chaindata hash=\"5f32ce\u20261fe582\" INFO [03-10|09:00:25.730] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/lightchaindata cache=16.00MiB handles=16 INFO [03-10|09:00:25.746] Writing custom genesis block INFO [03-10|09:00:25.747] Persisted trie from memory database nodes=1 size=139.00B time=\"91.084\u00b5s\" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B INFO [03-10|09:00:25.748] Wrote custom genesis block OK config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:00:25.749] Successfully wrote genesis state database=lightchaindata hash=\"5f32ce\u20261fe582\" Start geth, reusing our initialized database. Since geth won\u2019t have default bootnodes for this configuration (only available when using CLI flags), we\u2019ll need to use geth\u2019s --bootnodes flag. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ./build/bin/geth --datadir=./abc-datadir --bootnodes=enode://3e12c4c633157ae52e7e05c168f4b1aa91685a36ba33a0901aa8a83cfeb84c3633226e3dd2eaf59bfc83492139e1d68918bf5b60ba93e2deaedb4e6a2ded5d32@42.152.120.98:30303 INFO [03-10|09:07:52.762] Starting Geth on Ethereum mainnet... INFO [03-10|09:07:52.762] Bumping default cache on mainnet provided=1024 updated=4096 INFO [03-10|09:07:52.763] Maximum peer count ETH=50 LES=0 total=50 INFO [03-10|09:07:52.763] Smartcard socket not found, disabling err=\"stat /run/pcscd/pcscd.comm: no such file or directory\" INFO [03-10|09:07:52.764] Set global gas cap cap=25000000 INFO [03-10|09:07:52.764] Allocated trie memory caches clean=1023.00MiB dirty=1024.00MiB INFO [03-10|09:07:52.765] Allocated cache and file handles database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata cache=2.00GiB handles=524288 INFO [03-10|09:07:52.853] Opened ancient database database=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/chaindata/ancient INFO [03-10|09:07:52.854] Found stored genesis block config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:07:52.854] Found non-defaulty stored config, using it. INFO [03-10|09:07:52.854] Initialised chain configuration config=\"NetworkID: 4269, ChainID: 4269 Engine: ethash EIP1014: 0 EIP1052: 0 EIP1108: 0 EIP1344: 0 EIP140: 0 EIP145: 0 EIP150: 0 EIP152: 0 EIP155: 0 EIP160: 0 EIP161abc: 0 EIP161d: 0 EIP170: 0 EIP1884: 0 EIP198: 0 EIP2028: 0 EIP211: 0 EIP212: 0 EIP213: 0 EIP214: 0 EIP2200: 0 EIP2: 0 EIP658: 0 EIP7: 0 EthashECIP1041: 0 EthashEIP100B: 0 EthashHomestead: 0 \" INFO [03-10|09:07:52.854] Disk storage enabled for ethash caches dir=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth/ethash count=3 INFO [03-10|09:07:52.854] Disk storage enabled for ethash DAGs dir=/home/ia/.ethash count=2 INFO [03-10|09:07:52.854] Initialising Ethereum protocol versions=\"[65 64 63]\" network=1 dbversion=8 INFO [03-10|09:07:52.855] Loaded most recent local header number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded most recent local full block number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded most recent local fast block number=0 hash=\"5f32ce\u20261fe582\" td=131072 age=48m12s INFO [03-10|09:07:52.855] Loaded local transaction journal transactions=0 dropped=0 INFO [03-10|09:07:52.856] Regenerated local transaction journal transactions=0 accounts=0 INFO [03-10|09:07:52.877] Allocated fast sync bloom size=2.00GiB INFO [03-10|09:07:52.878] Initialized fast sync bloom items=1 errorrate=0.000 elapsed=\"520.228\u00b5s\" INFO [03-10|09:07:52.879] Starting peer-to-peer node instance=CoreGeth/v1.11.22-stable-72df266d/linux-amd64/go1.16 INFO [03-10|09:07:52.898] New local node record seq=3 id=0a86440c3ab5e22c ip=127.0.0.1 udp=30303 tcp=30303 INFO [03-10|09:07:52.899] Started P2P networking self=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@127.0.0.1:30303 INFO [03-10|09:07:52.900] IPC endpoint opened url=/home/ia/go/src/github.com/ethereum/go-ethereum/abc-datadir/geth.ipc INFO [03-10|09:07:52.905] Mapped network port proto=udp extport=30303 intport=30303 interface=NAT-PMP(192.168.86.1) INFO [03-10|09:07:52.909] Mapped network port proto=tcp extport=30303 intport=30303 interface=NAT-PMP(192.168.86.1) INFO [03-10|09:07:54.403] New local node record seq=4 id=0a86440c3ab5e22c ip=75.134.144.252 udp=30303 tcp=30303 INFO [03-10|09:08:06.969] Looking for peers peercount=0 tried=5 static=0","title":"Initialize geth&rsquo;s database from the JSON configuration."},{"location":"developers/add-network/#establish-a-network","text":"In order to establish your network, you\u2019ll want to make sure you have a bootnode available that new nodes coming online can use to query for their peers.","title":"Establish a network."},{"location":"developers/add-network/#set-up-a-bootnode","text":"Initialize the bootnode\u2019s database and get its self-reported enode value. 1 2 3 4 ./build/bin/geth --datadir=./abc-datadir init abc_genesis.json 2>/dev/null ./build/bin/geth --datadir=./abc-datadir --exec 'admin.nodeInfo.enode' console \"enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303\" This ( enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 ) will be the bootnode enode value for the other nodes. Then turn the bootnode on. 1 ./build/bin/geth --datadir=./abc-datadir","title":"Set up a bootnode."},{"location":"developers/add-network/#start-up-a-few-nodes","text":"1 2 3 ./build/bin/geth --datadir=./abc-datadir-1 init abc_genesis.json ./build/bin/geth --datadir=./abc-datadir-2 init abc_genesis.json ./build/bin/geth --datadir=./abc-datadir-3 init abc_genesis.json 1 ./build/bin/geth --datadir=./abc-datadir-1 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 1 ./build/bin/geth --datadir=./abc-datadir-2 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303 1 ./build/bin/geth --datadir=./abc-datadir-3 --bootnodes=enode://5256dcfe7725a98f38cf15b702847fabcaf59bbaa733a6ae5ea68e1089fdd1d274192e17593dc20df00a45ea91372f7c1ca97c8d186fa9e779167240fde15338@75.134.144.252:30303","title":"Start up a few nodes."},{"location":"developers/build-from-source/","text":"Hardware Requirements \u00b6 Minimum: CPU with 2+ cores 4GB RAM 500GB free storage space to sync the Mainnet 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores 16GB+ RAM High Performance SSD with at least 500GB free space 25+ MBit/sec download Internet service Dependencies \u00b6 Make sure your system has Go 1.16+ installed. https://golang.org/doc/install Make sure your system has a C compiler installed. For example, with Linux Ubuntu: 1 $ sudo apt-get install -y build-essential Source \u00b6 Once the dependencies have been installed, it\u2019s time to clone and build the source: 1 2 3 4 $ git clone https://github.com/etclabscore/core-geth.git $ cd core-geth $ make all $ ./build/bin/geth --help Build docker image \u00b6 You can build a local docker image directly from the source: 1 2 3 $ git clone https://github.com/etclabscore/core-geth.git $ cd core-geth $ docker build -t = core-geth . Or with all tools: 1 $ docker build -t core-geth-alltools -f Dockerfile.alltools .","title":"Build from Source"},{"location":"developers/build-from-source/#hardware-requirements","text":"Minimum: CPU with 2+ cores 4GB RAM 500GB free storage space to sync the Mainnet 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores 16GB+ RAM High Performance SSD with at least 500GB free space 25+ MBit/sec download Internet service","title":"Hardware Requirements"},{"location":"developers/build-from-source/#dependencies","text":"Make sure your system has Go 1.16+ installed. https://golang.org/doc/install Make sure your system has a C compiler installed. For example, with Linux Ubuntu: 1 $ sudo apt-get install -y build-essential","title":"Dependencies"},{"location":"developers/build-from-source/#source","text":"Once the dependencies have been installed, it\u2019s time to clone and build the source: 1 2 3 4 $ git clone https://github.com/etclabscore/core-geth.git $ cd core-geth $ make all $ ./build/bin/geth --help","title":"Source"},{"location":"developers/build-from-source/#build-docker-image","text":"You can build a local docker image directly from the source: 1 2 3 $ git clone https://github.com/etclabscore/core-geth.git $ cd core-geth $ docker build -t = core-geth . Or with all tools: 1 $ docker build -t core-geth-alltools -f Dockerfile.alltools .","title":"Build docker image"},{"location":"developers/create-new-release/","text":"Developers: How to Make a Release \u00b6 Decide what the new version should be. In this example, v1.11.16[-stable] will be used. git checkout master make lint and make test are passing on master. This is important because the artifacts to be included with the release will be generated by the CI workflows. If linting or tests fail, the workflows will be interrupted and artifacts will not be generated. git checkout release/v1.11.16 Edit params/version.go making the necessary changes to version information. (To -stable version.) Gotcha: make sure this passes linting, too. git commit -S -s -m \"bump version from v1.11.16-unstable to v1.11.16-stable\" git tag -S -a v1.11.16 git push etclabscore v1.11.16 Push the tag to the remote. I like to do it this way because it triggers the tagged version on CI before the branch/PR version, expediting artifact delivery. Edit params/version.go making the necessary changes to version information. (To -unstable version.) git commit -S -s -m \"bump version from v1.11.16-stable to v1.11.17-unstable\" git push etclabscore Push the branch. This will get PR\u2019d, eg. etclabscore/core-geth!197 Draft a new release, following the existing patterns for naming and notes. https://github.com/etclabscore/core-geth/releases/new Define the tag the release should be associated with (eg v1.11.16 ). Linux, OSX, and Windows artifacts will be uploaded automatically to this release draft by the CI jobs. There should be CI-generated 34 assets total. Note If the release is not drafted manually, it will be automatically drafted by the CI. Await a complete set of uploaded artifacts. If artifacts fail to upload due to issue with the CI jobs, review those jobs to determine if their failure(s) is OK, restarting them if so. Once artifacts have been uploaded and the release draft reviewed by one other person for the following, it\u2019s time to publish! proofreading artifact fingerprint verification notes content approval Once the release is published, merge the associated PR bumping versions.","title":"Publishing a Release"},{"location":"developers/create-new-release/#developers-how-to-make-a-release","text":"Decide what the new version should be. In this example, v1.11.16[-stable] will be used. git checkout master make lint and make test are passing on master. This is important because the artifacts to be included with the release will be generated by the CI workflows. If linting or tests fail, the workflows will be interrupted and artifacts will not be generated. git checkout release/v1.11.16 Edit params/version.go making the necessary changes to version information. (To -stable version.) Gotcha: make sure this passes linting, too. git commit -S -s -m \"bump version from v1.11.16-unstable to v1.11.16-stable\" git tag -S -a v1.11.16 git push etclabscore v1.11.16 Push the tag to the remote. I like to do it this way because it triggers the tagged version on CI before the branch/PR version, expediting artifact delivery. Edit params/version.go making the necessary changes to version information. (To -unstable version.) git commit -S -s -m \"bump version from v1.11.16-stable to v1.11.17-unstable\" git push etclabscore Push the branch. This will get PR\u2019d, eg. etclabscore/core-geth!197 Draft a new release, following the existing patterns for naming and notes. https://github.com/etclabscore/core-geth/releases/new Define the tag the release should be associated with (eg v1.11.16 ). Linux, OSX, and Windows artifacts will be uploaded automatically to this release draft by the CI jobs. There should be CI-generated 34 assets total. Note If the release is not drafted manually, it will be automatically drafted by the CI. Await a complete set of uploaded artifacts. If artifacts fail to upload due to issue with the CI jobs, review those jobs to determine if their failure(s) is OK, restarting them if so. Once artifacts have been uploaded and the release draft reviewed by one other person for the following, it\u2019s time to publish! proofreading artifact fingerprint verification notes content approval Once the release is published, merge the associated PR bumping versions.","title":"Developers: How to Make a Release"},{"location":"developers/documentation/","text":"Documentation \u00b6 Project documentation lives in /docs and is written in Markdown . For web-based access, these files are passed through a static site generator MkDocs , specifically MkDocs Material and served via Github Pages. Development \u00b6 You can run a live-reloading web server in imitation of the production generator. To do so: Ensure that your python environment is using python3 and its package manager pip3. You can then install the required mkdocs executable and its dependencies using: 1 python -m pip install -r requirements-mkdocs.txt Run mdkocs serve from the project root. A convenience Make command is likewise provided as make mkdocs-serve . Open http://localhost:8000 in a web browser. Write some docs!","title":"Documentation"},{"location":"developers/documentation/#documentation","text":"Project documentation lives in /docs and is written in Markdown . For web-based access, these files are passed through a static site generator MkDocs , specifically MkDocs Material and served via Github Pages.","title":"Documentation"},{"location":"developers/documentation/#development","text":"You can run a live-reloading web server in imitation of the production generator. To do so: Ensure that your python environment is using python3 and its package manager pip3. You can then install the required mkdocs executable and its dependencies using: 1 python -m pip install -r requirements-mkdocs.txt Run mdkocs serve from the project root. A convenience Make command is likewise provided as make mkdocs-serve . Open http://localhost:8000 in a web browser. Write some docs!","title":"Development"},{"location":"developers/testing/","text":"Testing \u00b6 Lint \u00b6 make lint runs the module-standard linter config. Under the hood, this uses golangci-lint and its configuration at /.golangci.yml . Run tests \u00b6 The Makefile at the root of the project includes many commands that can be useful for testing. make is not required Please keep in mind that while you can use make to run tests, you don\u2019t have to. You can also use plain old go test (and go build ) as you would in any Go project. make test runs all package tests which are, for the most part, shared with go-ethereum . make test-coregeth runs a suite of tests that are specific to CoreGeth. Test generation \u00b6 CoreGeth is capable of generating some sets of tests used in the tests package, which are originally (and still largely) driven by the ethereum/tests suite. make tests-generate runs test(s) generation for the state and difficulty subsections of this suite, extending the ethereum/tests version of the controls to include configurations for Ethereum Classic chain configurations at various points in Ethereum Classic hardfork history. Flaky (spuriously erroring) tests \u00b6 Especially when run in CI environments, some tests can be expected to fail more-or-less randomly.","title":"Testing"},{"location":"developers/testing/#testing","text":"","title":"Testing"},{"location":"developers/testing/#lint","text":"make lint runs the module-standard linter config. Under the hood, this uses golangci-lint and its configuration at /.golangci.yml .","title":"Lint"},{"location":"developers/testing/#run-tests","text":"The Makefile at the root of the project includes many commands that can be useful for testing. make is not required Please keep in mind that while you can use make to run tests, you don\u2019t have to. You can also use plain old go test (and go build ) as you would in any Go project. make test runs all package tests which are, for the most part, shared with go-ethereum . make test-coregeth runs a suite of tests that are specific to CoreGeth.","title":"Run tests"},{"location":"developers/testing/#test-generation","text":"CoreGeth is capable of generating some sets of tests used in the tests package, which are originally (and still largely) driven by the ethereum/tests suite. make tests-generate runs test(s) generation for the state and difficulty subsections of this suite, extending the ethereum/tests version of the controls to include configurations for Ethereum Classic chain configurations at various points in Ethereum Classic hardfork history.","title":"Test generation"},{"location":"developers/testing/#flaky-spuriously-erroring-tests","text":"Especially when run in CI environments, some tests can be expected to fail more-or-less randomly.","title":"Flaky (spuriously erroring) tests"},{"location":"developers/versioning/","text":"Versioning \u00b6 etclabscore/core-geth uses Semantic Versioning . The API definition that would demand increments to the major version is basically nil; it can be expected that a major version bump would be accompanied by an entirely new repository and name. Tagged versions use the suffix -stable and untagged versions (ie everything else) uses the -unstable suffix. See also You can find some historical discussions on versioning at the following links. https://github.com/etclabscore/core-geth/pull/29#issuecomment-588977383 etclabscore/multi-geth-fork#153 https://github.com/etclabscore/core-geth/pull/30#issuecomment-591979271 etclabscore/core-geth#83","title":"Versioning"},{"location":"developers/versioning/#versioning","text":"etclabscore/core-geth uses Semantic Versioning . The API definition that would demand increments to the major version is basically nil; it can be expected that a major version bump would be accompanied by an entirely new repository and name. Tagged versions use the suffix -stable and untagged versions (ie everything else) uses the -unstable suffix. See also You can find some historical discussions on versioning at the following links. https://github.com/etclabscore/core-geth/pull/29#issuecomment-588977383 etclabscore/multi-geth-fork#153 https://github.com/etclabscore/core-geth/pull/30#issuecomment-591979271 etclabscore/core-geth#83","title":"Versioning"},{"location":"getting-started/installation/","text":"Build from Source Instructions to build from source can be found here . Pre-built executable \u00b6 If you just want to download and run geth or any of the other tools here, this is the quickest and simplest way. Binary archives are published at https://github.com/etclabscore/core-geth/releases . Find the latest one for your OS, download it, (check the SHA sum), unarchive it, and run! With Docker \u00b6 All runnable examples below are for images limited to geth . For images including the full suite of tools available from this source, use the Docker Hub tag prefix alltools. , like etclabscore/core-geth:alltools.latest , or the associated Docker file directly ./Dockerfile.alltools . docker run \u00b6 One of the quickest ways to get Ethereum Classic up and running on your machine is by using Docker: 1 2 3 4 5 6 7 8 $ docker run -d \\ --name core-geth \\ -v $LOCAL_DATADIR :/root \\ -p 30303 :30303 \\ -p 8545 :8545 \\ etclabscore/core-geth \\ --classic \\ --http --http.port 8545 This will start geth in fast-sync mode with a DB memory allowance of 1GB just as the above command does. It will also create a persistent volume in your $LOCAL_DATADIR for saving your blockchain, as well as map the default devp2p and JSON-RPC API ports. Do not forget --http.addr 0.0.0.0 , if you want to access RPC from other containers and/or hosts. By default, geth binds to the local interface and RPC endpoints is not accessible from the outside. docker pull \u00b6 Docker images are automatically published on Docker Hub . Image: latest \u00b6 Image latest is built automatically from the master branch whenever it\u2019s updated. 1 $ docker pull etclabscore/core-geth:latest Image: <tag> \u00b6 \u26d4 version-X.Y.Z Deprecation Notice (2023-01-31) \u00b6 tl;dr: Use etclabscore/core-geth:v1.12.9 instead of etclabscore/core-geth:version-1.12.9 . ~~Repository tags like v1.2.3 correspond to Docker tags like version-1.2.3 .~~ Update (2023-01-31) Docker Hub tags are now formatted as v1.2.3 , corresponding exactly with the repository tag (eg. v1.2.3 ). The previous format ( version-X.Y.Z ) will be supported through version-1.12.11 (= v1.12.11 ), but will be discontinued after that. Example 1 2 $ docker pull etclabscore/core-geth:v1.12.9 # <-- all versions from 1.12.9 and later use this format $ docker pull etclabscore/core-geth:version-1.11.1 # <-- all versions from 1.12.8 and earlier use this format","title":"Installation"},{"location":"getting-started/installation/#pre-built-executable","text":"If you just want to download and run geth or any of the other tools here, this is the quickest and simplest way. Binary archives are published at https://github.com/etclabscore/core-geth/releases . Find the latest one for your OS, download it, (check the SHA sum), unarchive it, and run!","title":"Pre-built executable"},{"location":"getting-started/installation/#with-docker","text":"All runnable examples below are for images limited to geth . For images including the full suite of tools available from this source, use the Docker Hub tag prefix alltools. , like etclabscore/core-geth:alltools.latest , or the associated Docker file directly ./Dockerfile.alltools .","title":"With Docker"},{"location":"getting-started/installation/#docker-run","text":"One of the quickest ways to get Ethereum Classic up and running on your machine is by using Docker: 1 2 3 4 5 6 7 8 $ docker run -d \\ --name core-geth \\ -v $LOCAL_DATADIR :/root \\ -p 30303 :30303 \\ -p 8545 :8545 \\ etclabscore/core-geth \\ --classic \\ --http --http.port 8545 This will start geth in fast-sync mode with a DB memory allowance of 1GB just as the above command does. It will also create a persistent volume in your $LOCAL_DATADIR for saving your blockchain, as well as map the default devp2p and JSON-RPC API ports. Do not forget --http.addr 0.0.0.0 , if you want to access RPC from other containers and/or hosts. By default, geth binds to the local interface and RPC endpoints is not accessible from the outside.","title":"docker run"},{"location":"getting-started/installation/#docker-pull","text":"Docker images are automatically published on Docker Hub .","title":"docker pull"},{"location":"getting-started/installation/#image-latest","text":"Image latest is built automatically from the master branch whenever it\u2019s updated. 1 $ docker pull etclabscore/core-geth:latest","title":"Image: latest"},{"location":"getting-started/installation/#image-tag","text":"","title":"Image: &lt;tag&gt;"},{"location":"getting-started/installation/#version-xyz-deprecation-notice-2023-01-31","text":"tl;dr: Use etclabscore/core-geth:v1.12.9 instead of etclabscore/core-geth:version-1.12.9 . ~~Repository tags like v1.2.3 correspond to Docker tags like version-1.2.3 .~~ Update (2023-01-31) Docker Hub tags are now formatted as v1.2.3 , corresponding exactly with the repository tag (eg. v1.2.3 ). The previous format ( version-X.Y.Z ) will be supported through version-1.12.11 (= v1.12.11 ), but will be discontinued after that. Example 1 2 $ docker pull etclabscore/core-geth:v1.12.9 # <-- all versions from 1.12.9 and later use this format $ docker pull etclabscore/core-geth:version-1.11.1 # <-- all versions from 1.12.8 and earlier use this format","title":"\u26d4 version-X.Y.Z Deprecation Notice (2023-01-31)"},{"location":"getting-started/run-cli/","text":"Running geth \u00b6 Use for Ethereum mainnet While core-geth is mainly used for the Ethereum Classic network, you can use it for Ethereum mainnet and other supported networks as well. Fast node on an Ethereum Classic network \u00b6 By far the most common scenario is people wanting to simply interact with the Ethereum network: create accounts; transfer funds; deploy and interact with contracts. For this particular use-case the user doesn\u2019t care about years-old historical data, so we can fast-sync quickly to the current state of the network. To do so: 1 $ geth [|--classic|--testnet|--rinkeby|--mordor] console This command will: Start geth in fast sync mode (default, can be changed with the --syncmode flag), causing it to download more data in exchange for avoiding processing the entire history of the Ethereum network, which is very CPU intensive. Start up geth \u2019s built-in interactive JavaScript console , (via the trailing console subcommand) through which you can invoke all official web3 methods as well as geth \u2019s own management APIs . This tool is optional and if you leave it out you can always attach to an already running geth instance with geth attach . A Full node on the Mordor test network \u00b6 Transitioning towards developers, if you\u2019d like to play around with creating Ethereum contracts, you almost certainly would like to do that without any real money involved until you get the hang of the entire system. In other words, instead of attaching to the main network, you want to join the mordor test network with your node, which is fully equivalent to the main network, but with play-Ether only. 1 $ geth --mordor console The console subcommand has the exact same meaning as above and they are equally useful on the testnet too. Please see above for their explanations if you\u2019ve skipped here. Specifying the --mordor flag, however, will reconfigure your geth instance a bit: Instead of using the default data directory ( ~/.ethereum on Linux for example), geth will nest itself one level deeper into a mordor subfolder ( ~/.ethereum/mordor on Linux). Note, on OSX and Linux this also means that attaching to a running testnet node requires the use of a custom endpoint since geth attach will try to attach to a production node endpoint by default. E.g. geth attach <datadir>/mordor/geth.ipc . Windows users are not affected by this. Instead of connecting the main Ethereum network, the client will connect to the mordor\u2019s test network, which uses different P2P bootnodes, different network IDs and genesis states. Note Although there are some internal protective measures to prevent transactions from crossing over between the classic network and test network, you should make sure to always use separate accounts for play-money and real-money. Unless you manually move accounts, geth will by default correctly separate the two networks and will not make any accounts available between them.* Configuration \u00b6 As an alternative to passing the numerous flags to the geth binary, you can also pass a configuration file via: 1 $ geth --config /path/to/your_config.toml To get an idea how the file should look like you can use the dumpconfig subcommand to export your existing configuration: 1 $ geth --your-favourite-flags dumpconfig Note This works only with geth v1.6.0 and above.* Command-line Options \u00bgeth --help NAME: geth - the ETC Core Go-Ethereum command line interface Copyright 2013-2019 The go-ethereum Authors USAGE: geth [options] command [command options] [arguments...] VERSION: 1.11.21-unstable COMMANDS: account Manage accounts attach Start an interactive JavaScript environment (connect to node) console Start an interactive JavaScript environment copydb Create a local chain from a target chaindata folder dump Dump a specific block from storage dumpconfig Show configuration values dumpgenesis Dumps genesis block JSON configuration to stdout export Export blockchain into file export-preimages Export the preimage database into an RLP stream import Import a blockchain file import-preimages Import the preimage database from an RLP stream init Bootstrap and initialize a new genesis block inspect Inspect the storage size for each type of data in the database js Execute the specified JavaScript files license Display license information makecache Generate ethash verification cache (for testing) makedag Generate ethash mining DAG (for testing) removedb Remove blockchain and state databases show-deprecated-flags Show flags that have been deprecated version Print version numbers version-check Checks (online) whether the current version suffers from any known security vulnerabilities wallet Manage Ethereum presale wallets help, h Shows a list of commands or help for one command ETHEREUM OPTIONS: --config value TOML configuration file --datadir value Data directory for the databases and keystore (default: \"/Users/ziogaschr/Library/Ethereum\") --datadir.ancient value Data directory for ancient chain segments (default = inside chaindata) --ancient.rpc value Connect to a remote freezer via RPC. Value must an HTTP(S), WS(S), unix socket, or 'stdio' URL. Incompatible with --datadir.ancient --keystore value Directory for the keystore (default = inside the datadir) --nousb Disables monitoring for and managing USB hardware wallets --pcscdpath value Path to the smartcard daemon (pcscd) socket file --networkid value Explicitly set network id (integer)(For testnets: use --ropsten, --rinkeby, --mordor, --yolov2 instead) (default: 1) --classic Ethereum Classic network: pre-configured Ethereum Classic mainnet --mordor Mordor network: Ethereum Classic's cross-client proof-of-work test network --rinkeby Rinkeby network: pre-configured proof-of-authority test network --rinkeby Rinkeby network: pre-configured proof-of-authority test network --yolov2 YOLOv2 network: pre-configured proof-of-authority shortlived test network. --mintme MintMe.com Coin mainnet: pre-configured MintMe.com Coin mainnet --ropsten Ropsten network: pre-configured proof-of-work test network --syncmode value Blockchain sync mode (\"fast\", \"full\", or \"light\") (default: fast) --exitwhensynced Exits after block synchronisation completes --gcmode value Blockchain garbage collection mode (\"full\", \"archive\") (default: \"full\") --txlookuplimit value Number of recent blocks to maintain transactions index by-hash for (default = index all blocks) (default: 0) --ethstats value Reporting URL of a ethstats service (nodename:secret@host:port) --identity value Custom node name --lightkdf Reduce key-derivation RAM & CPU usage at some expense of KDF strength --whitelist value Comma separated block number-to-hash mappings to enforce (<number>=<hash>) --ecbp1100 value Configure ECBP-1100 (MESS) block activation number (default: 18446744073709551615) LIGHT CLIENT OPTIONS: --light.serve value Maximum percentage of time allowed for serving LES requests (multi-threaded processing allows values over 100) (default: 0) --light.ingress value Incoming bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited) (default: 0) --light.egress value Outgoing bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited) (default: 0) --light.maxpeers value Maximum number of light clients to serve, or light servers to attach to (default: 100) --ulc.servers value List of trusted ultra-light servers --ulc.fraction value Minimum % of trusted ultra-light servers required to announce a new head (default: 75) --ulc.onlyannounce Ultra light server sends announcements only --light.nopruning Disable ancient light chain data pruning DEVELOPER CHAIN OPTIONS: --dev Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled --dev.period value Block period for proof-of-authority network to use in developer mode (0 = mine only if transaction pending) (default: 0) --dev.pow Ephemeral proof-of-work network with a pre-funded developer account, mining enabled ETHASH OPTIONS: --ethash.cachedir value Directory to store the ethash verification caches (default = inside the datadir) --ethash.cachesinmem value Number of recent ethash caches to keep in memory (16MB each) (default: 2) --ethash.cachesondisk value Number of recent ethash caches to keep on disk (16MB each) (default: 3) --ethash.cacheslockmmap Lock memory maps of recent ethash caches --ethash.dagdir value Directory to store the ethash mining DAGs (default: \"/Users/ziogaschr/Library/Ethash\") --ethash.dagsinmem value Number of recent ethash mining DAGs to keep in memory (1+GB each) (default: 1) --ethash.dagsondisk value Number of recent ethash mining DAGs to keep on disk (1+GB each) (default: 2) --ethash.dagslockmmap Lock memory maps for recent ethash mining DAGs TRANSACTION POOL OPTIONS: --txpool.locals value Comma separated accounts to treat as locals (no flush, priority inclusion) --txpool.nolocals Disables price exemptions for locally submitted transactions --txpool.journal value Disk journal for local transaction to survive node restarts (default: \"transactions.rlp\") --txpool.rejournal value Time interval to regenerate the local transaction journal (default: 1h0m0s) --txpool.pricelimit value Minimum gas price limit to enforce for acceptance into the pool (default: 1) --txpool.pricebump value Price bump percentage to replace an already existing transaction (default: 10) --txpool.accountslots value Minimum number of executable transaction slots guaranteed per account (default: 16) --txpool.globalslots value Maximum number of executable transaction slots for all accounts (default: 4096) --txpool.accountqueue value Maximum number of non-executable transaction slots permitted per account (default: 64) --txpool.globalqueue value Maximum number of non-executable transaction slots for all accounts (default: 1024) --txpool.lifetime value Maximum amount of time non-executable transaction are queued (default: 3h0m0s) PERFORMANCE TUNING OPTIONS: --cache value Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode) (default: 1024) --cache.database value Percentage of cache memory allowance to use for database io (default: 50) --cache.trie value Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode) (default: 15) --cache.trie.journal value Disk journal directory for trie cache to survive node restarts (default: \"triecache\") --cache.trie.rejournal value Time interval to regenerate the trie cache journal (default: 1h0m0s) --cache.gc value Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode) (default: 25) --cache.snapshot value Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode) (default: 10) --cache.noprefetch Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data) --cache.preimages Enable recording the SHA3/keccak preimages of trie keys (default: true) ACCOUNT OPTIONS: --unlock value Comma separated list of accounts to unlock --password value Password file to use for non-interactive password input --signer value External signer (url or path to ipc file) --allow-insecure-unlock Allow insecure account unlocking when account-related RPCs are exposed by http API AND CONSOLE OPTIONS: --ipcdisable Disable the IPC-RPC server --ipcpath value Filename for IPC socket/pipe within the datadir (explicit paths escape it) --http Enable the HTTP-RPC server --http.addr value HTTP-RPC server listening interface (default: \"localhost\") --http.port value HTTP-RPC server listening port (default: 8545) --http.api value API's offered over the HTTP-RPC interface --http.corsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --http.vhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \"localhost\") --ws Enable the WS-RPC server --ws.addr value WS-RPC server listening interface (default: \"localhost\") --ws.port value WS-RPC server listening port (default: 8546) --ws.api value API's offered over the WS-RPC interface --ws.origins value Origins from which to accept websockets requests --graphql Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well. --graphql.corsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --graphql.vhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \"localhost\") --rpc.gascap value Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite) (default: 25000000) --rpc.txfeecap value Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 = no cap) (default: 1) --jspath loadScript JavaScript root path for loadScript (default: \".\") --exec value Execute JavaScript statement --preload value Comma separated list of JavaScript files to preload into the console NETWORKING OPTIONS: --bootnodes value Comma separated enode URLs for P2P discovery bootstrap --bootnodesv4 value Comma separated enode URLs for P2P v4 discovery bootstrap (light server, full nodes) (deprecated, use --bootnodes) --bootnodesv5 value Comma separated enode URLs for P2P v5 discovery bootstrap (light server, light nodes) (deprecated, use --bootnodes) --discovery.dns value Sets DNS discovery entry points (use \"\" to disable DNS) --eth.protocols value Sets the Ethereum Protocol versions (65|64|63) (default = 65,64,63 first is primary) --port value Network listening port (default: 30303) --maxpeers value Maximum number of network peers (network disabled if set to 0) (default: 50) --maxpendpeers value Maximum number of pending connection attempts (defaults used if set to 0) (default: 0) --nat value NAT port mapping mechanism (any|none|upnp|pmp|extip:<IP>) (default: \"any\") --nodiscover Disables the peer discovery mechanism (manual peer addition) --v5disc Enables the experimental RLPx V5 (Topic Discovery) mechanism --netrestrict value Restricts network communication to the given IP networks (CIDR masks) --nodekey value P2P node key file --nodekeyhex value P2P node key as hex (for testing) MINER OPTIONS: --mine Enable mining --miner.threads value Number of CPU threads to use for mining (default: 0) --miner.notify value Comma separated HTTP URL list to notify of new work packages --miner.gasprice value Minimum gas price for mining a transaction (default: 1000000000) --miner.gastarget value Target gas floor for mined blocks (default: 8000000) --miner.gaslimit value Target gas ceiling for mined blocks (default: 8000000) --miner.etherbase value Public address for block mining rewards (default = first account) (default: \"0\") --miner.extradata value Block extra data set by the miner (default = client version) --miner.recommit value Time interval to recreate the block being mined (default: 3s) --miner.noverify Disable remote sealing verification GAS PRICE ORACLE OPTIONS: --gpo.blocks value Number of recent blocks to check for gas prices (default: 20) --gpo.percentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (default: 60) --gpo.maxprice value Maximum gas price will be recommended by gpo (default: 500000000000) VIRTUAL MACHINE OPTIONS: --vmdebug Record information useful for VM and contract debugging --vm.evm value External EVM configuration (default = built-in interpreter) --vm.ewasm value External ewasm configuration (default = built-in interpreter) LOGGING AND DEBUGGING OPTIONS: --fakepow Disables proof-of-work verification --fakepow.poisson Disables proof-of-work verification and adds mining delay (Poisson) based on --miner.threads --nocompaction Disables db compaction after import --verbosity value Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3) --vmodule value Per-module verbosity: comma-separated list of <pattern>=<level> (e.g. eth/*=5,p2p=4) --backtrace value Request a stack trace at a specific logging statement (e.g. \"block.go:271\") --debug Prepends log messages with call-site location (file and line number) --pprof Enable the pprof HTTP server --pprof.addr value pprof HTTP server listening interface (default: \"127.0.0.1\") --pprof.port value pprof HTTP server listening port (default: 6060) --pprof.memprofilerate value Turn on memory profiling with the given rate (default: 524288) --pprof.blockprofilerate value Turn on block profiling with the given rate (default: 0) --pprof.cpuprofile value Write CPU profile to the given file --trace value Write execution trace to the given file METRICS AND STATS OPTIONS: --metrics Enable metrics collection and reporting --metrics.expensive Enable expensive metrics collection and reporting --metrics.addr value Enable stand-alone metrics HTTP server listening interface (default: \"127.0.0.1\") --metrics.port value Metrics HTTP server listening port (default: 6060) --metrics.influxdb Enable metrics export/push to an external InfluxDB database --metrics.influxdb.endpoint value InfluxDB API endpoint to report metrics to (default: \"http://localhost:8086\") --metrics.influxdb.database value InfluxDB database name to push reported metrics to (default: \"geth\") --metrics.influxdb.username value Username to authorize access to the database (default: \"test\") --metrics.influxdb.password value Password to authorize access to the database (default: \"test\") --metrics.influxdb.tags value Comma-separated InfluxDB tags (key/values) attached to all measurements (default: \"host=localhost\") WHISPER (deprecated) OPTIONS: --shh Enable Whisper --shh.maxmessagesize value Max message size accepted (default: 1048576) --shh.pow value Minimum POW accepted (default: 0.2) --shh.restrict-light Restrict connection between two whisper light clients ALIASED (deprecated) OPTIONS: --rpc Enable the HTTP-RPC server (deprecated, use --http) --rpcaddr value HTTP-RPC server listening interface (deprecated, use --http.addr) (default: \"localhost\") --rpcport value HTTP-RPC server listening port (deprecated, use --http.port) (default: 8545) --rpccorsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) (deprecated, use --http.corsdomain) --rpcvhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (deprecated, use --http.vhosts) (default: \"localhost\") --rpcapi value API's offered over the HTTP-RPC interface (deprecated, use --http.api) --wsaddr value WS-RPC server listening interface (deprecated, use --ws.addr) (default: \"localhost\") --wsport value WS-RPC server listening port (deprecated, use --ws.port) (default: 8546) --wsorigins value Origins from which to accept websockets requests (deprecated, use --ws.origins) --wsapi value API's offered over the WS-RPC interface (deprecated, use --ws.api) --gpoblocks value Number of recent blocks to check for gas prices (deprecated, use --gpo.blocks) (default: 20) --gpopercentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (deprecated, use --gpo.percentile) (default: 60) --graphql.addr value GraphQL server listening interface (deprecated, graphql can only be enabled on the HTTP-RPC server endpoint, use --graphql) --graphql.port value GraphQL server listening port (deprecated, graphql can only be enabled on the HTTP-RPC server endpoint, use --graphql) (default: 8545) --pprofport value pprof HTTP server listening port (deprecated, use --pprof.port) (default: 6060) --pprofaddr value pprof HTTP server listening interface (deprecated, use --pprof.addr) (default: \"127.0.0.1\") --memprofilerate value Turn on memory profiling with the given rate (deprecated, use --pprof.memprofilerate) (default: 524288) --blockprofilerate value Turn on block profiling with the given rate (deprecated, use --pprof.blockprofilerate) (default: 0) --cpuprofile value Write CPU profile to the given file (deprecated, use --pprof.cpuprofile) MISC OPTIONS: --snapshot Enables snapshot-database mode -- experimental work in progress feature --help, -h show help COPYRIGHT: Copyright 2013-2020 The core-geth and go-ethereum Authors","title":"Command Line Interface (CLI)"},{"location":"getting-started/run-cli/#running-geth","text":"Use for Ethereum mainnet While core-geth is mainly used for the Ethereum Classic network, you can use it for Ethereum mainnet and other supported networks as well.","title":"Running geth"},{"location":"getting-started/run-cli/#fast-node-on-an-ethereum-classic-network","text":"By far the most common scenario is people wanting to simply interact with the Ethereum network: create accounts; transfer funds; deploy and interact with contracts. For this particular use-case the user doesn\u2019t care about years-old historical data, so we can fast-sync quickly to the current state of the network. To do so: 1 $ geth [|--classic|--testnet|--rinkeby|--mordor] console This command will: Start geth in fast sync mode (default, can be changed with the --syncmode flag), causing it to download more data in exchange for avoiding processing the entire history of the Ethereum network, which is very CPU intensive. Start up geth \u2019s built-in interactive JavaScript console , (via the trailing console subcommand) through which you can invoke all official web3 methods as well as geth \u2019s own management APIs . This tool is optional and if you leave it out you can always attach to an already running geth instance with geth attach .","title":"Fast node on an Ethereum Classic network"},{"location":"getting-started/run-cli/#a-full-node-on-the-mordor-test-network","text":"Transitioning towards developers, if you\u2019d like to play around with creating Ethereum contracts, you almost certainly would like to do that without any real money involved until you get the hang of the entire system. In other words, instead of attaching to the main network, you want to join the mordor test network with your node, which is fully equivalent to the main network, but with play-Ether only. 1 $ geth --mordor console The console subcommand has the exact same meaning as above and they are equally useful on the testnet too. Please see above for their explanations if you\u2019ve skipped here. Specifying the --mordor flag, however, will reconfigure your geth instance a bit: Instead of using the default data directory ( ~/.ethereum on Linux for example), geth will nest itself one level deeper into a mordor subfolder ( ~/.ethereum/mordor on Linux). Note, on OSX and Linux this also means that attaching to a running testnet node requires the use of a custom endpoint since geth attach will try to attach to a production node endpoint by default. E.g. geth attach <datadir>/mordor/geth.ipc . Windows users are not affected by this. Instead of connecting the main Ethereum network, the client will connect to the mordor\u2019s test network, which uses different P2P bootnodes, different network IDs and genesis states. Note Although there are some internal protective measures to prevent transactions from crossing over between the classic network and test network, you should make sure to always use separate accounts for play-money and real-money. Unless you manually move accounts, geth will by default correctly separate the two networks and will not make any accounts available between them.*","title":"A Full node on the Mordor test network"},{"location":"getting-started/run-cli/#configuration","text":"As an alternative to passing the numerous flags to the geth binary, you can also pass a configuration file via: 1 $ geth --config /path/to/your_config.toml To get an idea how the file should look like you can use the dumpconfig subcommand to export your existing configuration: 1 $ geth --your-favourite-flags dumpconfig Note This works only with geth v1.6.0 and above.*","title":"Configuration"},{"location":"getting-started/run-cli/#command-line-options","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 $ geth --help NAME: geth - the ETC Core Go-Ethereum command line interface Copyright 2013-2019 The go-ethereum Authors USAGE: geth [options] command [command options] [arguments...] VERSION: 1.11.21-unstable COMMANDS: account Manage accounts attach Start an interactive JavaScript environment (connect to node) console Start an interactive JavaScript environment copydb Create a local chain from a target chaindata folder dump Dump a specific block from storage dumpconfig Show configuration values dumpgenesis Dumps genesis block JSON configuration to stdout export Export blockchain into file export-preimages Export the preimage database into an RLP stream import Import a blockchain file import-preimages Import the preimage database from an RLP stream init Bootstrap and initialize a new genesis block inspect Inspect the storage size for each type of data in the database js Execute the specified JavaScript files license Display license information makecache Generate ethash verification cache (for testing) makedag Generate ethash mining DAG (for testing) removedb Remove blockchain and state databases show-deprecated-flags Show flags that have been deprecated version Print version numbers version-check Checks (online) whether the current version suffers from any known security vulnerabilities wallet Manage Ethereum presale wallets help, h Shows a list of commands or help for one command ETHEREUM OPTIONS: --config value TOML configuration file --datadir value Data directory for the databases and keystore (default: \"/Users/ziogaschr/Library/Ethereum\") --datadir.ancient value Data directory for ancient chain segments (default = inside chaindata) --ancient.rpc value Connect to a remote freezer via RPC. Value must an HTTP(S), WS(S), unix socket, or 'stdio' URL. Incompatible with --datadir.ancient --keystore value Directory for the keystore (default = inside the datadir) --nousb Disables monitoring for and managing USB hardware wallets --pcscdpath value Path to the smartcard daemon (pcscd) socket file --networkid value Explicitly set network id (integer)(For testnets: use --ropsten, --rinkeby, --mordor, --yolov2 instead) (default: 1) --classic Ethereum Classic network: pre-configured Ethereum Classic mainnet --mordor Mordor network: Ethereum Classic's cross-client proof-of-work test network --rinkeby Rinkeby network: pre-configured proof-of-authority test network --rinkeby Rinkeby network: pre-configured proof-of-authority test network --yolov2 YOLOv2 network: pre-configured proof-of-authority shortlived test network. --mintme MintMe.com Coin mainnet: pre-configured MintMe.com Coin mainnet --ropsten Ropsten network: pre-configured proof-of-work test network --syncmode value Blockchain sync mode (\"fast\", \"full\", or \"light\") (default: fast) --exitwhensynced Exits after block synchronisation completes --gcmode value Blockchain garbage collection mode (\"full\", \"archive\") (default: \"full\") --txlookuplimit value Number of recent blocks to maintain transactions index by-hash for (default = index all blocks) (default: 0) --ethstats value Reporting URL of a ethstats service (nodename:secret@host:port) --identity value Custom node name --lightkdf Reduce key-derivation RAM & CPU usage at some expense of KDF strength --whitelist value Comma separated block number-to-hash mappings to enforce (<number>=<hash>) --ecbp1100 value Configure ECBP-1100 (MESS) block activation number (default: 18446744073709551615) LIGHT CLIENT OPTIONS: --light.serve value Maximum percentage of time allowed for serving LES requests (multi-threaded processing allows values over 100) (default: 0) --light.ingress value Incoming bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited) (default: 0) --light.egress value Outgoing bandwidth limit for serving light clients (kilobytes/sec, 0 = unlimited) (default: 0) --light.maxpeers value Maximum number of light clients to serve, or light servers to attach to (default: 100) --ulc.servers value List of trusted ultra-light servers --ulc.fraction value Minimum % of trusted ultra-light servers required to announce a new head (default: 75) --ulc.onlyannounce Ultra light server sends announcements only --light.nopruning Disable ancient light chain data pruning DEVELOPER CHAIN OPTIONS: --dev Ephemeral proof-of-authority network with a pre-funded developer account, mining enabled --dev.period value Block period for proof-of-authority network to use in developer mode (0 = mine only if transaction pending) (default: 0) --dev.pow Ephemeral proof-of-work network with a pre-funded developer account, mining enabled ETHASH OPTIONS: --ethash.cachedir value Directory to store the ethash verification caches (default = inside the datadir) --ethash.cachesinmem value Number of recent ethash caches to keep in memory (16MB each) (default: 2) --ethash.cachesondisk value Number of recent ethash caches to keep on disk (16MB each) (default: 3) --ethash.cacheslockmmap Lock memory maps of recent ethash caches --ethash.dagdir value Directory to store the ethash mining DAGs (default: \"/Users/ziogaschr/Library/Ethash\") --ethash.dagsinmem value Number of recent ethash mining DAGs to keep in memory (1+GB each) (default: 1) --ethash.dagsondisk value Number of recent ethash mining DAGs to keep on disk (1+GB each) (default: 2) --ethash.dagslockmmap Lock memory maps for recent ethash mining DAGs TRANSACTION POOL OPTIONS: --txpool.locals value Comma separated accounts to treat as locals (no flush, priority inclusion) --txpool.nolocals Disables price exemptions for locally submitted transactions --txpool.journal value Disk journal for local transaction to survive node restarts (default: \"transactions.rlp\") --txpool.rejournal value Time interval to regenerate the local transaction journal (default: 1h0m0s) --txpool.pricelimit value Minimum gas price limit to enforce for acceptance into the pool (default: 1) --txpool.pricebump value Price bump percentage to replace an already existing transaction (default: 10) --txpool.accountslots value Minimum number of executable transaction slots guaranteed per account (default: 16) --txpool.globalslots value Maximum number of executable transaction slots for all accounts (default: 4096) --txpool.accountqueue value Maximum number of non-executable transaction slots permitted per account (default: 64) --txpool.globalqueue value Maximum number of non-executable transaction slots for all accounts (default: 1024) --txpool.lifetime value Maximum amount of time non-executable transaction are queued (default: 3h0m0s) PERFORMANCE TUNING OPTIONS: --cache value Megabytes of memory allocated to internal caching (default = 4096 mainnet full node, 128 light mode) (default: 1024) --cache.database value Percentage of cache memory allowance to use for database io (default: 50) --cache.trie value Percentage of cache memory allowance to use for trie caching (default = 15% full mode, 30% archive mode) (default: 15) --cache.trie.journal value Disk journal directory for trie cache to survive node restarts (default: \"triecache\") --cache.trie.rejournal value Time interval to regenerate the trie cache journal (default: 1h0m0s) --cache.gc value Percentage of cache memory allowance to use for trie pruning (default = 25% full mode, 0% archive mode) (default: 25) --cache.snapshot value Percentage of cache memory allowance to use for snapshot caching (default = 10% full mode, 20% archive mode) (default: 10) --cache.noprefetch Disable heuristic state prefetch during block import (less CPU and disk IO, more time waiting for data) --cache.preimages Enable recording the SHA3/keccak preimages of trie keys (default: true) ACCOUNT OPTIONS: --unlock value Comma separated list of accounts to unlock --password value Password file to use for non-interactive password input --signer value External signer (url or path to ipc file) --allow-insecure-unlock Allow insecure account unlocking when account-related RPCs are exposed by http API AND CONSOLE OPTIONS: --ipcdisable Disable the IPC-RPC server --ipcpath value Filename for IPC socket/pipe within the datadir (explicit paths escape it) --http Enable the HTTP-RPC server --http.addr value HTTP-RPC server listening interface (default: \"localhost\") --http.port value HTTP-RPC server listening port (default: 8545) --http.api value API's offered over the HTTP-RPC interface --http.corsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --http.vhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \"localhost\") --ws Enable the WS-RPC server --ws.addr value WS-RPC server listening interface (default: \"localhost\") --ws.port value WS-RPC server listening port (default: 8546) --ws.api value API's offered over the WS-RPC interface --ws.origins value Origins from which to accept websockets requests --graphql Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well. --graphql.corsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --graphql.vhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \"localhost\") --rpc.gascap value Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite) (default: 25000000) --rpc.txfeecap value Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 = no cap) (default: 1) --jspath loadScript JavaScript root path for loadScript (default: \".\") --exec value Execute JavaScript statement --preload value Comma separated list of JavaScript files to preload into the console NETWORKING OPTIONS: --bootnodes value Comma separated enode URLs for P2P discovery bootstrap --bootnodesv4 value Comma separated enode URLs for P2P v4 discovery bootstrap (light server, full nodes) (deprecated, use --bootnodes) --bootnodesv5 value Comma separated enode URLs for P2P v5 discovery bootstrap (light server, light nodes) (deprecated, use --bootnodes) --discovery.dns value Sets DNS discovery entry points (use \"\" to disable DNS) --eth.protocols value Sets the Ethereum Protocol versions (65|64|63) (default = 65,64,63 first is primary) --port value Network listening port (default: 30303) --maxpeers value Maximum number of network peers (network disabled if set to 0) (default: 50) --maxpendpeers value Maximum number of pending connection attempts (defaults used if set to 0) (default: 0) --nat value NAT port mapping mechanism (any|none|upnp|pmp|extip:<IP>) (default: \"any\") --nodiscover Disables the peer discovery mechanism (manual peer addition) --v5disc Enables the experimental RLPx V5 (Topic Discovery) mechanism --netrestrict value Restricts network communication to the given IP networks (CIDR masks) --nodekey value P2P node key file --nodekeyhex value P2P node key as hex (for testing) MINER OPTIONS: --mine Enable mining --miner.threads value Number of CPU threads to use for mining (default: 0) --miner.notify value Comma separated HTTP URL list to notify of new work packages --miner.gasprice value Minimum gas price for mining a transaction (default: 1000000000) --miner.gastarget value Target gas floor for mined blocks (default: 8000000) --miner.gaslimit value Target gas ceiling for mined blocks (default: 8000000) --miner.etherbase value Public address for block mining rewards (default = first account) (default: \"0\") --miner.extradata value Block extra data set by the miner (default = client version) --miner.recommit value Time interval to recreate the block being mined (default: 3s) --miner.noverify Disable remote sealing verification GAS PRICE ORACLE OPTIONS: --gpo.blocks value Number of recent blocks to check for gas prices (default: 20) --gpo.percentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (default: 60) --gpo.maxprice value Maximum gas price will be recommended by gpo (default: 500000000000) VIRTUAL MACHINE OPTIONS: --vmdebug Record information useful for VM and contract debugging --vm.evm value External EVM configuration (default = built-in interpreter) --vm.ewasm value External ewasm configuration (default = built-in interpreter) LOGGING AND DEBUGGING OPTIONS: --fakepow Disables proof-of-work verification --fakepow.poisson Disables proof-of-work verification and adds mining delay (Poisson) based on --miner.threads --nocompaction Disables db compaction after import --verbosity value Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3) --vmodule value Per-module verbosity: comma-separated list of <pattern>=<level> (e.g. eth/*=5,p2p=4) --backtrace value Request a stack trace at a specific logging statement (e.g. \"block.go:271\") --debug Prepends log messages with call-site location (file and line number) --pprof Enable the pprof HTTP server --pprof.addr value pprof HTTP server listening interface (default: \"127.0.0.1\") --pprof.port value pprof HTTP server listening port (default: 6060) --pprof.memprofilerate value Turn on memory profiling with the given rate (default: 524288) --pprof.blockprofilerate value Turn on block profiling with the given rate (default: 0) --pprof.cpuprofile value Write CPU profile to the given file --trace value Write execution trace to the given file METRICS AND STATS OPTIONS: --metrics Enable metrics collection and reporting --metrics.expensive Enable expensive metrics collection and reporting --metrics.addr value Enable stand-alone metrics HTTP server listening interface (default: \"127.0.0.1\") --metrics.port value Metrics HTTP server listening port (default: 6060) --metrics.influxdb Enable metrics export/push to an external InfluxDB database --metrics.influxdb.endpoint value InfluxDB API endpoint to report metrics to (default: \"http://localhost:8086\") --metrics.influxdb.database value InfluxDB database name to push reported metrics to (default: \"geth\") --metrics.influxdb.username value Username to authorize access to the database (default: \"test\") --metrics.influxdb.password value Password to authorize access to the database (default: \"test\") --metrics.influxdb.tags value Comma-separated InfluxDB tags (key/values) attached to all measurements (default: \"host=localhost\") WHISPER (deprecated) OPTIONS: --shh Enable Whisper --shh.maxmessagesize value Max message size accepted (default: 1048576) --shh.pow value Minimum POW accepted (default: 0.2) --shh.restrict-light Restrict connection between two whisper light clients ALIASED (deprecated) OPTIONS: --rpc Enable the HTTP-RPC server (deprecated, use --http) --rpcaddr value HTTP-RPC server listening interface (deprecated, use --http.addr) (default: \"localhost\") --rpcport value HTTP-RPC server listening port (deprecated, use --http.port) (default: 8545) --rpccorsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) (deprecated, use --http.corsdomain) --rpcvhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (deprecated, use --http.vhosts) (default: \"localhost\") --rpcapi value API's offered over the HTTP-RPC interface (deprecated, use --http.api) --wsaddr value WS-RPC server listening interface (deprecated, use --ws.addr) (default: \"localhost\") --wsport value WS-RPC server listening port (deprecated, use --ws.port) (default: 8546) --wsorigins value Origins from which to accept websockets requests (deprecated, use --ws.origins) --wsapi value API's offered over the WS-RPC interface (deprecated, use --ws.api) --gpoblocks value Number of recent blocks to check for gas prices (deprecated, use --gpo.blocks) (default: 20) --gpopercentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (deprecated, use --gpo.percentile) (default: 60) --graphql.addr value GraphQL server listening interface (deprecated, graphql can only be enabled on the HTTP-RPC server endpoint, use --graphql) --graphql.port value GraphQL server listening port (deprecated, graphql can only be enabled on the HTTP-RPC server endpoint, use --graphql) (default: 8545) --pprofport value pprof HTTP server listening port (deprecated, use --pprof.port) (default: 6060) --pprofaddr value pprof HTTP server listening interface (deprecated, use --pprof.addr) (default: \"127.0.0.1\") --memprofilerate value Turn on memory profiling with the given rate (deprecated, use --pprof.memprofilerate) (default: 524288) --blockprofilerate value Turn on block profiling with the given rate (deprecated, use --pprof.blockprofilerate) (default: 0) --cpuprofile value Write CPU profile to the given file (deprecated, use --pprof.cpuprofile) MISC OPTIONS: --snapshot Enables snapshot-database mode -- experimental work in progress feature --help, -h show help COPYRIGHT: Copyright 2013-2020 The core-geth and go-ethereum Authors","title":"Command-line Options"},{"location":"postmortems/2021-08-22-split-postmortem/","text":"Minority split 2021-08-27 post mortem \u00b6 This is a post-mortem concerning the minority split that occurred on Ethereum mainnet on block 13107518 , at which a minority chain split occurred. Timeline \u00b6 2021-08-17: Guido Vranken submitted a bounty report. Investigation started, root cause identified, patch variations discussed. 2021-08-18: Made public announcement over twitter about upcoming security release upcoming Tuesday. Downstream projects were also notified about the upcoming patch-release. 2021-08-24: Released v1.10.8 containing the fix on Tuesday morning (CET). Erigon released v2021.08.04 . 2021-08-27: At 12:50:07 UTC, issue exploited. Analysis started roughly 30m later, Bounty report \u00b6 2021-08-17 RETURNDATA corruption via datacopy \u00b6 On 2021-08-17, Guido Vranken submitted a report to bounty@ethereum.org . This coincided with a geth-meetup in Berlin, so the geth team could fairly quickly analyse the issue. He submitted a proof of concept which called the dataCopy precompile, where the input slice and output slice were overlapping but shifted. Doing a copy where the src and dest overlaps is not a problem in itself, however, the returnData slice was also using the same memory as a backing-array. Technical details \u00b6 During CALL-variants, geth does not copy the input. This was changed at one point, to avoid a DoS attack reported by Hubert Ritzdorf, to avoid copying data a lot on repeated CALL s \u2013 essentially combating a DoS via malloc . Further, the datacopy precompile also does not copy the data, but just returns the same slice. This is fine so far. After the execution of dataCopy , we copy the ret into the designated memory area, and this is what causes a problem. Because we\u2019re copying a slice of memory over a slice of memory, and this operation modifies (shifts) the data in the source \u2013 the ret . So this means we wind up with corrupted returndata. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1. Calling datacopy memory: [0, 1, 2, 3, 4] in (mem[0:4]) : [0,1,2,3] out (mem[1:5]): [1,2,3,4] 2. dataCopy returns returndata (==in, mem[0:4]): [0,1,2,3] 3. Copy in -> out => memory: [0,0,1,2,3] => returndata: [0,0,1,2] Summary \u00b6 A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different stateRoot when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split: mainnet splitting in two forks. Handling \u00b6 On the evening of 17th, we discussed options on how to handle it. We made a state test to reproduce the issue, and verified that neither openethereum , nethermind nor besu were affected by the same vulnerability, and started a full-sync with a patched version of geth . It was decided that in this specific instance, it would be possible to make a public announcement and a patch release: The fix can be made pretty \u2018generically\u2019, e.g. always copying data on input to precompiles. The flaw is pretty difficult to find, given a generic fix in the call. The attacker needs to figure out that it concerns the precompiles, specifically the datcopy, and that it concerns the RETURNDATA buffer rather than the regular memory, and lastly the special circumstances to trigger it (overlapping but shifted input/output). Since we had merged the removal of ETH65 , if the entire network were to upgrade, then nodes which have not yet implemented ETH66 would be cut off from the network. After further discussions, we decided to: Announce an upcoming security release on Tuesday (August 24th), via Twitter and official channels, plus reach out to downstream projects. Temporarily revert the ETH65 -removal. Place the fix into the PR optimizing the jumpdest analysis 233381 . After 4-8 weeks, release details about the vulnerability. Exploit \u00b6 At block 13107518 , mined at Aug-27-2021 12:50:07 PM +UTC, a minority chain split occurred. The discord user @AlexSSD7 notified the allcoredevs-channel on the Eth R&D discord, on Aug 27 13:09 UTC. At 14:09 UTC, it was confirmed that the transaction 0x1cb6fb36633d270edefc04d048145b4298e67b8aa82a9e5ec4aa1435dd770ce4 had triggered the bug, leading to a minority-split of the chain. The term \u2018minority split\u2019 means that the majority of miners continued to mine on the correct chain. At 14:17 UTC, @mhswende tweeted out about the issue [2]. The attack was sent from an account funded from Tornado cash. It was also found that the same attack had been carried out on the BSC chain at roughly the same time \u2013 at a block mined 12 minutes earlier , at Aug-27-2021 12:38:30 PM +UTC. The blocks on the \u2018bad\u2019 chain were investigated, and Tim Beiko reached out to those mining operators on the minority chain who could be identified via block extradata. Lessons learned \u00b6 Disclosure decision \u00b6 The geth-team have an official policy regarding vulnerability disclosure . The primary goal for the Geth team is the health of the Ethereum network as a whole, and the decision whether or not to publish details about a serious vulnerability boils down to minimizing the risk and/or impact of discovery and exploitation. In this case, it was decided that public pre-announce + patch would likely lead to sufficient update-window for a critical mass of nodes/miners to upgrade in time before it could be exploited. In hindsight, this was a dangerous decision, and it\u2019s unlikely that the same decision would be reached were a similar incident to happen again. Disclosure path \u00b6 Several subprojects were informed about the upcoming security patch: Polygon/Matic MEV Avalanche Erigon BSC EWF Quorum ETC xDAI However, some were \u2018lost\u2019, and only notified later Optimism Summa Harmony Action point: create a low-volume geth-announce@ethereum.org email list where dependent projects/operators can receive public announcements. - This has been done. If you wish to receive release- and security announcements, sign up here Fork monitoring \u00b6 The fork monitor behaved \u2018ok\u2019 during the incident, but had to be restarted during the evening. Action point: improve the resiliency of the forkmon, which is currently not performing great when many nodes are connected. Action point: enable push-based alerts to be sent from the forkmon, to speed up the fork detection. Links \u00b6 [1] https://twitter.com/go_ethereum/status/1428051458763763721 [2] https://twitter.com/mhswende/status/1431259601530458112 Appendix \u00b6 Subprojects \u00b6 The projects were sent variations of the following text: 1 2 3 4 5 6 7 8 9 We have identified a security issue with go-ethereum, and will issue a new release (v1.10.8) on Tuesday next week. At this point, we will not disclose details about the issue, but recommend downstream/dependent projects to be ready to take actions to upgrade to the latest go-ethereum codebase. More information about the issue will be disclosed at a later date. https://twitter.com/go_ethereum/status/1428051458763763721 Patch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 diff --git a/core/vm/instructions.go b/core/vm/instructions.go index f7ef2f900e..6c8c6e6e6f 100644 --- a/core/vm/instructions.go +++ b/core/vm/instructions.go @@ -669,6 +669,7 @@ func opCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byt } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -703,6 +704,7 @@ func opCallCode(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([ } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -730,6 +732,7 @@ func opDelegateCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -757,6 +760,7 @@ func opStaticCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas diff --git a/core/vm/interpreter.go b/core/vm/interpreter.go index 9cf0c4e2c1..9fb83799c9 100644 --- a/core/vm/interpreter.go +++ b/core/vm/interpreter.go @@ -262,7 +262,7 @@ func (in *EVMInterpreter) Run(contract *Contract, input []byte, readOnly bool) ( // if the operation clears the return data (e.g. it has returning data) // set the last return to the result of the operation. if operation.returns { - in.returnData = common.CopyBytes(res) + in.returnData = res } switch { Statetest to test for the issue \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 { \"trigger-issue\" : { \"env\" : { \"currentCoinbase\" : \"b94f5374fce5edbc8e2a8697c15331677e6ebf0b\" , \"currentDifficulty\" : \"0x20000\" , \"currentGasLimit\" : \"0x26e1f476fe1e22\" , \"currentNumber\" : \"0x1\" , \"currentTimestamp\" : \"0x3e8\" , \"previousHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" }, \"pre\" : { \"0x00000000000000000000000000000000000000bb\" : { \"code\" : \"0x6001600053600260015360036002536004600353600560045360066005536006600260066000600060047f7ef0367e633852132a0ebbf70eb714015dd44bc82e1e55a96ef1389c999c1bcaf13d600060003e596000208055\" , \"storage\" : {}, \"balance\" : \"0x5\" , \"nonce\" : \"0x0\" }, \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\" : { \"code\" : \"0x\" , \"storage\" : {}, \"balance\" : \"0xffffffff\" , \"nonce\" : \"0x0\" } }, \"transaction\" : { \"gasPrice\" : \"0x1\" , \"nonce\" : \"0x0\" , \"to\" : \"0x00000000000000000000000000000000000000bb\" , \"data\" : [ \"0x\" ], \"gasLimit\" : [ \"0x7a1200\" ], \"value\" : [ \"0x01\" ], \"secretKey\" : \"0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\" }, \"out\" : \"0x\" , \"post\" : { \"Berlin\" : [ { \"hash\" : \"2a38a040bab1e1fa499253d98b2fd363e5756ecc52db47dd59af7116c068368c\" , \"logs\" : \"1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\" , \"indexes\" : { \"data\" : 0 , \"gas\" : 0 , \"value\" : 0 } } ] } } }","title":"Minority split 2021-08-27 post mortem"},{"location":"postmortems/2021-08-22-split-postmortem/#minority-split-2021-08-27-post-mortem","text":"This is a post-mortem concerning the minority split that occurred on Ethereum mainnet on block 13107518 , at which a minority chain split occurred.","title":"Minority split 2021-08-27 post mortem"},{"location":"postmortems/2021-08-22-split-postmortem/#timeline","text":"2021-08-17: Guido Vranken submitted a bounty report. Investigation started, root cause identified, patch variations discussed. 2021-08-18: Made public announcement over twitter about upcoming security release upcoming Tuesday. Downstream projects were also notified about the upcoming patch-release. 2021-08-24: Released v1.10.8 containing the fix on Tuesday morning (CET). Erigon released v2021.08.04 . 2021-08-27: At 12:50:07 UTC, issue exploited. Analysis started roughly 30m later,","title":"Timeline"},{"location":"postmortems/2021-08-22-split-postmortem/#bounty-report","text":"","title":"Bounty report"},{"location":"postmortems/2021-08-22-split-postmortem/#2021-08-17-returndata-corruption-via-datacopy","text":"On 2021-08-17, Guido Vranken submitted a report to bounty@ethereum.org . This coincided with a geth-meetup in Berlin, so the geth team could fairly quickly analyse the issue. He submitted a proof of concept which called the dataCopy precompile, where the input slice and output slice were overlapping but shifted. Doing a copy where the src and dest overlaps is not a problem in itself, however, the returnData slice was also using the same memory as a backing-array.","title":"2021-08-17 RETURNDATA corruption via datacopy"},{"location":"postmortems/2021-08-22-split-postmortem/#technical-details","text":"During CALL-variants, geth does not copy the input. This was changed at one point, to avoid a DoS attack reported by Hubert Ritzdorf, to avoid copying data a lot on repeated CALL s \u2013 essentially combating a DoS via malloc . Further, the datacopy precompile also does not copy the data, but just returns the same slice. This is fine so far. After the execution of dataCopy , we copy the ret into the designated memory area, and this is what causes a problem. Because we\u2019re copying a slice of memory over a slice of memory, and this operation modifies (shifts) the data in the source \u2013 the ret . So this means we wind up with corrupted returndata. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1. Calling datacopy memory: [0, 1, 2, 3, 4] in (mem[0:4]) : [0,1,2,3] out (mem[1:5]): [1,2,3,4] 2. dataCopy returns returndata (==in, mem[0:4]): [0,1,2,3] 3. Copy in -> out => memory: [0,0,1,2,3] => returndata: [0,0,1,2]","title":"Technical details"},{"location":"postmortems/2021-08-22-split-postmortem/#summary","text":"A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different stateRoot when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split: mainnet splitting in two forks.","title":"Summary"},{"location":"postmortems/2021-08-22-split-postmortem/#handling","text":"On the evening of 17th, we discussed options on how to handle it. We made a state test to reproduce the issue, and verified that neither openethereum , nethermind nor besu were affected by the same vulnerability, and started a full-sync with a patched version of geth . It was decided that in this specific instance, it would be possible to make a public announcement and a patch release: The fix can be made pretty \u2018generically\u2019, e.g. always copying data on input to precompiles. The flaw is pretty difficult to find, given a generic fix in the call. The attacker needs to figure out that it concerns the precompiles, specifically the datcopy, and that it concerns the RETURNDATA buffer rather than the regular memory, and lastly the special circumstances to trigger it (overlapping but shifted input/output). Since we had merged the removal of ETH65 , if the entire network were to upgrade, then nodes which have not yet implemented ETH66 would be cut off from the network. After further discussions, we decided to: Announce an upcoming security release on Tuesday (August 24th), via Twitter and official channels, plus reach out to downstream projects. Temporarily revert the ETH65 -removal. Place the fix into the PR optimizing the jumpdest analysis 233381 . After 4-8 weeks, release details about the vulnerability.","title":"Handling"},{"location":"postmortems/2021-08-22-split-postmortem/#exploit","text":"At block 13107518 , mined at Aug-27-2021 12:50:07 PM +UTC, a minority chain split occurred. The discord user @AlexSSD7 notified the allcoredevs-channel on the Eth R&D discord, on Aug 27 13:09 UTC. At 14:09 UTC, it was confirmed that the transaction 0x1cb6fb36633d270edefc04d048145b4298e67b8aa82a9e5ec4aa1435dd770ce4 had triggered the bug, leading to a minority-split of the chain. The term \u2018minority split\u2019 means that the majority of miners continued to mine on the correct chain. At 14:17 UTC, @mhswende tweeted out about the issue [2]. The attack was sent from an account funded from Tornado cash. It was also found that the same attack had been carried out on the BSC chain at roughly the same time \u2013 at a block mined 12 minutes earlier , at Aug-27-2021 12:38:30 PM +UTC. The blocks on the \u2018bad\u2019 chain were investigated, and Tim Beiko reached out to those mining operators on the minority chain who could be identified via block extradata.","title":"Exploit"},{"location":"postmortems/2021-08-22-split-postmortem/#lessons-learned","text":"","title":"Lessons learned"},{"location":"postmortems/2021-08-22-split-postmortem/#disclosure-decision","text":"The geth-team have an official policy regarding vulnerability disclosure . The primary goal for the Geth team is the health of the Ethereum network as a whole, and the decision whether or not to publish details about a serious vulnerability boils down to minimizing the risk and/or impact of discovery and exploitation. In this case, it was decided that public pre-announce + patch would likely lead to sufficient update-window for a critical mass of nodes/miners to upgrade in time before it could be exploited. In hindsight, this was a dangerous decision, and it\u2019s unlikely that the same decision would be reached were a similar incident to happen again.","title":"Disclosure decision"},{"location":"postmortems/2021-08-22-split-postmortem/#disclosure-path","text":"Several subprojects were informed about the upcoming security patch: Polygon/Matic MEV Avalanche Erigon BSC EWF Quorum ETC xDAI However, some were \u2018lost\u2019, and only notified later Optimism Summa Harmony Action point: create a low-volume geth-announce@ethereum.org email list where dependent projects/operators can receive public announcements. - This has been done. If you wish to receive release- and security announcements, sign up here","title":"Disclosure path"},{"location":"postmortems/2021-08-22-split-postmortem/#fork-monitoring","text":"The fork monitor behaved \u2018ok\u2019 during the incident, but had to be restarted during the evening. Action point: improve the resiliency of the forkmon, which is currently not performing great when many nodes are connected. Action point: enable push-based alerts to be sent from the forkmon, to speed up the fork detection.","title":"Fork monitoring"},{"location":"postmortems/2021-08-22-split-postmortem/#links","text":"[1] https://twitter.com/go_ethereum/status/1428051458763763721 [2] https://twitter.com/mhswende/status/1431259601530458112","title":"Links"},{"location":"postmortems/2021-08-22-split-postmortem/#appendix","text":"","title":"Appendix"},{"location":"postmortems/2021-08-22-split-postmortem/#subprojects","text":"The projects were sent variations of the following text: 1 2 3 4 5 6 7 8 9 We have identified a security issue with go-ethereum, and will issue a new release (v1.10.8) on Tuesday next week. At this point, we will not disclose details about the issue, but recommend downstream/dependent projects to be ready to take actions to upgrade to the latest go-ethereum codebase. More information about the issue will be disclosed at a later date. https://twitter.com/go_ethereum/status/1428051458763763721","title":"Subprojects"},{"location":"postmortems/2021-08-22-split-postmortem/#patch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 diff --git a/core/vm/instructions.go b/core/vm/instructions.go index f7ef2f900e..6c8c6e6e6f 100644 --- a/core/vm/instructions.go +++ b/core/vm/instructions.go @@ -669,6 +669,7 @@ func opCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byt } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -703,6 +704,7 @@ func opCallCode(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([ } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -730,6 +732,7 @@ func opDelegateCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas @@ -757,6 +760,7 @@ func opStaticCall(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) } stack.push(&temp) if err == nil || err == ErrExecutionReverted { + ret = common.CopyBytes(ret) scope.Memory.Set(retOffset.Uint64(), retSize.Uint64(), ret) } scope.Contract.Gas += returnGas diff --git a/core/vm/interpreter.go b/core/vm/interpreter.go index 9cf0c4e2c1..9fb83799c9 100644 --- a/core/vm/interpreter.go +++ b/core/vm/interpreter.go @@ -262,7 +262,7 @@ func (in *EVMInterpreter) Run(contract *Contract, input []byte, readOnly bool) ( // if the operation clears the return data (e.g. it has returning data) // set the last return to the result of the operation. if operation.returns { - in.returnData = common.CopyBytes(res) + in.returnData = res } switch {","title":"Patch"},{"location":"postmortems/2021-08-22-split-postmortem/#statetest-to-test-for-the-issue","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 { \"trigger-issue\" : { \"env\" : { \"currentCoinbase\" : \"b94f5374fce5edbc8e2a8697c15331677e6ebf0b\" , \"currentDifficulty\" : \"0x20000\" , \"currentGasLimit\" : \"0x26e1f476fe1e22\" , \"currentNumber\" : \"0x1\" , \"currentTimestamp\" : \"0x3e8\" , \"previousHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" }, \"pre\" : { \"0x00000000000000000000000000000000000000bb\" : { \"code\" : \"0x6001600053600260015360036002536004600353600560045360066005536006600260066000600060047f7ef0367e633852132a0ebbf70eb714015dd44bc82e1e55a96ef1389c999c1bcaf13d600060003e596000208055\" , \"storage\" : {}, \"balance\" : \"0x5\" , \"nonce\" : \"0x0\" }, \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\" : { \"code\" : \"0x\" , \"storage\" : {}, \"balance\" : \"0xffffffff\" , \"nonce\" : \"0x0\" } }, \"transaction\" : { \"gasPrice\" : \"0x1\" , \"nonce\" : \"0x0\" , \"to\" : \"0x00000000000000000000000000000000000000bb\" , \"data\" : [ \"0x\" ], \"gasLimit\" : [ \"0x7a1200\" ], \"value\" : [ \"0x01\" ], \"secretKey\" : \"0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\" }, \"out\" : \"0x\" , \"post\" : { \"Berlin\" : [ { \"hash\" : \"2a38a040bab1e1fa499253d98b2fd363e5756ecc52db47dd59af7116c068368c\" , \"logs\" : \"1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\" , \"indexes\" : { \"data\" : 0 , \"gas\" : 0 , \"value\" : 0 } } ] } } }","title":"Statetest to test for the issue"},{"location":"tutorials/private-network/","text":"Tutorial: Operating a Private Network \u00b6 Operating a private network \u00b6 Maintaining your own private network is more involved as a lot of configurations taken for granted in the official networks need to be manually set up. Defining the private genesis state \u00b6 First, you\u2019ll need to create the genesis state of your networks, which all nodes need to be aware of and agree upon. This consists of a small JSON file (e.g. call it genesis.json ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"config\" : { \"chainId\" : <arbi trar y posi t ive i nte ger> , \"homesteadBlock\" : 0 , \"eip150Block\" : 0 , \"eip155Block\" : 0 , \"eip158Block\" : 0 , \"byzantiumBlock\" : 0 , \"constantinopleBlock\" : 0 , \"petersburgBlock\" : 0 }, \"alloc\" : {}, \"coinbase\" : \"0x0000000000000000000000000000000000000000\" , \"difficulty\" : \"0x20000\" , \"extraData\" : \"\" , \"gasLimit\" : \"0x2fefd8\" , \"nonce\" : \"0x0000000000000042\" , \"mixhash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"timestamp\" : \"0x00\" } The above fields should be fine for most purposes, although we\u2019d recommend changing the nonce to some random value so you prevent unknown remote nodes from being able to connect to you. If you\u2019d like to pre-fund some accounts for easier testing, create the accounts and populate the alloc field with their addresses. 1 2 3 4 5 6 7 8 \"alloc\" : { \"0x0000000000000000000000000000000000000001\" : { \"balance\" : \"111111111\" }, \"0x0000000000000000000000000000000000000002\" : { \"balance\" : \"222222222\" } } With the genesis state defined in the above JSON file, you\u2019ll need to initialize every geth node with it prior to starting it up to ensure all blockchain parameters are correctly set: 1 $ geth init path/to/genesis.json Creating the rendezvous point \u00b6 With all nodes that you want to run initialized to the desired genesis state, you\u2019ll need to start a bootstrap node that others can use to find each other in your network and/or over the internet. The clean way is to configure and run a dedicated bootnode: 1 2 $ bootnode --genkey = boot.key $ bootnode --nodekey = boot.key With the bootnode online, it will display an enode URL that other nodes can use to connect to it and exchange peer information. Make sure to replace the displayed IP address information (most probably [::] ) with your externally accessible IP to get the actual enode URL. Note You could also use a full-fledged geth node as a bootnode, but it\u2019s the less recommended way. Starting up your member nodes \u00b6 With the bootnode operational and externally reachable (you can try telnet <ip> <port> to ensure it\u2019s indeed reachable), start every subsequent geth node pointed to the bootnode for peer discovery via the --bootnodes flag. It will probably also be desirable to keep the data directory of your private network separated, so do also specify a custom --datadir flag. 1 $ geth --datadir = path/to/custom/data/folder --bootnodes = <bootnode-enode-url-from-above> Note Since your network will be completely cut off from the main and test networks, you\u2019ll also need to configure a miner to process transactions and create new blocks for you. Running a private miner \u00b6 Mining on the public Ethereum network is a complex task as it\u2019s only feasible using GPUs, requiring an OpenCL or CUDA enabled ethminer instance. For information on such a setup, please consult the EtherMining subreddit and the ethminer repository. In a private network setting, however a single CPU miner instance is more than enough for practical purposes as it can produce a stable stream of blocks at the correct intervals without needing heavy resources (consider running on a single thread, no need for multiple ones either). To start a geth instance for mining, run it with all your usual flags, extended by: 1 $ geth <usual-flags> --mine --miner.threads = 1 --etherbase = 0x0000000000000000000000000000000000000000 Which will start mining blocks and transactions on a single CPU thread, crediting all proceedings to the account specified by --etherbase . You can further tune the mining by changing the default gas limit blocks converge to ( --targetgaslimit ) and the price transactions are accepted at ( --gasprice ).","title":"Tutorial: Operating a Private Network"},{"location":"tutorials/private-network/#tutorial-operating-a-private-network","text":"","title":"Tutorial: Operating a Private Network"},{"location":"tutorials/private-network/#operating-a-private-network","text":"Maintaining your own private network is more involved as a lot of configurations taken for granted in the official networks need to be manually set up.","title":"Operating a private network"},{"location":"tutorials/private-network/#defining-the-private-genesis-state","text":"First, you\u2019ll need to create the genesis state of your networks, which all nodes need to be aware of and agree upon. This consists of a small JSON file (e.g. call it genesis.json ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"config\" : { \"chainId\" : <arbi trar y posi t ive i nte ger> , \"homesteadBlock\" : 0 , \"eip150Block\" : 0 , \"eip155Block\" : 0 , \"eip158Block\" : 0 , \"byzantiumBlock\" : 0 , \"constantinopleBlock\" : 0 , \"petersburgBlock\" : 0 }, \"alloc\" : {}, \"coinbase\" : \"0x0000000000000000000000000000000000000000\" , \"difficulty\" : \"0x20000\" , \"extraData\" : \"\" , \"gasLimit\" : \"0x2fefd8\" , \"nonce\" : \"0x0000000000000042\" , \"mixhash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\" , \"timestamp\" : \"0x00\" } The above fields should be fine for most purposes, although we\u2019d recommend changing the nonce to some random value so you prevent unknown remote nodes from being able to connect to you. If you\u2019d like to pre-fund some accounts for easier testing, create the accounts and populate the alloc field with their addresses. 1 2 3 4 5 6 7 8 \"alloc\" : { \"0x0000000000000000000000000000000000000001\" : { \"balance\" : \"111111111\" }, \"0x0000000000000000000000000000000000000002\" : { \"balance\" : \"222222222\" } } With the genesis state defined in the above JSON file, you\u2019ll need to initialize every geth node with it prior to starting it up to ensure all blockchain parameters are correctly set: 1 $ geth init path/to/genesis.json","title":"Defining the private genesis state"},{"location":"tutorials/private-network/#creating-the-rendezvous-point","text":"With all nodes that you want to run initialized to the desired genesis state, you\u2019ll need to start a bootstrap node that others can use to find each other in your network and/or over the internet. The clean way is to configure and run a dedicated bootnode: 1 2 $ bootnode --genkey = boot.key $ bootnode --nodekey = boot.key With the bootnode online, it will display an enode URL that other nodes can use to connect to it and exchange peer information. Make sure to replace the displayed IP address information (most probably [::] ) with your externally accessible IP to get the actual enode URL. Note You could also use a full-fledged geth node as a bootnode, but it\u2019s the less recommended way.","title":"Creating the rendezvous point"},{"location":"tutorials/private-network/#starting-up-your-member-nodes","text":"With the bootnode operational and externally reachable (you can try telnet <ip> <port> to ensure it\u2019s indeed reachable), start every subsequent geth node pointed to the bootnode for peer discovery via the --bootnodes flag. It will probably also be desirable to keep the data directory of your private network separated, so do also specify a custom --datadir flag. 1 $ geth --datadir = path/to/custom/data/folder --bootnodes = <bootnode-enode-url-from-above> Note Since your network will be completely cut off from the main and test networks, you\u2019ll also need to configure a miner to process transactions and create new blocks for you.","title":"Starting up your member nodes"},{"location":"tutorials/private-network/#running-a-private-miner","text":"Mining on the public Ethereum network is a complex task as it\u2019s only feasible using GPUs, requiring an OpenCL or CUDA enabled ethminer instance. For information on such a setup, please consult the EtherMining subreddit and the ethminer repository. In a private network setting, however a single CPU miner instance is more than enough for practical purposes as it can produce a stable stream of blocks at the correct intervals without needing heavy resources (consider running on a single thread, no need for multiple ones either). To start a geth instance for mining, run it with all your usual flags, extended by: 1 $ geth <usual-flags> --mine --miner.threads = 1 --etherbase = 0x0000000000000000000000000000000000000000 Which will start mining blocks and transactions on a single CPU thread, crediting all proceedings to the account specified by --etherbase . You can further tune the mining by changing the default gas limit blocks converge to ( --targetgaslimit ) and the price transactions are accepted at ( --gasprice ).","title":"Running a private miner"}]}